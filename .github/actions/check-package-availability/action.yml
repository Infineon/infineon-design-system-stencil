name: 'Check Package Availability'
description: 'Wait for an npm package to become available with exponential backoff'
inputs:
  package:
    description: 'NPM package name (e.g., @infineon/infineon-design-system-stencil)'
    required: true
  version:
    description: 'Package version to check for'
    required: true
  max-attempts:
    description: 'Maximum number of attempts to check'
    required: false
    default: '10'
  max-delay:
    description: 'Maximum delay between attempts in seconds'
    required: false
    default: '20'
  registry:
    description: 'NPM registry URL'
    required: false
    default: 'https://registry.npmjs.org'
outputs:
  available:
    description: 'Whether the package is available (true/false)'
    value: ${{ steps.check.outputs.available }}
  attempts:
    description: 'Number of attempts made'
    value: ${{ steps.check.outputs.attempts }}
runs:
  using: 'composite'
  steps:
    - name: Check package availability
      id: check
      shell: bash
      run: |
        PACKAGE="${{ inputs.package }}"
        VERSION="${{ inputs.version }}"
        MAX_ATTEMPTS="${{ inputs.max-attempts }}"
        MAX_DELAY="${{ inputs.max-delay }}"
        REGISTRY="${{ inputs.registry }}"
        
        # Function to check package with quiet output
        check_package() {
          npm view "$PACKAGE@$VERSION" version --registry="$REGISTRY" &>/dev/null
        }
        
        echo "⏳ Waiting for $PACKAGE@$VERSION to be available..."
        echo "Registry: $REGISTRY"
        echo "Max attempts: $MAX_ATTEMPTS"
        echo "Max delay: $MAX_DELAY seconds"
        
        AVAILABLE="false"
        for i in $(seq 1 $MAX_ATTEMPTS); do
          echo "Attempt $i/$MAX_ATTEMPTS..."
          if check_package; then
            echo "✅ Package available after $i attempt(s)!"
            AVAILABLE="true"
            break
          fi
          
          if [ $i -lt $MAX_ATTEMPTS ]; then
            DELAY=$((2**i < MAX_DELAY ? 2**i : MAX_DELAY))
            echo "❌ Not available, waiting ${DELAY} seconds before next attempt..."
            sleep $DELAY
          fi
        done
        
        if [ "$AVAILABLE" = "false" ]; then
          echo "❌ Package $PACKAGE@$VERSION not available after $MAX_ATTEMPTS attempts"
        fi
        
        echo "available=$AVAILABLE" >> $GITHUB_OUTPUT
        echo "attempts=$i" >> $GITHUB_OUTPUT