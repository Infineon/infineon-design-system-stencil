name: Deploy canary releases and update example apps on Github pages

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize # canary on new commit

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:
  stencil-library-release:
    outputs:
      CANARY_VERSION: ${{ steps.build.outputs.CANARY_VERSION }}
      SKIP_REMAINING: ${{ steps.build.outputs.SKIP_REMAINING }}
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')" # job will not run, if triggered via ship-it
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0 # fetch all tags for ship-it

      - name: Download + Setup auto
        uses: auto-it/setup-auto@v1

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"
          cache: 'npm' # Enable built-in npm cache

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Check changed files to determine if we need full builds
      - name: Check changed files
        id: check_changes
        run: |
          git diff --name-only ${{ github.event.before }} ${{ github.event.after }} > changed_files.txt
          
          # Check if code files were changed
          if grep -q "\.tsx\|\.ts\|\.js\|\.jsx\|\.vue\|\.css\|\.scss" changed_files.txt; then
            echo "code_changed=true" >> $GITHUB_OUTPUT
          else
            echo "code_changed=false" >> $GITHUB_OUTPUT
          fi
          
          # Check specific package changes to optimize builds later
          if grep -q "packages/components/" changed_files.txt; then
            echo "stencil_changed=true" >> $GITHUB_OUTPUT
          else
            echo "stencil_changed=false" >> $GITHUB_OUTPUT
          fi

      # Improved caching strategy
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            **/node_modules
            packages/components/node_modules
            packages/components-vue/node_modules
            packages/components-react/node_modules
            packages/components-angular/node_modules
            examples/wrapper-components/vue-javascript/node_modules
            examples/wrapper-components/react-vite-js/node_modules
            examples/stencil-components/vanilla-cdn/node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/lerna.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-build-
    
      # Cache build output
      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: |
            packages/components/dist
            packages/components-vue/dist
            packages/components-react/dist
            packages/components-angular/dist
          key: ${{ runner.os }}-build-output-${{ hashFiles('packages/components/src/**/*.ts', 'packages/components/src/**/*.tsx') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-output-${{ hashFiles('packages/components/src/**/*.ts', 'packages/components/src/**/*.tsx') }}-
      
      - name: Install dependencies for all packages
        run: npm ci # Using npm ci instead of npm install for faster, reliable installs
    
      - name: Build and deploy Stencil core package
        id: build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ "${{ steps.check_changes.outputs.code_changed }}" = "true" ] || [ "${{ github.event.action }}" = "opened" ]; then
            # Full build for code changes or new PRs
            npm run build:components
          else
            # Skip build if no code changes
            echo "No code changes detected, skipping Stencil build"
          fi
          
          if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
            echo "Skipping creation of a canary release due to workflow trigger being a Dependabot PR"
            echo "SKIP_REMAINING=true" >> $GITHUB_OUTPUT
          else 
            cd packages/components
            CANARY_VERSION=$(auto shipit --dry-run --quiet)
            echo "CANARY_VERSION=$CANARY_VERSION" >> $GITHUB_ENV
            echo "CANARY_VERSION=$CANARY_VERSION" >> $GITHUB_OUTPUT
            echo "SKIP_REMAINING=false" >> $GITHUB_OUTPUT
            echo "Publishing: $CANARY_VERSION"
            auto shipit
          fi

      # Replace sleep with polling for package availability
      - name: Check package availability
        if: steps.build.outputs.SKIP_REMAINING == 'false'
        run: |
          PACKAGE_NAME="@infineon/infineon-design-system-stencil"
          VERSION="${{ steps.build.outputs.CANARY_VERSION }}"
          MAX_RETRIES=10
          RETRY_WAIT=5
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Checking if $PACKAGE_NAME@$VERSION is available (attempt $i)..."
            if npm view "$PACKAGE_NAME@$VERSION" version &>/dev/null; then
              echo "✅ Package $PACKAGE_NAME@$VERSION is available!"
              break
            else
              echo "⏳ Package not yet available, waiting ${RETRY_WAIT}s..."
              sleep $RETRY_WAIT
              # Increase wait time for subsequent attempts
              RETRY_WAIT=$((RETRY_WAIT + 5))
            fi
            
            if [ $i -eq $MAX_RETRIES ]; then
              echo "⚠️ Package availability check timed out after $MAX_RETRIES attempts"
            fi
          done
      
      - name: Update Dependencies in Angular, Vue and React packages
        if: steps.build.outputs.SKIP_REMAINING == 'false'
        id: update-wrapper-dependencies
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          BRANCH_NAME: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}
          CANARY_VERSION: ${{ steps.build.outputs.CANARY_VERSION }}
        run: |
          echo "CANARY_VERSION: $CANARY_VERSION"
          echo "Installing Stencil library for Angular, Vue and React: $CANARY_VERSION"
          lerna version $CANARY_VERSION --no-git-tag-version --y

          # Update Angular package
          cd packages/components-angular/projects/component-library
          jq 'del(.peerDependencies["@infineon/infineon-design-system-stencil"])' package.json > tmp && mv tmp package.json
          jq --arg CANARY_VERSION "$CANARY_VERSION" '.peerDependencies["@infineon/infineon-design-system-stencil"] = $CANARY_VERSION' package.json > tmp && mv tmp package.json
          cd ../../../../

          # Update Vue package
          cd packages/components-vue
          CANARY_VERSION_CLEAN=$(echo "$CANARY_VERSION" | sed 's/^[\^~]*//') # strip any leading ^ or ~ just in case
          jq 'del(.dependencies["@infineon/infineon-design-system-stencil"])' package.json > tmp && mv tmp package.json
          jq --arg v "$CANARY_VERSION_CLEAN" '.dependencies["@infineon/infineon-design-system-stencil"] = $v' package.json > tmp && mv tmp package.json
 
          # Update React package
          cd ../components-react
          jq 'del(.dependencies["@infineon/infineon-design-system-stencil"])' package.json > tmp && mv tmp package.json
          jq --arg CANARY_VERSION "$CANARY_VERSION" '.dependencies["@infineon/infineon-design-system-stencil"] = $CANARY_VERSION' package.json > tmp && mv tmp package.json

          # Install Stencil package with retries
          RETRIES=5
          for i in $(seq 1 $RETRIES); do
            echo "Attempt $i to install Stencil version: $CANARY_VERSION"
            if npm install "@infineon/infineon-design-system-stencil@$CANARY_VERSION" --save-exact; then
              echo "✅ Installed successfully on attempt $i"
              break
            else
              echo "❌ Failed, retrying in $((i * 5)) seconds..."
              sleep $((i * 5))
            fi
          done

          cd ../../
          npm install

          # Verify updates
          echo "Verifying updates in Angular package"
          jq '.peerDependencies["@infineon/infineon-design-system-stencil"]' packages/components-angular/projects/component-library/package.json
          echo "Verifying updates in Vue package"
          jq '.dependencies["@infineon/infineon-design-system-stencil"]' packages/components-vue/package.json
          echo "Verifying updates in React package"
          jq '.dependencies["@infineon/infineon-design-system-stencil"]' packages/components-react/package.json
            
      # Use Nx for better parallelization of builds
      - name: Install Nx
        if: steps.build.outputs.SKIP_REMAINING == 'false'
        run: npm install -g nx

      - name: Build and deploy Angular, Vue and React packages
        if: steps.build.outputs.SKIP_REMAINING == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          lerna version $CANARY_VERSION --no-git-tag-version --y
          
          # Run builds in parallel with Nx
          echo "Running builds in parallel using Nx..."
          nx run-many --target=build --parallel=3 --projects=components-angular,components-react,components-vue
          
          # Publish packages
          cd packages/components-angular/dist/@infineon/infineon-design-system-angular
          npm publish --tag canary
          cd ../../../../components-react
          npm publish --tag canary
          cd ../components-vue
          npm publish --tag canary

      - name: Update Dependencies in example applications
        if: steps.build.outputs.SKIP_REMAINING == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          CANARY_VERSION: ${{ steps.build.outputs.CANARY_VERSION }}
        run: |
          # Update Vue wrapper component
          cd examples/wrapper-components/vue-javascript
          jq --arg CANARY_VERSION "$CANARY_VERSION" '.dependencies["@infineon/infineon-design-system-vue"] = $CANARY_VERSION' package.json > package.json.tmp && mv package.json.tmp package.json
          cd ../../..
  
          # Update React wrapper component
          cd examples/wrapper-components/react-vite-js
          jq --arg CANARY_VERSION "$CANARY_VERSION" '.dependencies["@infineon/infineon-design-system-react"] = $CANARY_VERSION' package.json > package.json.tmp && mv package.json.tmp package.json
          cd ../../..

      - name: Commit and push all changes
        if: steps.build.outputs.SKIP_REMAINING == 'false'
        env:
          BRANCH_NAME: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git commit -m "Update Stencil library version to $CANARY_VERSION"
          git push origin HEAD:$BRANCH_NAME

  #deploy gh-pages previews for example applications:
  deploy-example-apps:
    needs: stencil-library-release
    if: needs.stencil-library-release.outputs.SKIP_REMAINING == 'false'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Continue with other builds even if one fails
      matrix:
        app:
          - name: vue
            path: examples/wrapper-components/vue-javascript
            install_cmd: npm ci # Using npm ci instead of npm i
            build_cmd: npm run build -- --base=/infineon-design-system-stencil/pr-preview-vue-example/pr-${{ github.event.pull_request.number }}/
            source_dir: ./examples/wrapper-components/vue-javascript/dist
            umbrella_dir: pr-preview-vue-example
            update_cmd: ""

          - name: react
            path: examples/wrapper-components/react-vite-js
            install_cmd: npm ci # Using npm ci instead of npm install
            build_cmd: npm run build
            source_dir: ./examples/wrapper-components/react-vite-js/dist
            umbrella_dir: pr-preview-react-example
            update_cmd: "REACT_VERSION=$(jq -r '.dependencies[\"@infineon/infineon-design-system-react\"]' package.json); STENCIL_VERSION=$(npm list @infineon/infineon-design-system-stencil --depth=1 | grep @infineon/infineon-design-system-stencil@ | awk -F@ '{print $3}'); echo \"Installed version Stencil: $STENCIL_VERSION - Installed version React: $REACT_VERSION\""

          - name: angular
            path: packages/components-angular
            install_cmd: npm ci # Using npm ci instead of npm install
            build_cmd: npm run build my-app
            source_dir: ./packages/components-angular/dist/my-app
            umbrella_dir: pr-preview-angular-example
            update_cmd: "cd packages/components-angular && jq --arg CANARY_VERSION \"${{ needs.stencil-library-release.outputs.CANARY_VERSION }}\" '.dependencies[\"@infineon/infineon-design-system-angular\"] = $CANARY_VERSION' package.json > package.json.tmp && mv package.json.tmp package.json && cd projects/component-library && jq --arg CANARY_VERSION \"${{ needs.stencil-library-release.outputs.CANARY_VERSION }}\" '.peerDependencies[\"@infineon/infineon-design-system-stencil\"] = $CANARY_VERSION' package.json > package.json.tmp && mv package.json.tmp package.json && cd ../../.."

          - name: vanilla
            path: examples/stencil-components/vanilla-cdn
            install_cmd: npm ci # Using npm ci instead of npm install
            build_cmd: npm run update-link && npm run build
            source_dir: ./examples/stencil-components/vanilla-cdn/dist
            umbrella_dir: pr-preview-vanilla-example
            update_cmd: ""
            
    # Add concurrency for each matrix job to avoid conflicts
    concurrency:
      group: deploy-${{ matrix.app.name }}-${{ github.event.pull_request.number }}
      cancel-in-progress: true
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
          cache: 'npm' # Enable built-in npm cache
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Update configuration if needed
        if: matrix.app.update_cmd != ''
        run: ${{ matrix.app.update_cmd }}
        shell: bash

      - name: Install and Build
        run: |
          cd ${{ matrix.app.path }}
          rm -rf node_modules || true
          ${{ matrix.app.install_cmd }}
          ${{ matrix.app.build_cmd }}

      - name: Deploy preview
        uses: rossjrw/pr-preview-action@v1
        id: preview
        with:
          source-dir: ${{ matrix.app.source_dir }}
          umbrella_dir: ${{ matrix.app.umbrella_dir }}
          token: ${{ secrets.GH_TOKEN }}
      
      - name: Save deployment URL
        run: |
          mkdir -p ./deployment-urls
          echo "${{ steps.preview.outputs.deployment-url }}" > ./deployment-urls/${{ matrix.app.name }}.txt
      
      - name: Upload deployment URL
        uses: actions/upload-artifact@v3
        with:
          name: deployment-url-${{ matrix.app.name }}
          path: ./deployment-urls/${{ matrix.app.name }}.txt
          retention-days: 1

  collect-urls-and-update-pr:
    needs: deploy-example-apps
    runs-on: ubuntu-latest
    steps:
      - name: Download all deployment URLs
        uses: actions/download-artifact@v3
        with:
          path: ./deployment-urls
      
      - name: Read deployment URLs
        id: get-urls
        run: |
          echo "VUE_URL=$(cat ./deployment-urls/deployment-url-vue/vue.txt)" >> $GITHUB_OUTPUT
          echo "REACT_URL=$(cat ./deployment-urls/deployment-url-react/react.txt)" >> $GITHUB_OUTPUT
          echo "ANGULAR_URL=$(cat ./deployment-urls/deployment-url-angular/angular.txt)" >> $GITHUB_OUTPUT
          echo "VANILLA_URL=$(cat ./deployment-urls/deployment-url-vanilla/vanilla.txt)" >> $GITHUB_OUTPUT
      
      - name: Update comment in PR
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const vueUrl = "${{ steps.get-urls.outputs.VUE_URL }}";
            const reactUrl = "${{ steps.get-urls.outputs.REACT_URL }}";
            const angularUrl = "${{ steps.get-urls.outputs.ANGULAR_URL }}";
            const vanillaUrl = "${{ steps.get-urls.outputs.VANILLA_URL }}";
            const EXAMPLE_APPS_IDENTIFIER = "--EXAMPLE-APPS-PREVIEW--";
            const newText = `--EXAMPLE-APPS-PREVIEW--\nPR Preview URLs:\n- Vue example: ${vueUrl}\n- React example: ${reactUrl}\n- Angular example: ${angularUrl}\n- Vanilla example: ${vanillaUrl}`;
  
            const {data: comments} = await github.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            const appsComment = comments.find(c => c.body.startsWith(EXAMPLE_APPS_IDENTIFIER));

            if (appsComment) {
              await github.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: appsComment.id,
                body: newText
              });
            } else {
              await github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: newText
              });
            }