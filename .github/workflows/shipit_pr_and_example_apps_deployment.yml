name: Deploy canary releases and update example apps on Github pages

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize # canary on new commit

  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild (ignore cache)'
        type: boolean
        default: false

# Add workflow concurrency to prevent conflicts
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  stencil-library-release:
    outputs:
      CANARY_VERSION: ${{ steps.build.outputs.CANARY_VERSION }}
      SKIP_REMAINING: ${{ steps.build.outputs.SKIP_REMAINING }}
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0 # fetch all tags for ship-it

      - name: download + setup auto
        uses: auto-it/setup-auto@v1

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"
          cache: 'npm'

      - name: Check for jq and install if needed
        run: |
          if command -v jq &> /dev/null; then
            echo "✅ jq is already installed: $(jq --version)"
          else
            echo "📦 Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Cache build outputs
        uses: actions/cache@v3
        id: build-cache
        with:
          path: |
            packages/components/dist
            packages/components/www/build
            packages/components-vue/dist
            packages/components-react/dist
            packages/components-angular/dist
            packages/components-angular/projects/component-library/src/lib/stencil-generated/
            packages/components-react/lib/components/stencil-generated/
            packages/components-vue/lib/vue-component-lib/
          key: ${{ runner.os }}-build-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref_name }}-v3-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref_name }}-v3-
            ${{ runner.os }}-build-v3-


      - name: Install dependencies for all packages
        run: |
          npm ci || npm install
          git checkout -- package-lock.json 

      - name: Build and deploy Stencil core package
        id: build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Handle manual cache busting
          if [ "${{ github.event.inputs.force_rebuild || 'false' }}" = "true" ]; then
            echo "🔄 Force rebuild requested - ignoring cache"
            CACHE_VALID="false"
          else
            # Debug information
            echo "Cache hit raw value: '${{ steps.build-cache.outputs.cache-hit }}'"
            
            # Check if files exist in disk
            echo "Checking dist directory contents:"
            ls -la packages/components/dist/ || echo "Dist directory not found"
                    
            # More thorough validation of cached build - IGNORE VERSION MISMATCH
            if [ -d "packages/components/dist" ] && 
              [ -f "packages/components/dist/index.js" ] && 
              [ -f "packages/components/dist/collection/collection-manifest.json" ]; then
              # Read package version from actual built files
              BUILT_VERSION=$(grep -o '"version":[[:space:]]*"[^"]*"' packages/components/dist/collection/collection-manifest.json | cut -d'"' -f4)
              # Read expected version from package.json
              EXPECTED_VERSION=$(node -e "console.log(require('./packages/components/package.json').version)")
              
              echo "Built version from manifest: $BUILT_VERSION"
              echo "Expected version from package.json: $EXPECTED_VERSION"
              
              # CHANGED: Don't invalidate cache just due to version mismatch
              echo "✅ Files exist and are valid"
              CACHE_VALID="true"
            else
              echo "❌ Required files not found - need rebuild"
              CACHE_VALID="false"
            fi

            # Only check for changes if we have valid files
            if [ "$CACHE_VALID" = "true" ]; then
              # Check for source code changes
              CORE_CHANGED=$(git diff --name-only HEAD~1 HEAD -- packages/components/src/ || echo "diff failed")
              DEPS_CHANGED=$(git diff --name-only HEAD~1 HEAD -- package-lock.json package.json packages/components/package.json || echo "diff failed")
              CONFIG_CHANGED=$(git diff --name-only HEAD~1 HEAD -- packages/components/stencil.config.ts **/tsconfig.json || echo "diff failed")
              
              echo "Changes in core: $CORE_CHANGED"
              echo "Changes in deps: $DEPS_CHANGED"
              echo "Changes in config: $CONFIG_CHANGED"
              
              if [ -z "$CORE_CHANGED" ] && [ -z "$DEPS_CHANGED" ] && [ -z "$CONFIG_CHANGED" ]; then
                echo "🎉 No changes detected and cache is valid. Skipping build."
                SKIP_BUILD="true"
              else
                echo "🔨 Changes detected - rebuild required"
                SKIP_BUILD="false"
                CACHE_VALID="false"
              fi
            else
              SKIP_BUILD="false"
            fi
          fi
          
          # Run the build if needed
          if [ "$SKIP_BUILD" != "true" ]; then
            echo "🏗️ Running component build..."
            npm run build:components
            echo "✅ Build completed successfully"
          fi
          
          # Handle versioning and publish (always run this part regardless of build)
          if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
            echo "Skipping creation of a canary release due to workflow trigger being a Dependabot PR"
            echo "SKIP_REMAINING=true" >> $GITHUB_OUTPUT
          else 
            cd packages/components
            CANARY_VERSION=$(auto shipit --dry-run --quiet)
            echo "CANARY_VERSION=$CANARY_VERSION" >> $GITHUB_ENV
            echo "CANARY_VERSION=$CANARY_VERSION" >> $GITHUB_OUTPUT
            echo "SKIP_REMAINING=false" >> $GITHUB_OUTPUT
            echo "WEBEX_MESSAGE=New package release - Version: $CANARY_VERSION" >> $GITHUB_ENV
            echo "Publishing: $CANARY_VERSION"
            auto shipit
          fi

      # Save the cache explicitly after build (only if we built)
      - name: Save build cache
        if: "${{ !contains(env.SKIP_BUILD, 'true') }}"
        uses: actions/cache/save@v3
        with:
          path: |
            packages/components/dist
            packages/components/www/build
            packages/components-vue/dist
            packages/components-react/dist
            packages/components-angular/dist
            packages/components-angular/projects/component-library/src/lib/stencil-generated/
            packages/components-react/lib/components/stencil-generated/
            packages/components-vue/lib/vue-component-lib/
          key: ${{ runner.os }}-build-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref_name }}-v3-${{ hashFiles('package-lock.json') }}

      # Replace sleep with package availability check
      - name: Verify package availability
        if: steps.build.outputs.SKIP_REMAINING == 'false'
        id: verify-package
        run: |
          echo "Verifying package availability for $CANARY_VERSION"
          MAX_RETRIES=10
          RETRY_COUNT=0
          DELAY=5
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if npm view "@infineon/infineon-design-system-stencil@$CANARY_VERSION" version &> /dev/null; then
              echo "✅ Package $CANARY_VERSION is available in registry"
              echo "PACKAGE_AVAILABLE=true" >> $GITHUB_OUTPUT
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "⏳ Package not available yet. Retry $RETRY_COUNT of $MAX_RETRIES..."
              sleep $DELAY
              DELAY=$((DELAY + 5))
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "❌ Package availability check timed out after $MAX_RETRIES attempts"
            echo "PACKAGE_AVAILABLE=false" >> $GITHUB_OUTPUT
          fi

      
      # Create Stencil loader shim for components
      - name: Create Stencil loader shim
        if: steps.build.outputs.SKIP_REMAINING == 'false'
        run: |
          echo "Creating Stencil loader shim for wrapper builds..."
          
          # Create loader directory in root node_modules
          mkdir -p node_modules/@infineon/infineon-design-system-stencil/loader
          
          # Create index.js with required functions
          cat > node_modules/@infineon/infineon-design-system-stencil/loader/index.js << 'EOF'
          export function defineCustomElements() {
            return Promise.resolve();
          }
          
          export function applyPolyfills() {
            return Promise.resolve();
          }
          EOF
          
          # Create TypeScript declarations
          cat > node_modules/@infineon/infineon-design-system-stencil/loader/index.d.ts << 'EOF'
          export declare function defineCustomElements(win?: Window): Promise<void>;
          export declare function applyPolyfills(): Promise<void>;
          EOF
      - name: Update Dependencies in Angular, Vue and React packages
        if: steps.build.outputs.SKIP_REMAINING == 'false'
        id: update-wrapper-dependencies
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          BRANCH_NAME: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}
          CANARY_VERSION: ${{ steps.build.outputs.CANARY_VERSION }}
        run: |
          echo "CANARY_VERSION: $CANARY_VERSION"
          echo "Installing Stencil library for Angular, Vue and React: $CANARY_VERSION"
          lerna version $CANARY_VERSION --no-git-tag-version --y

          # Update Angular package
          cd packages/components-angular/projects/component-library
          jq 'del(.peerDependencies["@infineon/infineon-design-system-stencil"])' package.json > tmp && mv tmp package.json
          jq --arg CANARY_VERSION "$CANARY_VERSION" '.peerDependencies["@infineon/infineon-design-system-stencil"] = $CANARY_VERSION' package.json > tmp && mv tmp package.json
          cd ../../../../

          # Update Vue package
          cd packages/components-vue
          CANARY_VERSION_CLEAN=$(echo "$CANARY_VERSION" | sed 's/^[\^~]*//') # strip any leading ^ or ~ just in case
          jq 'del(.dependencies["@infineon/infineon-design-system-stencil"])' package.json > tmp && mv tmp package.json
          jq --arg v "$CANARY_VERSION_CLEAN" '.dependencies["@infineon/infineon-design-system-stencil"] = $v' package.json > tmp && mv tmp package.json
 
          # Update React package
          cd ../components-react
          jq 'del(.dependencies["@infineon/infineon-design-system-stencil"])' package.json > tmp && mv tmp package.json
          jq --arg CANARY_VERSION "$CANARY_VERSION" '.dependencies["@infineon/infineon-design-system-stencil"] = $CANARY_VERSION' package.json > tmp && mv tmp package.json

          # Retry install of published Stencil package (race condition safe)
          RETRIES=5
          for i in $(seq 1 $RETRIES); do
            echo "Attempt $i to install Stencil version: $CANARY_VERSION"
            if npm install "@infineon/infineon-design-system-stencil@$CANARY_VERSION" --save-exact; then
              echo "✅ Installed successfully on attempt $i"
              break
            else
              echo "❌ Failed, retrying in $((i * 5)) seconds..."
              sleep $((i * 5))
            fi
          done

          cd ../../
          npm install

          # Verify updates
          echo "Verifying updates in Angular package"
          jq '.peerDependencies["@infineon/infineon-design-system-stencil"]' packages/components-angular/projects/component-library/package.json
          echo "Verifying updates in Vue package"
          jq '.dependencies["@infineon/infineon-design-system-stencil"]' packages/components-vue/package.json
          echo "Verifying updates in React package"
          jq '.dependencies["@infineon/infineon-design-system-stencil"]' packages/components-react/package.json

    
            
      - name: Build and deploy Angular, Vue and React packages
        id: build-wrappers  
        if: steps.build.outputs.SKIP_REMAINING == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          lerna version $CANARY_VERSION --no-git-tag-version --y
          # Build sequentially to avoid race conditions
          npm run build:components-angular
          npm run build:components-react
          npm run build:components-vue
          
          cd packages/components-angular/dist/@infineon/infineon-design-system-angular
          npm publish --tag canary
          cd ../../../../components-react
          npm publish --tag canary
          cd ../components-vue
          npm publish --tag canary

          echo "WRAPPERS_PUBLISHED=true" >> $GITHUB_OUTPUT 


      # Replace sleep with wrapper package availability check
      - name: Verify wrapper packages availability
        if: steps.build-wrappers.outputs.WRAPPERS_PUBLISHED == 'true'
        run: |
          echo "Verifying wrapper packages availability..."
          
          check_package() {
            local package=$1
            local MAX_RETRIES=10
            local RETRY_COUNT=0
            local DELAY=3
            
            echo "Checking $package@$CANARY_VERSION availability..."
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if npm view "$package@$CANARY_VERSION" version &> /dev/null; then
                echo "✅ $package@$CANARY_VERSION is available"
                return 0
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "⏳ $package not available yet. Retry $RETRY_COUNT of $MAX_RETRIES..."
                sleep $DELAY
                DELAY=$((DELAY + 2))
              fi
            done
            
            echo "❌ $package availability check timed out"
            return 1
          }
          
          check_package "@infineon/infineon-design-system-angular"
          check_package "@infineon/infineon-design-system-react"
          check_package "@infineon/infineon-design-system-vue"
      - name: Update Dependencies in example applications
        if: steps.build.outputs.SKIP_REMAINING == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          CANARY_VERSION: ${{ steps.build.outputs.CANARY_VERSION }}
        run: |
          # Update Vue wrapper component
          cd examples/wrapper-components/vue-javascript
          jq --arg CANARY_VERSION "$CANARY_VERSION" '.dependencies["@infineon/infineon-design-system-vue"] = $CANARY_VERSION' package.json > package.json.tmp && mv package.json.tmp package.json
          cd ../../..
  
          # Update React wrapper component
          cd examples/wrapper-components/react-vite-js
          jq --arg CANARY_VERSION "$CANARY_VERSION" '.dependencies["@infineon/infineon-design-system-react"] = $CANARY_VERSION' package.json > package.json.tmp && mv package.json.tmp package.json
          cd ../../..

      - name: Commit and push all changes
        if: steps.build.outputs.SKIP_REMAINING == 'false'
        env:
          BRANCH_NAME: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git commit -m "Update Stencil library version to $CANARY_VERSION"
          git push origin HEAD:$BRANCH_NAME

  # Separate jobs for each preview deployment
  deploy-preview-vue:
    needs: stencil-library-release  
    if: needs.stencil-library-release.outputs.SKIP_REMAINING == 'false'
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.preview.outputs.deployment-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref_name }}
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
          cache: 'npm'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Modified to use PR-specific build folder
      - name: Install and Build with base path
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          CANARY_VERSION: ${{ needs.stencil-library-release.outputs.CANARY_VERSION }}
          BASE_PATH: /infineon-design-system-stencil/pr-preview-vue-example/pr-${{ github.event.pull_request.number }}
        run: |
          cd examples/wrapper-components/vue-javascript
          rm -rf node_modules dist
          npm install
          
          # Add base path to vite.config.js if it exists
          if [ -f "vite.config.js" ]; then
            echo "Adding base path to vite.config.js"
            sed -i "s/export default defineConfig({/export default defineConfig({\n  base: '\/infineon-design-system-stencil\/pr-preview-vue-example\/pr-$PR_NUMBER\/',/" vite.config.js
          fi
          
          # Create or update index.html with cache busting meta tags
          cat > public/cache-bust.js << EOF
          // Cache buster - ${RANDOM}-${GITHUB_RUN_ID}
          console.log('Cache busted at: $(date)');
          EOF
          
          npm run build
          
          # Add .nojekyll file to prevent GitHub Pages from ignoring underscore files
          touch dist/.nojekyll
          
          # Add meta tags to prevent caching
          sed -i 's/<head>/<head>\n  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">\n  <meta http-equiv="Pragma" content="no-cache">\n  <meta http-equiv="Expires" content="0">/' dist/index.html

      - name: Deploy preview
        id: preview       
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./examples/wrapper-components/vue-javascript/dist
          umbrella-dir: pr-preview-vue-example
          token: ${{ secrets.GH_TOKEN }}

  deploy-preview-react:
    needs: stencil-library-release  
    if: needs.stencil-library-release.outputs.SKIP_REMAINING == 'false'
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.preview.outputs.deployment-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
          cache: 'npm'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Cache for React app node_modules
      - name: Cache React app node modules
        uses: actions/cache@v3
        with:
          path: examples/wrapper-components/react-vite-js/node_modules
          key: ${{ runner.os }}-react-example-${{ needs.stencil-library-release.outputs.CANARY_VERSION }}-${{ hashFiles('examples/wrapper-components/react-vite-js/package.json') }}
          restore-keys: |
            ${{ runner.os }}-react-example-${{ needs.stencil-library-release.outputs.CANARY_VERSION }}-
            ${{ runner.os }}-react-example-

      - name: Install and Build
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          cd examples/wrapper-components/react-vite-js
          rm -rf node_modules
          npm install
          REACT_VERSION=$(jq -r '.dependencies["@infineon/infineon-design-system-react"]' package.json)
          STENCIL_VERSION=$(npm list @infineon/infineon-design-system-stencil --depth=1 | grep @infineon/infineon-design-system-stencil@ | awk -F@ '{print $3}')
          echo "Installed version Stencil: $STENCIL_VERSION - Installed version React: $REACT_VERSION"
          npm run build

      - name: Deploy preview
        uses: rossjrw/pr-preview-action@v1
        id: preview
        with:
          source-dir: ./examples/wrapper-components/react-vite-js/dist
          umbrella-dir: pr-preview-react-example
          token: ${{ secrets.GH_TOKEN }}

  deploy-preview-angular:
    needs: stencil-library-release  
    if: needs.stencil-library-release.outputs.SKIP_REMAINING == 'false'
    outputs:
      deployment-url: ${{ steps.preview.outputs.deployment-url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
          cache: 'npm'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Cache for Angular app node_modules
      - name: Cache Angular app node modules
        uses: actions/cache@v3
        with:
          path: packages/components-angular/node_modules
          key: ${{ runner.os }}-angular-example-${{ needs.stencil-library-release.outputs.CANARY_VERSION }}-${{ hashFiles('packages/components-angular/package.json') }}
          restore-keys: |
            ${{ runner.os }}-angular-example-${{ needs.stencil-library-release.outputs.CANARY_VERSION }}-
            ${{ runner.os }}-angular-example-

      - name: Update package.json with canary version
        run: |
          cd packages/components-angular
          jq --arg CANARY_VERSION "${{ needs.stencil-library-release.outputs.CANARY_VERSION }}" '.dependencies["@infineon/infineon-design-system-angular"] = $CANARY_VERSION' package.json > package.json.tmp && mv package.json.tmp package.json
          cd projects/component-library
          jq --arg CANARY_VERSION "${{ needs.stencil-library-release.outputs.CANARY_VERSION }}" '.peerDependencies["@infineon/infineon-design-system-stencil"] = $CANARY_VERSION' package.json > package.json.tmp && mv package.json.tmp package.json
          
      - name: Install and Build
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          cd packages/components-angular
          npm install
          npm run build my-app

      - name: Deploy preview
        uses: rossjrw/pr-preview-action@v1
        id: preview
        with:
          source-dir: ./packages/components-angular/dist/my-app
          umbrella-dir: pr-preview-angular-example
          token: ${{ secrets.GH_TOKEN }}

  deploy-preview-vanilla:
    needs: stencil-library-release  
    if: needs.stencil-library-release.outputs.SKIP_REMAINING == 'false'
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.preview.outputs.deployment-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
          cache: 'npm'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Cache for Vanilla app node_modules
      - name: Cache Vanilla app node modules
        uses: actions/cache@v3
        with:
          path: examples/stencil-components/vanilla-cdn/node_modules
          key: ${{ runner.os }}-vanilla-example-${{ needs.stencil-library-release.outputs.CANARY_VERSION }}-${{ hashFiles('examples/stencil-components/vanilla-cdn/package.json') }}
          restore-keys: |
            ${{ runner.os }}-vanilla-example-${{ needs.stencil-library-release.outputs.CANARY_VERSION }}-
            ${{ runner.os }}-vanilla-example-

      - name: Update CDN Link in Vanilla example app & build
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: | 
          cd examples/stencil-components/vanilla-cdn
          npm install
          npm run update-link
          npm run build

      - name: Deploy preview
        uses: rossjrw/pr-preview-action@v1
        id: preview
        with:
          source-dir: ./examples/stencil-components/vanilla-cdn/dist
          umbrella-dir: pr-preview-vanilla-example
          token: ${{ secrets.GH_TOKEN }}
  
  update-pr-comment:
    needs: [deploy-preview-vue, deploy-preview-react, deploy-preview-angular, deploy-preview-vanilla]
    runs-on: ubuntu-latest
    steps:
      - name: Update comment in PR
        uses: actions/github-script@v4
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const vueUrl = "${{ needs.deploy-preview-vue.outputs.deployment-url }}";
            const reactUrl = "${{ needs.deploy-preview-react.outputs.deployment-url }}";
            const angularUrl = "${{ needs.deploy-preview-angular.outputs.deployment-url }}";
            const vanillaUrl = "${{ needs.deploy-preview-vanilla.outputs.deployment-url }}";
            const EXAMPLE_APPS_IDENTIFIER = "--EXAMPLE-APPS-PREVIEW--";
            const newText = `--EXAMPLE-APPS-PREVIEW--\nPR Preview URLs:\n- Vue example: ${vueUrl}\n- React example: ${reactUrl}\n- Angular example: ${angularUrl}\n- Vanilla example: ${vanillaUrl}`;
  
            const {data: comments} = await github.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            const appsComment = comments.find(c => c.body.startsWith(EXAMPLE_APPS_IDENTIFIER));

            if (appsComment) {
              await github.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: appsComment.id,
                body: newText
              });
            } else {
              await github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: newText
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}