{"version":3,"file":"static/js/7113.742b6f1d.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/accordion/accordion.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/accordion/accordion.scss?tag=ifx-accordion&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/accordion/accordionItem.scss?tag=ifx-accordion-item&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/accordion/accordionItem.tsx"],"sourcesContent":["//ifxAccordion.tsx\nimport { Component, h, Listen, Element, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-accordion',\n  styleUrl: 'accordion.scss',\n  shadow: true,\n})\nexport class Accordion {\n  @Element() el: HTMLElement;\n  @Prop() autoCollapse: boolean = false;\n\n  @Listen('ifxItemOpen')\n  async onItemOpen(event: CustomEvent) {\n    if(this.autoCollapse) { \n      const items = Array.from(this.el.querySelectorAll('ifx-accordion-item'));\n      for (const item of items) {\n        const itemElement = item as HTMLIfxAccordionItemElement;\n        if (itemElement !== event.target && (await itemElement.isOpen())) {\n          itemElement.close();\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"accordion-wrapper\">\n        <slot />\n      </div>\n    );\n  }\n}\n","// ifxAccordion.scss\n@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n:host {\n  display: block;\n}\n\n.accordion-wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: tokens.$ifxSpace100;\n}","// ifxAccordionItem.scss\n@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n// :host {\n//   display: block;\n// }\n\n.accordion-item {\n  border-radius: 3px;\n  overflow: hidden;\n  transition: all 0.3s;\n}\n\n.accordion-title:hover {\n  border: 1px solid tokens.$ifxColorEngineering200;\n  background-color: tokens.$ifxColorEngineering200;\n}\n\n.accordion-title {\n  display: flex;\n  align-items: center;\n  padding: 1rem;\n  color: tokens.$ifxColorOcean500;\n  border: 1px solid tokens.$ifxColorEngineering200;\n  cursor: pointer;\n}\n\n.accordion-caption {\n  font-weight: tokens.$ifxFontWeightSemibold;\n  font-size: tokens.$ifxFontSizeM;\n}\n\n.accordion-content {\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.3s ease-in-out;\n}\n\n.inner-content {\n  padding: 24px;\n  white-space: pre-wrap;\n  /* wraps text at spaces and within words */\n  word-wrap: break-word;\n  /* breaks text within a word if necessary */\n  overflow-wrap: anywhere;\n  /* breaks text at arbitrary points when needed */\n}\n\n.accordion-icon {\n  font-weight: bold;\n  display: inline-block;\n  transition: transform 0.3s;\n  margin-right: 0.5rem;\n}\n\n.accordion-item.open .accordion-icon {\n  transform: rotate(-180deg);\n}","//ifxAccordionItem\nimport { Component, Prop, h, State, Event, EventEmitter, Method } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-accordion-item',\n  styleUrl: 'accordionItem.scss',\n  shadow: true,\n})\nexport class IfxAccordionItem {\n  @Prop() caption: string;\n  @State() open: boolean = false;\n  @Event() ifxItemOpen: EventEmitter;\n  @Event() ifxItemClose: EventEmitter;\n  private contentEl!: HTMLElement;\n\n  toggleOpen() {\n    this.open = !this.open;\n    if (this.open) {\n      this.ifxItemOpen.emit();\n    } else {\n      this.ifxItemClose.emit();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.open) {\n      this.contentEl.style.maxHeight = `${this.contentEl.scrollHeight}px`;\n    } else {\n      this.contentEl.style.maxHeight = '0';\n    }\n  }\n\n  @Method()\n  async close() {\n    this.open = false;\n    this.ifxItemClose.emit();\n  }\n\n  @Method()\n  async isOpen(): Promise<boolean> {\n    return this.open;\n  }\n\n  render() {\n    return (\n      <div class={`accordion-item ${this.open ? 'open' : ''}`}>\n        <div class=\"accordion-title\" onClick={() => this.toggleOpen()}>\n          <span class=\"accordion-icon\">\n            <ifx-icon icon=\"chevron-down-12\" />\n          </span>\n          <span class=\"accordion-caption\">{this.caption}</span>\n        </div>\n        <div class=\"accordion-content\" ref={(el) => (this.contentEl = el as HTMLElement)}>\n          <div class=\"inner-content\">\n            <slot />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"],"names":["Accordion","_callee","event","items","_i","_items","item","itemElement","_regeneratorRuntime","wrap","_context","prev","next","this","autoCollapse","Array","from","el","querySelectorAll","length","t0","target","isOpen","sent","close","stop","_x","_onItemOpen","apply","arguments","key","value","h","class","get","IfxAccordionItem","open","ifxItemOpen","emit","ifxItemClose","contentEl","style","maxHeight","concat","scrollHeight","_close","_asyncToGenerator","mark","_callee2","_context2","_isOpen","_callee3","_context3","abrupt","_this","onClick","toggleOpen","icon","caption","ref"],"sourceRoot":""}