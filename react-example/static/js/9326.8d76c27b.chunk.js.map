{"version":3,"file":"static/js/9326.8d76c27b.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/select/multi-select/multiselect.scss?tag=ifx-multiselect&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/select/multi-select/multiselect.tsx"],"sourcesContent":["// @import '~choices.js/public/assets/styles/choices.css';\n@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../../global/font.scss\";\n\n.ifx-multiselect-container {\n  background-color: tokens.$ifxColorBaseWhite;\n  position: relative;\n  box-sizing: border-box;\n\n  &.small-select {\n    height: 36px;\n  }\n\n  &.medium-select {\n    height: 40px;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n\n\n  .ifx-label-wrapper {\n    font-size: 16px;\n    line-height: 24px;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    overflow-wrap: anywhere;\n    max-width: 100%;\n  }\n\n  .ifx-error-message-wrapper {\n    color: #CD002F;\n    font-size: 12px;\n    line-height: 16px;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    overflow-wrap: anywhere;\n    max-width: 100%;\n  }\n\n  .ifx-multiselect-wrapper {\n    box-sizing: border-box;\n    position: relative;\n    display: flex;\n    align-items: center;\n    box-shadow: 0 0 0 1px tokens.$ifxColorEngineering400;\n    width: 100%;\n    border-radius: 1px;\n    font-weight: 400;\n    font-style: normal;\n\n\n    &.small-select {\n      height: 36px;\n      line-height: 20px;\n      padding: 8px 12px;\n      font-size: 14px;\n    }\n\n    &.medium-select {\n      height: 40px;\n      line-height: 24px;\n      padding: 8px 16px;\n      font-size: 16px;\n    }\n\n    &:focus-visible {\n      outline: none;\n    }\n\n    &:focus-visible:not(.active):not(:active) {\n      outline: none;\n\n      &::before {\n        content: '';\n        position: absolute;\n        width: calc(100% + 4px);\n        height: calc(100% + 4px);\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        border: 2px solid tokens.$ifxColorOcean500;\n        border-radius: 2px;\n\n      }\n    }\n\n    &.disabled {\n      background: tokens.$ifxColorEngineering200;\n      color: #575352;\n      border-color: #575352;\n      cursor: not-allowed;\n      -webkit-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n    }\n\n    &.error {\n      border-color: #CD002F;\n    }\n\n    &:hover:not(.focus, :focus) {\n      border-color: #8D8786;\n    }\n\n    &.active {\n      box-shadow: 0 0 0 1px #0A8276 !important; // Active border color\n\n      & .icon-wrapper-up {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      & .icon-wrapper-down {\n        display: none\n      }\n    }\n\n\n    & .icon-wrapper-up {\n      display: none;\n    }\n\n    & .icon-wrapper-down {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    &.is-flipped {\n      .ifx-multiselect-dropdown-menu {\n        top: auto;\n        bottom: 100%;\n      }\n    }\n  }\n\n  .ifx-multiselect-input {\n    flex-grow: 1;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    &.placeholder {\n      opacity: 0.5;\n    }\n\n  }\n\n\n  .ifx-multiselect-icon-container {\n    margin-left: auto;\n    align-items: center;\n    display: flex;\n  }\n\n\n  .ifx-clear-button {\n    margin-right: tokens.$ifxSpace100; // Space between clear button and icons\n    display: flex;\n  }\n\n  .ifx-multiselect-dropdown-menu {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    width: 100%;\n    margin-top: 2px;\n    background-color: #fff;\n    box-shadow: 0px 6px 9px 0px rgba(29, 29, 29, 0.10);\n    max-height: 300px;\n    /* Adjust based on your design */\n    overflow-y: auto;\n    z-index: var(--dynamic-z-index, 1); // Fallback to 1\n\n    .search-input {\n      // position: sticky;\n      // top: 0;\n      // z-index: 2;\n      width: 100%;\n      padding: 8px 16px;\n      font-size: 16px;\n      font-style: normal;\n      font-weight: 400;\n      box-sizing: border-box;\n      background-color: tokens.$ifxColorBaseWhite;\n      border: none;\n      border-bottom: 2px solid #ccc;\n\n      &:focus {\n        outline: none;\n        border: 1px solid tokens.$ifxColorOcean500;\n      }\n\n      // Optional: Placeholder style\n      &::placeholder {\n        color: #999;\n      }\n    }\n  }\n\n  .option {\n    position: relative;\n    padding: 8px 16px;\n    gap: 8px;\n    align-items: center;\n    display: flex;\n    font-style: normal;\n    font-weight: 400;\n\n    &.small-select {\n      line-height: 20px;\n      font-size: 14px;\n    }\n\n    &.medium-select {\n      line-height: 24px;\n      font-size: 16px;\n    }\n\n    &:hover {\n      background-color: tokens.$ifxColorEngineering200;\n    }\n\n    &:focus {\n      background-color: tokens.$ifxColorEngineering300;\n      outline: none;\n    }\n\n    &.is-highlighted {\n      background-color: tokens.$ifxColorEngineering200;\n      ;\n    }\n\n    &.selected {\n      // color: #0A8276;\n    }\n\n    &.sub-option {\n      padding-left: 30px;\n      /* or however much indentation you want */\n    }\n  }\n\n\n\n}","import { Component, Prop, State, Event, EventEmitter, Element, h, Watch } from '@stencil/core';\nimport { Option } from './interfaces';\n\n@Component({\n  tag: 'ifx-multiselect',\n  styleUrl: 'multiselect.scss',\n  shadow: true\n})\n\n\nexport class Multiselect {\n\n  @Prop() options: any[] | string;\n  @Prop() batchSize: number = 50;\n  @Prop() size: string = 'medium (40px)';\n  @Prop() disabled: boolean = false;\n  @Prop() error: boolean = false;\n  @State() internalError: boolean = false;\n  @Prop() errorMessage: string = \"Error\";\n  @Prop() label: string = \"\";\n  @State() persistentSelectedOptions: Option[] = [];\n  @Prop() placeholder: string = \"\";\n  @State() listOfOptions: Option[] = [];\n  @State() dropdownOpen = false;\n  @State() dropdownFlipped: boolean;\n  @Prop() maxItemCount: number;\n  @State() zIndex: number = 1; // default z-index value\n  static globalZIndex = 1; // This will be shared among all instances of the component.\n  private currentIndex: number = 0; //needed for option selection using keyboard\n  @State() isLoading: boolean = false;\n  @State() loadedOptions: Option[] = [];\n  @State() filteredOptions: Option[] = [];\n\n\n\n  @Event() ifxSelect: EventEmitter;\n  @Event() ifxMultiselectIsOpen: EventEmitter;\n\n  @Element() el: HTMLElement;\n  dropdownElement!: HTMLElement;\n\n\n  async loadInitialOptions() {\n    this.isLoading = true;\n    this.internalError = this.error;\n    // Load the first batch of options (e.g., first 20)\n    this.loadedOptions = await this.fetchOptions(0, this.batchSize);\n    this.isLoading = false;\n  }\n\n  async fetchMoreOptions() {\n    this.isLoading = true;\n    const moreOptions = await this.fetchOptions(this.loadedOptions.length, this.batchSize);\n    this.loadedOptions = [...this.loadedOptions, ...moreOptions];\n    this.isLoading = false;\n  }\n\n\n  handleScroll(event: UIEvent) {\n    const element = event.target as HTMLElement;\n    const halfwayPoint = Math.floor((element.scrollHeight - element.clientHeight) / 2); //loading more options when the user has scrolled halfway through the current list\n\n    if (element.scrollTop >= halfwayPoint) {\n      this.fetchMoreOptions();\n    }\n  }\n\n\n\n\n  async fetchOptions(startIndex: number, count: number): Promise<Option[]> {\n    let allOptions: Option[] = [];\n\n    // Parse options if it's a string, or use directly if it's an array\n    if (typeof this.options === 'string') {\n      try {\n        allOptions = JSON.parse(this.options);\n      } catch (err) {\n        console.error('Failed to parse options:', err);\n      }\n    } else if (Array.isArray(this.options)) {\n      allOptions = this.options;\n    } else {\n      console.error('Unexpected value for options:', this.options);\n    }\n\n    // Slice the options array based on startIndex and count\n    const slicedOptions = allOptions.slice(startIndex, startIndex + count);\n\n    // Update the state for initially selected options, if needed\n    if (startIndex === 0) { // Assuming you want to do this only for the first batch\n      const initiallySelected = slicedOptions.filter(option => option.selected);\n      this.persistentSelectedOptions = [...this.persistentSelectedOptions, ...initiallySelected];\n    }\n\n    return slicedOptions;\n  }\n\n  handleSearch(event: Event) {\n    const searchTerm = (event.target as HTMLInputElement).value.toLowerCase();\n    if (searchTerm === '') {\n      this.filteredOptions = this.loadedOptions;\n    } else {\n      this.filteredOptions = this.loadedOptions.filter(option => option.label.toLowerCase().includes(searchTerm))\n    }\n  }\n\n  componentDidLoad() {\n    setTimeout(() => {\n      this.positionDropdown();\n    }, 500);\n\n    // setInterval(this.handleScroll, 5000); // Runs every 5 seconds (5000 milliseconds)\n\n\n  }\n\n\n  componentWillLoad() {\n    console.log('MULTI SELECT LOADED')\n    this.loadInitialOptions();\n    this.filteredOptions = [...this.loadedOptions];\n  }\n\n  @Watch('error')\n  updateInternalError() {\n    this.internalError = this.error;\n  }\n\n  @Watch('loadedOptions')\n  loadedOptionsChanged() {\n    this.filteredOptions = [...this.loadedOptions];\n  }\n\n\n  handleOptionClick(option: Option) {\n    this.internalError = false; //reset potential previous errors\n    // 1. Prevent action if disabled\n    //check if newly selected option has children => if not, count it as 1, otherwise count the # of children\n    let newOptionsLength = option.children ? option.children.length : 1;\n    if (this.maxItemCount && this.persistentSelectedOptions.length + newOptionsLength > this.maxItemCount && !this.persistentSelectedOptions.some(selectedOption => selectedOption.value === option.value)) {\n      console.error('Max item count reached');\n      this.internalError = true;\n      this.errorMessage = \"Please consider the maximum number of items to choose from\";\n      return;\n    }\n\n    // 2. Determine if the current option was previously selected\n    const wasSelected = this.persistentSelectedOptions.some(selectedOption => selectedOption.value === option.value);\n\n    // 3. Handle parent-child relationships\n    if (option.children && option.children.length > 0) {\n      if (wasSelected) {\n        this.persistentSelectedOptions = this.persistentSelectedOptions.filter(selectedOption => selectedOption.value !== option.value && !option.children.some(child => child.value === selectedOption.value));\n      } else {\n        this.persistentSelectedOptions = [...this.persistentSelectedOptions, option, ...option.children];\n      }\n    } else {\n      if (wasSelected) {\n        this.persistentSelectedOptions = this.persistentSelectedOptions.filter(selectedOption => selectedOption.value !== option.value);\n      } else {\n        this.persistentSelectedOptions.push(option);\n      }\n\n      const parentOption = this.listOfOptions.find(opt => opt.children && opt.children.some(child => child.value === option.value));\n\n      if (parentOption) {\n        const allChildrenSelected = parentOption.children.every(child => this.persistentSelectedOptions.some(selectedOption => selectedOption.value === child.value));\n        const someChildrenSelected = parentOption.children.some(child => this.persistentSelectedOptions.some(selectedOption => selectedOption.value === child.value));\n\n        if (allChildrenSelected) {\n          if (!this.persistentSelectedOptions.some(selectedOption => selectedOption.value === parentOption.value)) {\n            this.persistentSelectedOptions.push(parentOption);\n          }\n        } else if (someChildrenSelected) {\n          this.persistentSelectedOptions = this.persistentSelectedOptions.filter(selectedOption => selectedOption.value !== parentOption.value);\n        } else {\n          this.persistentSelectedOptions = this.persistentSelectedOptions.filter(selectedOption => selectedOption.value !== parentOption.value);\n        }\n      }\n    }\n\n    // 4. Reflect changes in the listOfOptions state\n    this.listOfOptions = this.listOfOptions.map(opt => {\n      if (opt.value === option.value) {\n        return { ...opt, selected: !wasSelected };\n      } else if (opt.children) {\n        const isParentSelected = this.persistentSelectedOptions.includes(opt);\n        opt.children = opt.children.map(child => {\n          if (child.value === option.value || isParentSelected) {\n            return { ...child, selected: true };\n          }\n          return child;\n        });\n        return { ...opt, children: opt.children };\n      }\n      return opt;\n    });\n\n    // 5. Update the selected status in persistentSelectedOptions\n    this.persistentSelectedOptions = this.persistentSelectedOptions.map(pOpt => {\n      const matchingOption = this.listOfOptions.find(loOpt => loOpt.value === pOpt.value) || this.listOfOptions.flatMap(loOpt => loOpt.children || []).find(child => child.value === pOpt.value);\n      if (matchingOption) {\n        return { ...pOpt, selected: matchingOption.selected };\n      }\n      return pOpt;\n    });\n\n    // 6. Emit persistentSelectedOptions without duplicated children\n    const emittedOptions = this.persistentSelectedOptions.map(pOpt => {\n      // If this option is a child, check if its parent is in persistentSelectedOptions\n      const parent = this.listOfOptions.find(loOpt => loOpt.children && loOpt.children.some(child => child.value === pOpt.value));\n      if (parent && this.persistentSelectedOptions.some(selectedOption => selectedOption.value === parent.value)) {\n        // If it's a child and its parent is also selected, ensure it's set to selected: true\n        return { ...pOpt, selected: true };\n      }\n      return pOpt;\n    }).filter(pOpt => {\n      // After ensuring the children are selected, now filter out the children whose parents are also in the persistentSelectedOptions\n      const parent = this.listOfOptions.find(loOpt => loOpt.children && loOpt.children.some(child => child.value === pOpt.value));\n      if (parent && this.persistentSelectedOptions.some(selectedOption => selectedOption.value === parent.value)) {\n        return false;  // Exclude this child since its parent is already selected\n      }\n      return true;\n    });\n    this.ifxSelect.emit(emittedOptions);\n  }\n\n  handleDocumentClick = (event: Event) => {\n    const path = event.composedPath();\n    if (!path.includes(this.dropdownElement)) {\n      this.dropdownOpen = false;\n      document.removeEventListener('click', this.handleDocumentClick);\n\n      // Dispatch the ifxMultiselectIsOpen event\n      this.ifxMultiselectIsOpen.emit(this.dropdownOpen);\n    }\n  }\n\n  getSizeClass() {\n    return `${this.size}` === \"s\"\n      ? \"small-select\"\n      : \"medium-select\";\n  }\n\n  toggleDropdown() {\n    this.dropdownOpen = !this.dropdownOpen;\n    setTimeout(() => {\n      if (this.dropdownOpen) {\n        document.addEventListener('click', this.handleDocumentClick);\n      }\n      // Dispatch the ifxMultiselectIsOpen event\n      this.ifxMultiselectIsOpen.emit(this.dropdownOpen);\n    }, 0);\n    this.zIndex = Multiselect.globalZIndex++;\n  }\n\n\n  waitForElement(querySelectorFunc: Function, callback: Function, maxTries = 50) {\n    let tries = 0;\n    function request() {\n      requestAnimationFrame(() => {\n        const elements = querySelectorFunc();\n        if (elements.length > 0 || tries > maxTries) {\n          callback(elements);\n        } else {\n          tries++;\n          request();\n        }\n      });\n    }\n    request();\n  }\n\n\n  handleKeyDown(event: KeyboardEvent) {\n    if (this.disabled) return; // If it's disabled, don't do anything.\n\n    const options = this.dropdownElement.querySelectorAll('.option');\n\n    switch (event.code) {\n      case 'Enter' || 'Space':\n        if (this.dropdownOpen) {\n          this.selectItem(options);\n        } else {\n          this.toggleDropdown();\n          // Wait a bit for the dropdown to finish rendering\n          this.waitForElement(() => {\n            return this.dropdownElement.querySelectorAll('.option');\n          }, (options) => {\n            this.updateHighlightedOption(options);\n          });\n        }\n        break;\n      case 'ArrowDown':\n        this.handleArrowDown(options);\n        if (this.dropdownOpen) {\n          this.updateHighlightedOption(options);\n        }\n        break;\n      case 'ArrowUp':\n        this.handleArrowUp(options);\n        if (this.dropdownOpen) {\n          this.updateHighlightedOption(options);\n        }\n        break;\n    }\n  }\n\n  handleWrapperClick(event: MouseEvent) {\n    // This is your existing logic for positioning the dropdown\n    this.positionDropdown();\n\n    // Check if the event target is the wrapper itself and not a child element.\n    if (event.currentTarget === event.target) {\n      this.toggleDropdown();\n    }\n  }\n\n  clearSelection() {\n    this.persistentSelectedOptions = [];\n    this.listOfOptions = this.listOfOptions.map(option => ({ ...option, selected: false }));\n    this.ifxSelect.emit(this.persistentSelectedOptions); // if you want to emit empty selection after clearing\n  }\n\n  positionDropdown() {\n    const wrapperRect = this.el.shadowRoot.querySelector('.ifx-multiselect-wrapper')?.getBoundingClientRect();\n    const spaceBelow = window.innerHeight - wrapperRect.bottom;\n    const spaceAbove = wrapperRect.top;\n\n    // If there's more space above than below the trigger and the dropdown doesn't fit below\n    if ((spaceAbove > spaceBelow && wrapperRect.height > spaceBelow) || (wrapperRect.bottom > window.innerHeight)) {\n      this.dropdownFlipped = true;\n    } else {\n      this.dropdownFlipped = false;\n    }\n  }\n\n\n\n  // Helper function to update highlighted option based on currentIndex\n  private updateHighlightedOption(options: NodeList) {\n    // Clear all highlights\n    options.forEach((option: Element) => option.classList.remove('is-highlighted'));\n\n    // Apply highlight to the current option\n    if (this.currentIndex >= 0 && this.currentIndex < options.length) {\n      (options[this.currentIndex] as Element).classList.add('is-highlighted');\n    }\n  }\n\n  // Helper function to handle arrow down navigation\n  private handleArrowDown(options: NodeList) {\n    if (this.currentIndex < options.length - 1) {\n      this.currentIndex++;\n    } else {\n      this.currentIndex = 0; // Wrap to the beginning.\n    }\n  }\n\n  // Helper function to handle arrow up navigation\n  private handleArrowUp(options: NodeList) {\n    if (this.currentIndex > 0) {\n      this.currentIndex--;\n    } else {\n      this.currentIndex = options.length - 1; // Wrap to the end.\n    }\n  }\n\n  private selectItem(options: NodeList) {\n    // If there's a previous selection, remove its \"selected\" class\n    const previouslySelected = this.dropdownElement.querySelector('.option.selected');\n    if (previouslySelected) {\n      previouslySelected.classList.remove('selected');\n    }\n\n    // Mark the current item as selected\n    const currentOptionElement = options[this.currentIndex] as Element;\n    currentOptionElement.classList.add('selected');\n\n    const currentOptionValue = currentOptionElement.getAttribute('data-value');\n    const currentListOfOptions = typeof this.options === 'string' //passed in string form via storybook\n      ? JSON.parse(this.options).map((option) => ({ value: option.value, label: option.label, children: option.children, selected: option.selected })) // added selected\n      : this.options.map(option => ({ ...option }));\n\n    const currentOption = this.findInOptions(currentListOfOptions, currentOptionValue); // get the option object based on the currently selected value and the options array\n    this.handleOptionClick(currentOption);\n  }\n\n\n  renderOption(option: Option, index: number) {\n    const isSelected = this.persistentSelectedOptions.some(selectedOption => selectedOption.value === option.value);\n    const disableCheckbox = !isSelected && this.maxItemCount && this.persistentSelectedOptions.length >= this.maxItemCount;\n    const uniqueId = `checkbox-${option.value}-${index}`; // Generate a unique ID using the index\n    const isIndeterminate = this.isOptionIndeterminate(option);\n\n    return (\n      <div>\n        <div class={`option ${isSelected ? 'selected' : ''} \n        ${this.getSizeClass()}`}\n          data-value={option.value}\n          onClick={() => !disableCheckbox && this.handleOptionClick(option)}\n          tabindex=\"0\"\n          role={`${option.children?.length > 0 ? \"treeitem\" : \"option\"}`}\n        >\n          <ifx-checkbox id={uniqueId} size=\"s\" value={isSelected} indeterminate={isIndeterminate} disabled={disableCheckbox}></ifx-checkbox>\n          <label htmlFor={uniqueId}>{option.label}</label>\n        </div>\n        {option.children && option.children.map((child, childIndex) => this.renderSubOption(child, `${index}-${childIndex}`))}\n      </div>\n    );\n  }\n\n\n  isOptionIndeterminate(option: Option): boolean {\n    if (!option.children) return false;\n\n    const selectedChildren = option.children.filter(child =>\n      this.persistentSelectedOptions.some(persistentOption => persistentOption.value === child.value)\n    ).length;\n\n    return selectedChildren > 0 && selectedChildren < option.children.length;\n  }\n\n\n  findInOptions(options: Option[], searchTerm: string): Option | null {\n    for (const option of options) {\n      if (option.value === searchTerm) {\n        return option;\n      }\n      if (option.children) {\n        const foundInChildren = this.findInOptions(option.children, searchTerm);\n        if (foundInChildren) {\n          return foundInChildren;\n        }\n      }\n    }\n    return null;\n  }\n\n\n  renderSubOption(option: Option, index: string) {\n    const isSelected = this.persistentSelectedOptions.some(selectedOption => selectedOption.value === option.value);\n    const disableCheckbox = !isSelected && this.maxItemCount && this.persistentSelectedOptions.length >= this.maxItemCount;\n    const uniqueId = `checkbox-${option.value}-${index}`;\n\n    return (\n      <div class={`option sub-option ${isSelected ? 'selected' : ''} ${this.getSizeClass()}`}\n        data-value={option.value}\n        role={`${option.children?.length > 0 ? \"option\" : \"treeitem\"}`}\n        onClick={() => !disableCheckbox && this.handleOptionClick(option)}\n        tabindex=\"0\">\n        <ifx-checkbox id={uniqueId} size=\"s\" value={isSelected} disabled={disableCheckbox}></ifx-checkbox>\n        <label htmlFor={uniqueId}>{option.label}</label>\n      </div>\n    );\n  }\n\n  render() {\n    // Create a label for the selected options\n    const selectedOptionsLabels = this.persistentSelectedOptions.map(option => option.label).join(', ');\n\n    return (\n      <div class={`ifx-multiselect-container`} ref={el => this.dropdownElement = el as HTMLElement}>\n        {\n          this.label ?\n            <div class=\"ifx-label-wrapper\">\n              <span>{this.label}</span>\n            </div> : null\n        }\n        <div class={`ifx-multiselect-wrapper \n        ${this.getSizeClass()} \n        ${this.dropdownOpen ? 'active' : ''} \n        ${this.dropdownFlipped ? 'is-flipped' : ''}\n        ${this.internalError ? 'error' : \"\"}\n        ${this.disabled ? 'disabled' : \"\"}`}\n          tabindex=\"0\"\n          onClick={(event) => this.handleWrapperClick(event)}\n          onKeyDown={(event) => this.handleKeyDown(event)} >\n          <div class={`ifx-multiselect-input \n          ${this.persistentSelectedOptions.length === 0 ? 'placeholder' : \"\"}\n          `}\n            onClick={this.disabled ? undefined : () => this.toggleDropdown()}\n          >\n            {this.persistentSelectedOptions.length > 0 ? selectedOptionsLabels : this.placeholder}\n          </div>\n          {this.dropdownOpen && (\n            <div class=\"ifx-multiselect-dropdown-menu\"\n              onScroll={(event) => this.handleScroll(event)}\n              style={{ '--dynamic-z-index': this.zIndex.toString() }}>\n              <input type=\"text\" role=\"textbox\" class=\"search-input\" onInput={(event) => this.handleSearch(event)} placeholder=\"Search...\"></input>\n              {this.filteredOptions.map((option, index) => this.renderOption(option, index))}\n              {this.isLoading && <div>Loading more options...</div>}\n            </div>\n          )}\n          <div class=\"ifx-multiselect-icon-container\">\n\n            {/* Clear Button - will show only if there's a selection */}\n            {this.persistentSelectedOptions.length > 0 && (\n              <div class=\"ifx-clear-button\" onClick={() => this.clearSelection()}>\n                <ifx-icon icon=\"cremove24\"></ifx-icon>\n              </div>\n            )}\n            <div class=\"icon-wrapper-up\" onClick={this.disabled ? undefined : () => this.toggleDropdown()}>\n              <ifx-icon\n                key='icon-up'\n                icon='chevronup-16'></ifx-icon>\n            </div>\n            <div class=\"icon-wrapper-down\" onClick={this.disabled ? undefined : () => this.toggleDropdown()}>\n              <ifx-icon\n                key='icon-down'\n                icon='chevron-down-16'></ifx-icon>\n            </div>\n          </div>\n\n        </div>\n        {\n          this.internalError ?\n            <div class=\"ifx-error-message-wrapper\">\n              <span>{this.errorMessage}</span>\n            </div> : null\n        }\n      </div>\n    );\n  }\n\n}\n"],"names":["Multiselect","currentIndex","handleDocumentClick","event","composedPath","includes","this","dropdownElement","dropdownOpen","document","removeEventListener","ifxMultiselectIsOpen","emit","loadInitialOptions","isLoading","internalError","error","loadedOptions","fetchOptions","batchSize","fetchMoreOptions","moreOptions","length","handleScroll","element","target","halfwayPoint","Math","floor","scrollHeight","clientHeight","scrollTop","startIndex","count","allOptions","options","JSON","parse","err","console","Array","isArray","slicedOptions","slice","initiallySelected","filter","option","selected","persistentSelectedOptions","handleSearch","searchTerm","value","toLowerCase","filteredOptions","label","componentDidLoad","setTimeout","positionDropdown","componentWillLoad","log","updateInternalError","loadedOptionsChanged","handleOptionClick","newOptionsLength","children","maxItemCount","some","selectedOption","errorMessage","wasSelected","child","push","parentOption","listOfOptions","find","opt","allChildrenSelected","every","map","Object","assign","isParentSelected","pOpt","matchingOption","loOpt","flatMap","emittedOptions","parent","ifxSelect","getSizeClass","concat","size","toggleDropdown","addEventListener","zIndex","globalZIndex","waitForElement","querySelectorFunc","callback","maxTries","arguments","undefined","tries","request","requestAnimationFrame","elements","handleKeyDown","disabled","querySelectorAll","code","selectItem","updateHighlightedOption","handleArrowDown","handleArrowUp","handleWrapperClick","currentTarget","clearSelection","wrapperRect","_a","el","shadowRoot","querySelector","getBoundingClientRect","spaceBelow","window","innerHeight","bottom","top","height","dropdownFlipped","forEach","classList","remove","add","previouslySelected","currentOptionElement","currentOptionValue","getAttribute","currentListOfOptions","currentOption","findInOptions","renderOption","index","isSelected","disableCheckbox","uniqueId","isIndeterminate","isOptionIndeterminate","h","class","onClick","tabindex","role","id","indeterminate","htmlFor","childIndex","renderSubOption","selectedChildren","persistentOption","foundInChildren","render","selectedOptionsLabels","join","ref","onKeyDown","placeholder","onScroll","style","toString","type","onInput","icon","key"],"sourceRoot":""}