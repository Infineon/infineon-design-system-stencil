{"version":3,"file":"static/js/524.1f2ff180.chunk.js","mappings":"4KAAA,MCQaA,EAAqB,M,8CAEJ,G,cACD,E,oEAK3BC,cAAAA,CAAeC,EAASC,EAASC,EAAOC,GAClCH,GAAW,GACbI,KAAKC,UAAY,WACRJ,GAAW,GACpBG,KAAKC,UAAY,GAAGJ,aACXC,GAAS,GAClBE,KAAKC,UAAYH,EAAQ,EAAI,GAAGA,YAAkB,GAAGA,aAC5CC,IACTC,KAAKC,UAAYH,EAAQ,GAAK,YAAc,GAAGC,aAC3CD,EAAQ,MACVE,KAAKC,UAAY,IAAG,IAAIC,MAAOC,aAAY,IAAID,MAAOE,eAAc,IAAIF,MAAOG,iB,CAKrFC,YAAAA,CAAaC,GACX,IAAKA,EAAY,OAAO,KACxB,IAAIC,EAAYD,EAAWE,MAAM,KACjC,GAAID,EAAU,IACRA,EAAU,GAAGC,MAAM,KAAK,GAAI,CAC9B,IAAIC,EAAYF,EAAU,GAAGC,MAAM,KAAK,GAAGA,MAAM,KAEjD,OADAD,EAAU,GAAKA,EAAU,GAAGC,MAAM,KAAK,GAChC,IAAIP,MAAMM,EAAU,GAAIA,EAAU,GAAK,GAAIA,EAAU,GAAIE,EAAU,GAAIA,EAAU,GAAIA,EAAU,G,EAK5GC,cAAAA,CAAeC,GACb,IAAIC,EAAOb,KAAKM,aAAaM,GAC7B,GAAIC,EAAM,CACR,IAAIC,EAAcZ,KAAKa,MAAQF,EAAKG,UAChCpB,EAAUqB,KAAKC,MAAMJ,EAAc,KACnCjB,EAAUoB,KAAKC,MAAMJ,EAAc,KACnChB,EAAQmB,KAAKC,MAAMrB,EAAU,IAC7BE,EAAOkB,KAAKC,MAAMpB,EAAQ,IAC9BE,KAAKL,eAAeC,EAASC,EAASC,EAAOC,E,EAIjDoB,eAAAA,CAAgBP,GACdZ,KAAKoB,SAAWC,OAAOC,aAAY,KACjCtB,KAAKW,eAAeC,EAAK,GACxB,I,CAGLW,iBAAAA,GACEvB,KAAKW,eAAeX,KAAKwB,cACzBxB,KAAKmB,gBAAgBnB,KAAKwB,cACLxB,KAAKyB,GAAGC,QAAQ,kBACpBC,MACf3B,KAAK4B,SAAU,EACV5B,KAAK4B,SAAU,C,CAGxBC,oBAAAA,GACER,OAAOS,cAAc9B,KAAKoB,S,CAG5BW,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAO,4BAA2BlC,KAAK4B,QAAU,QAAU,MAC9DI,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,qBACTF,EAAAA,EAAAA,GAAA,MAAAC,IAAA,2CAAIC,MAAM,0BAA0BlC,KAAKmC,YACzCH,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,yBAAyBlC,KAAKC,aAE3C+B,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,yBACTF,EAAAA,EAAAA,GAAA,QAAAC,IAAA,8C,wCDlFuB,48B","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/list-group/list-group-notification.scss?tag=ifx-list-notification&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/list-group/list-group-notification.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n\n.list-group-notification {\n  width: 350px;\n  height: 88px;\n  padding: 16px;\n  margin-bottom: 8px;\n  background-color: tokens.$ifxColorBaseWhite;\n  border: 1px solid tokens.$ifxColorEngineering200;\n  font-family: var(--ifx-font-family);\n\n  & .description__section {\n    display: -webkit-box;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  &.flush {\n    border: none;\n    border-bottom: 1px solid tokens.$ifxColorEngineering200;\n  }\n\n  & .heading__section {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 8px;\n    color: tokens.$ifxColorOcean500;\n  }\n\n  & .heading__section-title {\n    flex: 1;\n    margin: 0;\n    font-weight: tokens.$ifxFontWeightSemibold;\n    line-height: 1.2;\n    font-size: tokens.$ifxFontSizeM;\n\n    display: -webkit-box;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  & .heading__section-time {\n    flex: none;\n    margin-left: 2px;\n    font-size: tokens.$ifxFontSizeS;\n    line-height: tokens.$ifxLineHeightS;\n    font-weight: 400;\n\n    display: -webkit-box;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}","import { Component, h, Element, Prop, State } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-list-notification',\n  styleUrl: 'list-group-notification.scss',\n  shadow: true,\n})\n\nexport class ListGroupNotification {\n  @Element() el;\n  @Prop() titleText: string = \"\"\n  @Prop() isFlush: boolean = false;\n  @Prop() creationTime: any;\n  @State() postTime: number;\n  @State() shownTime: string;\n\n  setDisplayTime(seconds, minutes, hours, days) {\n    if (seconds <= 60) {\n      this.shownTime = `Just now`\n    } else if (minutes <= 60) {\n      this.shownTime = `${minutes} min. ago`\n    } else if (hours <= 24) {\n      this.shownTime = hours > 1 ? `${hours} hr. ago` : `${hours} hrs. ago`\n    } else if (days) {\n      this.shownTime = hours < 48 ? `1 day ago` : `${days} days ago`\n      if (hours > 168) {\n        this.shownTime = `${new Date().getDay()}.${new Date().getMonth()}.${new Date().getFullYear()}`\n      }\n    }\n  }\n\n  stringToDate(dataString) {\n    if (!dataString) return null\n    let dateParts = dataString.split(\"/\");\n    if (dateParts[2]) {\n      if (dateParts[2].split(\" \")[1]) {\n        let timeParts = dateParts[2].split(\" \")[1].split(\":\");\n        dateParts[2] = dateParts[2].split(\" \")[0];\n        return new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0], timeParts[0], timeParts[1], timeParts[2]);\n      }\n    }\n  }\n\n  getElapsedTime(time) {\n    let date = this.stringToDate(time)\n    if (date) {\n      let miliseconds = Date.now() - date.getTime()\n      let seconds = Math.floor(miliseconds / 1000);\n      let minutes = Math.floor(miliseconds / 60000);\n      let hours = Math.floor(minutes / 60);\n      let days = Math.floor(hours / 24);\n      this.setDisplayTime(seconds, minutes, hours, days)\n    }\n  }\n\n  setTimeInterval(time) {\n    this.postTime = window.setInterval(() => {\n      this.getElapsedTime(time)\n    }, 1000)\n  };\n\n  componentWillLoad() {\n    this.getElapsedTime(this.creationTime)\n    this.setTimeInterval(this.creationTime) //if time update on refresh, delete this & clear interval\n    const ifxListGroup = this.el.closest('ifx-list-group')\n    if (ifxListGroup.flush) {\n      this.isFlush = true;\n    } else this.isFlush = false;\n  }\n\n  disconnectedCallback() {\n    window.clearInterval(this.postTime);\n  }\n\n  render() {\n    return (\n      <div class={`list-group-notification ${this.isFlush ? 'flush' : \"\"}`}>\n        <div class=\"heading__section\">\n          <h6 class=\"heading__section-title\">{this.titleText}</h6>\n          <div class=\"heading__section-time\">{this.shownTime}</div>\n        </div>\n        <div class=\"description__section\">\n          <slot />\n        </div>\n      </div>\n    );\n  }\n}\n"],"names":["ListGroupNotification","setDisplayTime","seconds","minutes","hours","days","this","shownTime","Date","getDay","getMonth","getFullYear","stringToDate","dataString","dateParts","split","timeParts","getElapsedTime","time","date","miliseconds","now","getTime","Math","floor","setTimeInterval","postTime","window","setInterval","componentWillLoad","creationTime","el","closest","flush","isFlush","disconnectedCallback","clearInterval","render","h","key","class","titleText"],"sourceRoot":""}