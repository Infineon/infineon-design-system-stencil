{"version":3,"file":"static/js/2374.d6d73d55.chunk.js","mappings":"6KAAA,MCUaA,EAAM,M,+OACQ,E,UACF,G,eACK,E,oBACM,C,CAQlCC,iBAAAA,GACEC,KAAKC,cAAgBD,KAAKE,K,CAI5BC,cAAAA,GACE,MAAMC,EAAOJ,KAAKK,GAAGC,WAAWC,cAAc,QACxCC,EAAYR,KAAKK,GAAGC,WAAWC,cAAc,cAC/CH,EAAKK,gBAAgBC,OACvBF,EAAUG,UAAUC,IAAI,OAExBJ,EAAUG,UAAUE,OAAO,M,CAI/BC,gBAAAA,GACEd,KAAKG,kBACLY,EAAAA,EAAAA,GAAmB,S,CAKrBC,YAAAA,CAAaC,EAAmBC,GAC1BD,IAAaC,IACflB,KAAKC,cAAgBgB,E,CAIzBE,YAAAA,GACMnB,KAAKoB,WACTpB,KAAKC,eAAiBD,KAAKC,cAC3BD,KAAKqB,UAAUC,aAAatB,KAAKC,cAAgB,KAAO,MACxDD,KAAKuB,UAAUC,KAAKxB,KAAKC,e,CAG3BwB,aAAAA,CAAcC,GACR1B,KAAKoB,UAES,UAAdM,EAAMC,KAAiC,MAAdD,EAAMC,KACjC3B,KAAKmB,c,CAQTS,iBAAAA,GACE5B,KAAKqB,UAAUC,aAAa,K,CAG9BO,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,OAAAH,IAAA,2CACEI,MAAM,YACNC,KAAK,SAAQ,eACChC,KAAKC,cAAgB,OAAS,QAAO,aACvCD,KAAKiC,KACjBC,QAASA,IAAMlC,KAAKmB,eACpBgB,UAAYT,GAAU1B,KAAKyB,cAAcC,KAGzCI,EAAAA,EAAAA,GAAA,OAAAH,IAAA,2CACEI,MAAO,8BAA8B/B,KAAKC,cAAgB,UAAY,MAAMD,KAAKoB,SAAW,WAAa,KACzGgB,SAAS,MAETN,EAAAA,EAAAA,GAAA,OAAAH,IAAA,2CAAKI,MAAM,6BACTD,EAAAA,EAAAA,GAAA,SAAAH,IAAA,2CAAOU,KAAK,WAAWC,QAAM,EAC3BL,KAAMjC,KAAKiC,KACXb,SAAUpB,KAAKoB,SACflB,MAAO,GAAGF,KAAKC,mBACjB6B,EAAAA,EAAAA,GAAA,OAAAH,IAAA,2CAAKI,MAAO,UAAU/B,KAAKC,cAAgB,UAAY,MAAMD,KAAKoB,SAAW,WAAa,UAK9FU,EAAAA,EAAAA,GAAA,OAAAH,IAAA,2CAAKI,MAAO,0BAAyB/B,KAAKoB,SAAW,WAAa,MAChEU,EAAAA,EAAAA,GAAA,SAAAH,IAAA,2CAAOY,QAAQ,WACbT,EAAAA,EAAAA,GAAA,QAAAH,IAAA,2CAAMa,aAAcA,IAAMxC,KAAKG,qB,kIDpGzB,+hD,kCEClB,MAAMsC,EAA2B,G,SAgBjB1B,EAAmB2B,GAC5BD,EAAeE,SAASD,IAC3BD,EAAeG,KAAKF,EAExB,CAIAG,aArBA,WACE,GAAIJ,EAAe/B,OAAS,EAAG,CAC7B,MAAMoC,EAAmB,IAAIL,GAC7BA,EAAe/B,OAAS,EAEpBqC,OAAOC,KACTD,OAAOC,KAAKJ,KAAK,CAAC,aAAc,YAAa,OAAQE,EAAiBG,KAAK,QAE3EC,QAAQC,MAAM,mC,CAGpB,GAbuB,I","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/switch/switch.scss?tag=ifx-switch&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/switch/switch.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/global/utils/tracking.ts"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n/* switch.css */\n:host {\n  display: inline-block;\n  user-select: none;\n}\n\n.container {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  &.gap {\n    gap: tokens.$ifxSpace200;\n  }\n}\n\n\n.switch__checkbox-container {\n  padding: tokens.$ifxSpace50;\n  display: flex;\n  align-items: center;\n  position: relative;\n  // Subtracting padding size from both height and width\n  width: (tokens.$ifxSpace500)-8px;\n  height: 16px;\n  background-color: tokens.$ifxColorBaseWhite;\n  border: 1px solid tokens.$ifxColorEngineering500;\n  border-radius: 20px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  outline: none;\n\n  &:focus {\n    outline: 4px solid tokens.$ifxColorOcean500;\n    outline-offset: 2px;\n  }\n\n  &:focus:not(:focus-visible) {\n    outline: none;\n  }\n\n  &:focus-visible {\n    outline: 2px solid tokens.$ifxColorOcean500;\n    outline-offset: 2px;\n  }\n\n  &.disabled {\n    cursor: default;\n    border-color: tokens.$ifxColorEngineering300;\n  }\n\n\n}\n\n\n.switch__label-wrapper {\n\n  & label { \n    &:hover { \n      cursor: pointer;\n    }\n  }\n\n  &.disabled {\n    color: tokens.$ifxColorEngineering300;\n  }\n}\n\n\n.switch__checkbox-wrapper {\n\n  .switch {\n    // position: absolute;\n    width: tokens.$ifxSpace200;\n    height: tokens.$ifxSpace200;\n    background-color: tokens.$ifxColorEngineering500;\n    border-radius: 50%;\n    transition: transform 0.3s ease, background-color 0.3s ease;\n\n    &.disabled {\n      background-color: tokens.$ifxColorEngineering300;\n      border-color: tokens.$ifxColorEngineering300;\n      cursor: default;\n    }\n  }\n\n  .switch.checked {\n    transform: translateX(16px);\n    background-color: tokens.$ifxColorBaseWhite;\n\n    &.disabled {\n      cursor: default;\n    }\n\n  }\n\n}\n\n.switch__checkbox-container:hover .toggle-switch {\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n}\n\n\n\n.switch__checkbox-container.checked {\n  background-color: tokens.$ifxColorOcean500;\n  border-color: tokens.$ifxColorOcean500;\n\n  &.disabled {\n    background-color: tokens.$ifxColorEngineering300;\n    border-color: tokens.$ifxColorEngineering300;\n    cursor: default;\n  }\n}","import { AttachInternals } from '@stencil/core';\nimport { Component, Prop, State, Watch, h, Event, EventEmitter, Element } from '@stencil/core';\nimport { trackComponentView } from '../../global/utils/tracking';\n\n@Component({\n  tag: 'ifx-switch',\n  styleUrl: 'switch.scss',\n  shadow: true,\n  formAssociated: true\n})\nexport class Switch {\n  @Prop() value: boolean = false;\n  @Prop() name: string = '';\n  @Prop() disabled: boolean = false;\n  @State() internalValue: boolean = false;\n\n  @AttachInternals() internals: ElementInternals;\n\n  @Element() el: HTMLIfxSwitchElement;\n\n  @Event({ eventName: 'ifxChange' }) ifxChange: EventEmitter<boolean>;\n\n  componentWillLoad() {\n    this.internalValue = this.value;\n  }\n  \n\n  toggleLabelGap() {\n    const slot = this.el.shadowRoot.querySelector('slot');\n    const container = this.el.shadowRoot.querySelector('.container');\n    if (slot.assignedNodes().length) {\n      container.classList.add('gap')\n    } else { \n      container.classList.remove('gap')\n    }\n  }\n  \n  componentDidLoad() {\n    this.toggleLabelGap();\n    trackComponentView('Switch');\n\n  }\n    \n  @Watch('value')\n  valueChanged(newValue: boolean, oldValue: boolean) {\n    if (newValue !== oldValue) {\n      this.internalValue = newValue;\n    }\n  }\n\n  toggleSwitch() {\n    if (this.disabled) return;\n    this.internalValue = !this.internalValue;\n    this.internals.setFormValue(this.internalValue ? 'on' : null);\n    this.ifxChange.emit(this.internalValue);\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    if (this.disabled) return;\n    // If the pressed key is either 'Enter' or 'Space' \n    if (event.key === 'Enter' || event.key === ' ') {\n      this.toggleSwitch();\n    }\n  }\n\n  /**\n   * Callback for form association.\n   * Called whenever the form is reset.\n   */\n  formResetCallback() {\n    this.internals.setFormValue(null);\n  }\n\n  render() {\n    return (\n      <div\n        class=\"container\"\n        role=\"switch\"\n        aria-checked={this.internalValue ? 'true' : 'false'}\n        aria-label={this.name}\n        onClick={() => this.toggleSwitch()}\n        onKeyDown={(event) => this.handleKeyDown(event)}\n        >\n        {/* Checkbox */}\n        <div \n          class={`switch__checkbox-container ${this.internalValue ? 'checked' : ''} ${this.disabled ? 'disabled' : ''}`}\n          tabindex=\"0\"\n        >\n          <div class=\"switch__checkbox-wrapper\">\n            <input type=\"checkbox\" hidden\n              name={this.name}\n              disabled={this.disabled}\n              value={`${this.internalValue}`} />\n            <div class={`switch ${this.internalValue ? 'checked' : ''} ${this.disabled ? 'disabled' : ''}`} />\n          </div>\n        </div >\n\n        {/* Label */}\n        <div class={`switch__label-wrapper ${this.disabled ? 'disabled' : ''}`} >\n          <label htmlFor=\"switch\">\n            <slot onSlotchange={() => this.toggleLabelGap()} />\n          </label>\n        </div>\n      </div>\n    )\n\n  }\n}\n","// global/utils/tracking.ts\nconst componentQueue: string[] = [];\nconst BATCH_INTERVAL = 5000; // 5 seconds\n\nfunction sendBatch() {\n  if (componentQueue.length > 0) {\n    const componentsToSend = [...componentQueue];\n    componentQueue.length = 0; // Clear the queue\n\n    if (window._paq) {\n      window._paq.push(['trackEvent', 'Component', 'View', componentsToSend.join(', ')]);\n    } else {\n      console.error(\"Matomo _paq array is not defined\");\n    }\n  }\n}\n\nexport function trackComponentView(componentName: string) {\n  if (!componentQueue.includes(componentName)) {\n    componentQueue.push(componentName);\n  }\n}\n\n\n// Set an interval to send the batch every BATCH_INTERVAL milliseconds\nsetInterval(sendBatch, BATCH_INTERVAL);"],"names":["Switch","componentWillLoad","this","internalValue","value","toggleLabelGap","slot","el","shadowRoot","querySelector","container","assignedNodes","length","classList","add","remove","componentDidLoad","trackComponentView","valueChanged","newValue","oldValue","toggleSwitch","disabled","internals","setFormValue","ifxChange","emit","handleKeyDown","event","key","formResetCallback","render","h","class","role","name","onClick","onKeyDown","tabindex","type","hidden","htmlFor","onSlotchange","componentQueue","componentName","includes","push","setInterval","componentsToSend","window","_paq","join","console","error"],"sourceRoot":""}