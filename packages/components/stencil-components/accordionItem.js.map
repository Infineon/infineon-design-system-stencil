{"file":"accordionItem.js","mappings":";;;AAAA,MAAM,gBAAgB,GAAG,40BAA40B;;MCQx1B,gBAAgB;;;;;;;;2BAEQ,IAAI;gBACd,KAAK;;EAK9B,UAAU;IACR,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;IACvB,IAAI,IAAI,CAAC,IAAI,EAAE;MACb,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;KACzB;SAAM;MACL,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;KAC1B;GACF;EAED,iBAAiB;IACf,IAAI,IAAI,CAAC,IAAI,EAAE;MACb,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,IAAI,CAAC;KACrE;SAAM;MACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC;KACtC;GACF;EAED,iBAAiB;IACf,IAAG,CAAC,IAAI,CAAC,eAAe,EAAE;MACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;MACjB,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;KACzB;GACF;EAED,gBAAgB;IACd,IAAI,CAAC,iBAAiB,EAAE,CAAA;GACzB;EAED,kBAAkB;IAChB,IAAI,CAAC,iBAAiB,EAAE,CAAA;GACzB;EAGD,MAAM,KAAK;IACT,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IAClB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;GAC1B;EAGD,MAAM,MAAM;IACV,OAAO,IAAI,CAAC,IAAI,CAAC;GAClB;EAED,MAAM;IACJ,QACE,yBAAiB,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,kBAAkB,IAAI,CAAC,IAAI,GAAG,MAAM,GAAG,EAAE,EAAE,IAC/E,WAAK,KAAK,EAAC,iBAAiB,EAAC,OAAO,EAAE,MAAM,IAAI,CAAC,UAAU,EAAE,IAC3D,YAAM,KAAK,EAAC,gBAAgB,IAC1B,gBAAU,IAAI,EAAC,iBAAiB,GAAG,CAC9B,EACP,YAAM,KAAK,EAAC,mBAAmB,IAAE,IAAI,CAAC,OAAO,CAAQ,CACjD,EACN,WAAK,KAAK,EAAC,mBAAmB,EAAC,GAAG,EAAE,CAAC,EAAE,MAAM,IAAI,CAAC,SAAS,GAAG,EAAiB,CAAC,IAC9E,WAAK,KAAK,EAAC,eAAe,IACxB,eAAQ,CACJ,CACF,CACF,EACN;GACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/accordion/accordionItem.scss?tag=ifx-accordion-item&encapsulation=shadow","src/components/accordion/accordionItem.tsx"],"sourcesContent":["// ifxAccordionItem.scss\r\n@use \"~@infineon/design-system-tokens/dist/tokens\";\r\n@use \"../../global/font.scss\";\r\n\r\n// :host {\r\n//   display: block;\r\n// }\r\n\r\n.accordion-item {\r\n  border-radius: 3px;\r\n  overflow: hidden;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.accordion-title:hover {\r\n  border: 1px solid tokens.$ifxColorEngineering200;\r\n  color: tokens.$ifxColorOcean600;\r\n}\r\n\r\n.accordion-title {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: tokens.$ifxSpace150 tokens.$ifxSpace200;\r\n  gap: tokens.$ifxSpace150;\r\n  color: tokens.$ifxColorOcean500;\r\n  background-color: tokens.$ifxColorBaseWhite;\r\n  border: 1px solid tokens.$ifxColorEngineering200;\r\n  cursor: pointer;\r\n}\r\n\r\n.accordion-caption {\r\n  font-weight: tokens.$ifxFontWeightSemibold;\r\n  font-size: tokens.$ifxFontSizeL;\r\n}\r\n\r\n.accordion-content {\r\n  gap: tokens.$ifxSpace100;\r\n  max-height: 0;\r\n  overflow: hidden;\r\n  transition: max-height 0.3s ease-in-out;\r\n  line-height: 24px;\r\n  font-size: tokens.$ifxFontSizeM;\r\n  font-weight: 400;\r\n  font-family: tokens.$ifxFontFamilyBody;\r\n}\r\n\r\n.inner-content {\r\n  background-color: tokens.$ifxColorBaseWhite;\r\n  padding: tokens.$ifxSpace300;\r\n  // white-space: pre-wrap;\r\n  /* wraps text at spaces and within words */\r\n  word-wrap: break-word;\r\n  /* breaks text within a word if necessary */\r\n  overflow-wrap: anywhere;\r\n  align-self: stretch;\r\n\r\n  /* breaks text at arbitrary points when needed */\r\n}\r\n\r\n.accordion-icon {\r\n  font-weight: bold;\r\n  display: inline-block;\r\n  transition: transform 0.3s;\r\n\r\n  &:hover {\r\n    color: tokens.$ifxColorOcean600;\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n.accordion-item.open .accordion-icon {\r\n  transform: rotate(-180deg);\r\n}","//ifxAccordionItem\r\nimport { Component, Prop, h, State, Event, EventEmitter, Method } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ifx-accordion-item',\r\n  styleUrl: 'accordionItem.scss',\r\n  shadow: true,\r\n})\r\nexport class IfxAccordionItem {\r\n  @Prop() caption: string;\r\n  @Prop() initialCollapse: boolean = true;\r\n  @State() open: boolean = false;\r\n  @Event() ifxItemOpen: EventEmitter;\r\n  @Event() ifxItemClose: EventEmitter;\r\n  private contentEl!: HTMLElement;\r\n\r\n  toggleOpen() {\r\n    this.open = !this.open;\r\n    if (this.open) {\r\n      this.ifxItemOpen.emit();\r\n    } else {\r\n      this.ifxItemClose.emit();\r\n    }\r\n  }\r\n\r\n  openAccordionItem() { \r\n    if (this.open) {\r\n      this.contentEl.style.maxHeight = `${this.contentEl.scrollHeight}px`;\r\n    } else {\r\n      this.contentEl.style.maxHeight = '0';\r\n    }\r\n  }\r\n\r\n  componentWillLoad() { \r\n    if(!this.initialCollapse) { \r\n      this.open = true;\r\n      this.ifxItemOpen.emit();\r\n    }\r\n  }\r\n\r\n  componentDidLoad() { \r\n    this.openAccordionItem()\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.openAccordionItem()\r\n  }\r\n\r\n  @Method()\r\n  async close() {\r\n    this.open = false;\r\n    this.ifxItemClose.emit();\r\n  }\r\n\r\n  @Method()\r\n  async isOpen(): Promise<boolean> {\r\n    return this.open;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div aria-label={this.caption} class={`accordion-item ${this.open ? 'open' : ''}`}>\r\n        <div class=\"accordion-title\" onClick={() => this.toggleOpen()}>\r\n          <span class=\"accordion-icon\">\r\n            <ifx-icon icon=\"chevron-down-12\" />\r\n          </span>\r\n          <span class=\"accordion-caption\">{this.caption}</span>\r\n        </div>\r\n        <div class=\"accordion-content\" ref={(el) => (this.contentEl = el as HTMLElement)}>\r\n          <div class=\"inner-content\">\r\n            <slot />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"version":3}