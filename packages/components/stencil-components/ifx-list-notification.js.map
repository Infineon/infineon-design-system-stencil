{"file":"ifx-list-notification.js","mappings":"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","names":[],"sources":["src/components/list-group/list-group-notification.scss?tag=ifx-list-notification&encapsulation=shadow","src/components/list-group/list-group-notification.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n\n.list-group-notification {\n  width: 350px;\n  height: 88px;\n  padding: 16px;\n  margin-bottom: 8px;\n  background-color: tokens.$ifxColorBaseWhite;\n  border: 1px solid tokens.$ifxColorEngineering200;\n\n  & .description__section {\n    display: -webkit-box;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  &.flush {\n    border: none;\n    border-bottom: 1px solid tokens.$ifxColorEngineering200;\n  }\n\n  & .heading__section {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 8px;\n    color: tokens.$ifxColorOcean500;\n  }\n\n  & .heading__section-title {\n    flex: 1;\n    margin: 0;\n    font-family: \"Source Sans Pro\";\n    font-weight: tokens.$ifxFontWeightSemibold;\n    line-height: 1.2;\n    font-size: tokens.$ifxFontSizeM;\n\n    display: -webkit-box;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  & .heading__section-time {\n    flex: none;\n    margin-left: 2px;\n    font-size: tokens.$ifxFontSizeS;\n    line-height: tokens.$ifxLineHeightS;\n    font-weight: 400;\n\n    display: -webkit-box;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}","import { Component, h, Element, Prop, State } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-list-notification',\n  styleUrl: 'list-group-notification.scss',\n  shadow: true,\n})\n\nexport class ListGroupNotification {\n  @Element() el;\n  @Prop() titleText: string = \"\"\n  @Prop() isFlush: boolean = false;\n  @Prop() creationTime: any;\n  @State() postTime: number;\n  @State() shownTime: string;\n\n  setDisplayTime(seconds, minutes, hours, days) {\n    if (seconds <= 60) {\n      this.shownTime = `Just now`\n    } else if (minutes <= 60) {\n      this.shownTime = `${minutes} min. ago`\n    } else if (hours <= 24) {\n      this.shownTime = hours > 1 ? `${hours} hr. ago` : `${hours} hrs. ago`\n    } else if (days) {\n      this.shownTime = hours < 48 ? `1 day ago` : `${days} days ago`\n      if (hours > 168) {\n        this.shownTime = `${new Date().getDay()}.${new Date().getMonth()}.${new Date().getFullYear()}`\n      }\n    }\n  }\n\n  stringToDate(dataString) {\n    if (!dataString) return null\n    let dateParts = dataString.split(\"/\");\n    if (dateParts[2]) {\n      if (dateParts[2].split(\" \")[1]) {\n        let timeParts = dateParts[2].split(\" \")[1].split(\":\");\n        dateParts[2] = dateParts[2].split(\" \")[0];\n        return new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0], timeParts[0], timeParts[1], timeParts[2]);\n      }\n    }\n  }\n\n  getElapsedTime(time) {\n    let date = this.stringToDate(time)\n    if (date) {\n      let miliseconds = Date.now() - date.getTime()\n      let seconds = Math.floor(miliseconds / 1000);\n      let minutes = Math.floor(miliseconds / 60000);\n      let hours = Math.floor(minutes / 60);\n      let days = Math.floor(hours / 24);\n      this.setDisplayTime(seconds, minutes, hours, days)\n    }\n  }\n\n  setTimeInterval(time) {\n    this.postTime = window.setInterval(() => {\n      this.getElapsedTime(time)\n    }, 1000)\n  };\n\n  componentWillLoad() {\n    this.getElapsedTime(this.creationTime)\n    this.setTimeInterval(this.creationTime) //if time update on refresh, delete this & clear interval\n    const ifxListGroup = this.el.closest('ifx-list-group')\n    if (ifxListGroup.flush) {\n      this.isFlush = true;\n    } else this.isFlush = false;\n  }\n\n  disconnectedCallback() {\n    window.clearInterval(this.postTime);\n  }\n\n  render() {\n    return (\n      <div class={`list-group-notification ${this.isFlush ? 'flush' : \"\"}`}>\n        <div class=\"heading__section\">\n          <h6 class=\"heading__section-title\">{this.titleText}</h6>\n          <div class=\"heading__section-time\">{this.shownTime}</div>\n        </div>\n        <div class=\"description__section\">\n          <slot />\n        </div>\n      </div>\n    );\n  }\n}\n"],"version":3}