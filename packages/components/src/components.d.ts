/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface IfxAlert {
        /**
          * @default 'assertive'
         */
        "AriaLive": string;
        /**
          * @default true
         */
        "closable": boolean;
        "icon": string;
        /**
          * @default 'primary'
         */
        "variant": 'primary' | 'success' | 'danger' | 'warning' | 'info';
    }
    interface IfxIcon {
        /**
          * @default ""
         */
        "icon": string;
        "ifxIcon": any;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface IfxAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIfxAlertElement;
}
export interface IfxIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIfxIconElement;
}
declare global {
    interface HTMLIfxAlertElementEventMap {
        "ifxClose": any;
    }
    interface HTMLIfxAlertElement extends Components.IfxAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIfxAlertElementEventMap>(type: K, listener: (this: HTMLIfxAlertElement, ev: IfxAlertCustomEvent<HTMLIfxAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIfxAlertElementEventMap>(type: K, listener: (this: HTMLIfxAlertElement, ev: IfxAlertCustomEvent<HTMLIfxAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIfxAlertElement: {
        prototype: HTMLIfxAlertElement;
        new (): HTMLIfxAlertElement;
    };
    interface HTMLIfxIconElementEventMap {
        "consoleError": boolean;
    }
    interface HTMLIfxIconElement extends Components.IfxIcon, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIfxIconElementEventMap>(type: K, listener: (this: HTMLIfxIconElement, ev: IfxIconCustomEvent<HTMLIfxIconElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIfxIconElementEventMap>(type: K, listener: (this: HTMLIfxIconElement, ev: IfxIconCustomEvent<HTMLIfxIconElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIfxIconElement: {
        prototype: HTMLIfxIconElement;
        new (): HTMLIfxIconElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "ifx-alert": HTMLIfxAlertElement;
        "ifx-icon": HTMLIfxIconElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface IfxAlert {
        /**
          * @default 'assertive'
         */
        "AriaLive"?: string;
        /**
          * @default true
         */
        "closable"?: boolean;
        "icon"?: string;
        "onIfxClose"?: (event: IfxAlertCustomEvent<any>) => void;
        /**
          * @default 'primary'
         */
        "variant"?: 'primary' | 'success' | 'danger' | 'warning' | 'info';
    }
    interface IfxIcon {
        /**
          * @default ""
         */
        "icon"?: string;
        "ifxIcon"?: any;
        "onConsoleError"?: (event: IfxIconCustomEvent<boolean>) => void;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "ifx-alert": IfxAlert;
        "ifx-icon": IfxIcon;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ifx-alert": LocalJSX.IfxAlert & JSXBase.HTMLAttributes<HTMLIfxAlertElement>;
            "ifx-icon": LocalJSX.IfxIcon & JSXBase.HTMLAttributes<HTMLIfxIconElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
