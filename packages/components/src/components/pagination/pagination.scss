@use "~@infineon/design-system-tokens/dist/tokens";
@use "../../global/font.scss";

:host {
  display: inline-flex;
}

.container {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  gap: 32px;

  & .items__per-page-wrapper {
    display: flex;
    align-items: center;
    gap: 16px;

    & .items__per-page-label {
      color: #1D1D1D;
      font-family: var(--ifx-font-family);
      font-size: 14px;
      font-style: normal;
      font-weight: 600;
      line-height: 20px;
    }

    & .items__per-page-field {
      display: flex;
      flex-direction: column;
      align-items: flex-start;

      & ifx-select {
        width: 92px;
      }
    }
  }

  & .items__total-wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 12px;

    & .items__total-button {
      display: flex;
      width: 40px;
      height: 40px;
      justify-content: center;
      align-items: center;
      border-radius: 100px;
      border: 1px solid #BFBBBB;
      background: #FFF;
    }

    & .page__numbers-wrapper {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 12px;

      & .page__number-item {
        display: flex;
        padding: 6px;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 10px;
        border-radius: 100px;

        &.active {
          background-color: #0A8276;

          & span {
            color: #fff;
          }
        }

        &:hover {
          cursor: pointer;
        }

        &:hover:not(.active) {
          background-color: #ddd;

        }

        &:active:not(.active) {
          background-color: #575352;
        }

        & span {
          display: flex;
          width: 16px;
          height: 16px;
          flex-direction: column;
          justify-content: center;
          color: #1D1D1D;
          text-align: center;
          font-family: var(--ifx-font-family);
          font-size: 13px;
          font-style: normal;
          font-weight: 400;
          line-height: 20px;
        }
      }
    }
  }
}


.pagination {
  display: flex;

  & ifx-icon-button:first-of-type {
    margin-right: 12px;
  }

  & ifx-icon-button:last-of-type {
    margin-left: 12px;
  }
}

a {
  padding: 6px;
  border-radius: 100px;
}

ol {
  list-style-type: none;
  padding: 0;
  margin: 0;
  display: inline-flex;
  align-items: center;
  gap: 12px;
}

li {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border-radius: 100px;

  &:hover:not(.active) {
    & a {
      background-color: #EEEDED;
    }
  }

  &:active:not(.active) {
    & a {
      background-color: #575352;
      color: #fff;
    }
  }

  &.active {
    background-color: #0A8276;

    & a {
      color: #fff;
    }
  }

  &:hover {
    cursor: pointer;
  }

  & a {
    text-decoration: none;
    display: flex;
    width: 16px;
    height: 16px;
    flex-direction: column;
    justify-content: center;
    color: #1D1D1D;
    text-align: center;
    font-family: var(--ifx-font-family);
    font-size: 13px;
    font-style: normal;
    font-weight: 400;
    line-height: 20px;
  }
}

.prev,
.next {
  &.disabled {
    cursor: default;

    &:hover {
      cursor: default;
      text-decoration: none;
    }
  }
}

.prev {
  margin-right: 2.5px;
}

.next {
  margin-left: 2.5px;
}


@mixin ellipsis($before: true) {
  content: "\2026";
  font-size: 13px;
  display: inline-block;

  @if($before) {
    margin-right: 6px;
  }

  @else {
    margin-left: 6px;
  }
}


// @media(max-width:460px) {
//   li {

//     &:first-child,
//     &.active,
//     &.active-sibling:nth-last-child(2), // Show second to last child if the last one is active
//     &:last-child {
//       //display: inline-block !important;
//       display: inline-flex !important;
//       flex-direction: row;
//     }

//     $how-many-on-ends: 3; // 1,2,3,...,10 || 1,...,8,9,10
//     // There are >= 5 pages
//     &:first-child:nth-last-child(n+6) {

//       &~li {
//         // Start out with all siblings hidden
//         display: none;

//         // Show the last children in the list by default
//         &:nth-last-child(-n+#{$how-many-on-ends}) {
//           //display: inline-block;
//           display: inline-flex;
//           flex-direction: row;

//         }

//         // The child at the beginning of the last group shows ellipsis for the group
//         &:nth-last-child(#{$how-many-on-ends}) {
//           &:before {
//             @include ellipsis(true);
//           }
//         }

//         // The very beginning elements do not need to show ellipsis
//         // The very end elements do not need to show ellipsis
//       }


//       &.active,
//        &~li.active {

//          // Show ellipsis before and after the active element
//          &:before {
//            @include ellipsis(true);
//          }
//          &:after {
//            @include ellipsis(false);
//          }


//          // If the active element is in the first or last group, don't show ellipsis (siblings will take care of it)
//          &:nth-child(-n+#{$how-many-on-ends - 1}),
//          &:nth-last-child(-n+#{$how-many-on-ends - 1}) {
//            &:before, &:after {
//              display: none;
//            }
//          }

//          // Hide the last group if "active" comes before them
//          &~li:nth-last-child(-n+#{$how-many-on-ends}) {
//            display: none;
//          }

//          // Show the first group together if "active" comes before them
//          &~li:nth-child(-n+#{$how-many-on-ends}) {
//            //display: inline-block;
//            display: inline-flex;
//            flex-direction: row;
//          }

//          // If "active" is before the last member in the group, don't show ellipsis
//          &~li:nth-child(-n+#{$how-many-on-ends - 1}) {
//             &:after {
//               display: none;
//             }
//          }


//         // The child at the end of the first group shows ellipsis for the group
//         &~li:nth-child(#{$how-many-on-ends}) {
//           &:after {
//             @include ellipsis(false);
//           }
//         }
//       }
//     }
//   }
// }

@media (min-width: 400px) {
  li {

    &:first-child,
    &.active-sibling,
    &.active,
    &.active+li,
    &:last-child {
      //display: inline-block!important;
      display: inline-flex !important;
      flex-direction: row;
    }

    // There are >= 7 pages
    &:first-child:nth-last-child(n+8) {
      $how-many-on-ends: 5; // 1,2,3,4,5,...,10 || 1,...6,7,8,9,10

      &~li {
        // Start out with all siblings hidden
        display: none;

        // Show ellipsis before the previous one
        &.active-sibling:before {
          @include ellipsis(true);
        }

        // Show ellipsis after the next one
        &.active+li:after {
          @include ellipsis(false);
        }

        // Show the last children in the list by default
        &:nth-last-child(-n+#{$how-many-on-ends}) {
          //display: inline-block;
          display: inline-flex;
          flex-direction: row;
        }

        // The child at the beginning of the last group shows ellipsis for the group
        &:nth-last-child(#{$how-many-on-ends}) {
          &:before {
            @include ellipsis(true);
          }
        }

        // The very beginning elements do not need to show ellipsis
        &:nth-child(-n+#{$how-many-on-ends - 3}),
        // The very end elements do not need to show ellipsis
        &:nth-last-child(-n+#{$how-many-on-ends - 3}),
        // Even if it's a sibling to "active"
        &.active-sibling:nth-last-child(-n+#{$how-many-on-ends - 1}) {

          &:before,
          &:after {
            display: none !important;
          }
        }
      }

      &.active,
      &~li.active {

        // Hide the last group if "active" comes before them
        &~li:nth-last-child(-n+#{$how-many-on-ends}) {
          display: none;

          // If there is overlap, the element will show, but hide it's ellipsis
          &:before {
            display: none;
          }
        }

        // Show the first group together if "active" comes before them
        &~li:nth-child(-n+#{$how-many-on-ends}) {
          //display: inline-block;
          display: inline-flex !important;
          flex-direction: row;
        }

        // If "active" is before the last member in the group, don't show ellipsis
        &~li:nth-child(-n+#{$how-many-on-ends - 1}) {
          &:after {
            display: none;
          }
        }


        // The child at the end of the first group shows ellipsis for the group
        &~li:nth-child(#{$how-many-on-ends}) {
          &:after {
            @include ellipsis(false);
          }
        }

        // "active" should never show ellipsis
        &:before,
        &:after {
          display: none;
        }
      }
    }
  }
}