{"version":3,"file":"static/js/1541.c4c0cae8.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/select/multi-select/multiselect.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/select/multi-select/multiselect.scss?tag=ifx-multiselect&encapsulation=shadow"],"sourcesContent":["import { Component, Prop, State, Event, EventEmitter, Element, h, Watch } from '@stencil/core';\nimport { Option } from './interfaces';\n\n// Debounce function\nfunction debounce(func, wait) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n@Component({\n  tag: 'ifx-multiselect',\n  styleUrl: 'multiselect.scss',\n  shadow: true\n})\n\n\n\nexport class Multiselect {\n\n  @Prop() options: any[] | string;\n  @Prop() batchSize: number = 50;\n  @Prop() size: string = 'medium (40px)';\n  @Prop() disabled: boolean = false;\n  @Prop() error: boolean = false;\n  @State() internalError: boolean = false;\n  @Prop() errorMessage: string = \"Error\";\n  @State() internalErrorMessage: string;\n  @Prop() label: string = \"\";\n  @State()  persistentSelectedOptions: Option[] = [];\n  @Prop() placeholder: string = \"\";\n  @State() dropdownOpen = false;\n  @State() dropdownFlipped: boolean;\n  @Prop() maxItemCount: number;\n  @State() zIndex: number = 1; // default z-index value\n  static globalZIndex = 1; // This will be shared among all instances of the component.\n  private currentIndex: number = 0; //needed for option selection using keyboard\n  @State() isLoading: boolean = false;\n  @State() loadedOptions: Option[] = [];\n  @State() filteredOptions: Option[] = [];\n  @Prop() showSearch: boolean = true;\n  @Prop() showSelectAll: boolean = true;\n  @State() optionCount: number = 0; // number of all options (leaves of the tree)\n\n\n  @Event() ifxSelect: EventEmitter;\n  @Event() ifxMultiselectIsOpen: EventEmitter;\n\n  @Element() el: HTMLElement;\n  dropdownElement!: HTMLElement;\n\n\n  async loadInitialOptions() {\n    this.isLoading = true;\n    this.internalError = this.error;\n    this.internalErrorMessage = this.errorMessage;\n    // Load the first batch of options (e.g., first 20)\n    this.loadedOptions = await this.fetchOptions(0, this.batchSize);\n    this.isLoading = false;\n  }\n\n  async fetchMoreOptions() {\n    this.isLoading = true;\n    const moreOptions = await this.fetchOptions(this.loadedOptions.length, this.batchSize);\n    this.loadedOptions = [...this.loadedOptions, ...moreOptions];\n    this.isLoading = false;\n  }\n\n\n  handleScroll(event: UIEvent) {\n    const element = event.target as HTMLElement;\n    const halfwayPoint = Math.floor((element.scrollHeight - element.clientHeight) / 2); //loading more options when the user has scrolled halfway through the current list\n\n    if (element.scrollTop >= halfwayPoint) {\n      this.fetchMoreOptions();\n    }\n  }\n\n\n\n\n  async fetchOptions(startIndex: number, count: number): Promise<Option[]> {\n    let allOptions: Option[] = [];\n\n    // Parse options if it's a string, or use directly if it's an array\n    if (typeof this.options === 'string') {\n      try {\n        allOptions = JSON.parse(this.options);\n      } catch (err) {\n        console.error('Failed to parse options:', err);\n      }\n    } else if (Array.isArray(this.options)) {\n      allOptions = this.options;\n    } else {\n      console.error('Unexpected value for options:', this.options);\n    }\n\n    this.optionCount = this.countOptions(allOptions);\n\n    // Slice the options array based on startIndex and count\n    const slicedOptions = allOptions.slice(startIndex, startIndex + count);\n\n    // Update the state for initially selected options, if needed\n    if (startIndex === 0) { // Assuming you want to do this only for the first batch\n      const initiallySelected = slicedOptions.filter(option => option.selected);\n      const initallyAndNotAdded = initiallySelected.filter(init => !this.persistentSelectedOptions.some(opt => opt.value == init.value));\n      this.persistentSelectedOptions = [...this.persistentSelectedOptions, ...initallyAndNotAdded];\n    }\n\n    return slicedOptions;\n  }\n\n  /**\n   * Count the number of options. Only counts the leaves of the options tree.\n   */\n  countOptions(options: Option[]): number {\n    let count = 0;\n    for (const option of options) {\n      if (option.children && option.children.length >= 0) {\n        count += this.countOptions(option.children);\n      } else {\n        count++;\n      }\n    }\n    return count;\n  }\n\n\n  handleSearch = debounce((targetElement: HTMLInputElement) => {\n    const searchTerm = targetElement.value.toLowerCase();\n    if (searchTerm === '') {\n      this.filteredOptions = this.loadedOptions;\n    } else {\n      this.filteredOptions = this.loadedOptions.filter(option => option.label.toLowerCase().includes(searchTerm))\n    }\n  }, 300);\n\n  componentDidLoad() {\n    setTimeout(() => {\n      this.positionDropdown();\n    }, 500);\n\n    // setInterval(this.handleScroll, 5000); // Runs every 5 seconds (5000 milliseconds)\n\n\n  }\n\n\n  componentWillLoad() {\n    this.loadInitialOptions();\n    this.filteredOptions = [...this.loadedOptions];\n  }\n\n  @Watch('error')\n  updateInternalError() {\n    this.internalError = this.error;\n  }\n\n  @Watch('errorMessage')\n  updateInternalErrorMessage() {\n    this.internalErrorMessage = this.errorMessage;\n  }\n\n  @Watch('loadedOptions')\n  loadedOptionsChanged() {\n    this.filteredOptions = [...this.loadedOptions];\n  }\n\n\n  handleOptionClick(option: Option) {\n    this.internalError = false;\n\n    if (!option.selected && this.isSelectionLimitReached(option)) {\n      option.checkboxRef.toggleCheckedState(false)\n      this.internalError = true;\n      this.internalErrorMessage = \"Please consider the maximum number of items to choose from\";\n      return;\n    }\n    \n    this.updateSelection(option);\n    this.ifxSelect.emit(this.persistentSelectedOptions);\n  }\n\n\n  isSelectionLimitReached(option: Option): boolean {\n    let newOptionsLength = option.children ? option.children.length : 1;\n    return this.maxItemCount && this.persistentSelectedOptions.length + newOptionsLength > this.maxItemCount &&\n      !this.persistentSelectedOptions.some(selectedOption => selectedOption.value === option.value)\n  }\n\n  updateSelection(option: Option) {\n    const wasSelected = this.persistentSelectedOptions.some(selectedOption => selectedOption.value === option.value);\n\n    if (option.children && option.children.length > 0) {\n      this.handleParentOptionClick(option);\n    } else {\n      this.handleChildOptionClick(option, wasSelected);\n    }\n  }\n\n  async selectAll() {\n    const allOptions = await this.fetchOptions(0, this.optionCount);\n    this.selectAllRecursive(allOptions);\n    \n    this.ifxSelect.emit(this.persistentSelectedOptions);\n  }\n\n  private selectAllRecursive(options: Option[]) {\n    for (const opt of options) {\n      if (opt.children && opt.children.length > 0) {\n        this.selectAllRecursive(opt.children);\n      } else {\n        if (!this.persistentSelectedOptions.some((some) => some.value === opt.value )) {\n          opt.selected = true;\n          this.persistentSelectedOptions = [...this.persistentSelectedOptions, opt];\n        }\n      }\n    }\n\n  }\n\n  handleParentOptionClick(option: Option) {\n    const allChildrenSelected = option.children.every(child =>\n      this.persistentSelectedOptions.some(selectedOption => selectedOption.value === child.value)\n    );\n\n    if (allChildrenSelected) {\n      this.persistentSelectedOptions = [...this.persistentSelectedOptions.filter(\n        selectedOption => !option.children.some(child => child.value === selectedOption.value)\n      )];\n\n      option.selected = false;\n      option.children.forEach(child => {\n        child.selected = false;\n      })\n\n    } else {\n      const newChildren = [...option.children.filter(childOption =>\n            !this.persistentSelectedOptions.some(selectedOption => selectedOption.value === childOption.value)\n      )];\n      option.selected = true;\n      option.children.forEach(child => {\n        child.selected = true;\n      })\n      this.persistentSelectedOptions = [...this.persistentSelectedOptions, ...newChildren];\n    }\n  }\n\n  handleChildOptionClick(option: Option, wasSelected: boolean) {\n    if (wasSelected) {\n      this.persistentSelectedOptions = [...this.persistentSelectedOptions.filter(selectedOption => selectedOption.value !== option.value)];\n      option.selected = false;\n    } else {\n      this.persistentSelectedOptions = [...this.persistentSelectedOptions, option];\n      option.selected = true;\n    }\n    this.updateParentSelectedState();\n  }\n\n  updateParentSelectedState() {\n    this.loadedOptions.forEach(option => {\n      if(option.children?.length > 0) {\n        if(option.children.every(child => child.selected === true)) option.selected = true;\n        else {\n          option.selected = false;\n          if(this.isOptionIndeterminate(option)) {\n            option.indeterminate = true;\n          }else{\n            option.indeterminate = false;\n          }\n        }\n      }\n    });\n  }\n\n\n\n  handleDocumentClick = (event: Event) => {\n    const path = event.composedPath();\n    if (!path.includes(this.dropdownElement)) {\n      this.dropdownOpen = false;\n      document.removeEventListener('click', this.handleDocumentClick);\n\n      // Dispatch the ifxMultiselectIsOpen event\n      this.ifxMultiselectIsOpen.emit(this.dropdownOpen);\n    }\n  }\n\n  getSizeClass() {\n    return `${this.size}` === \"s\"\n      ? \"small-select\"\n      : \"medium-select\";\n  }\n\n  toggleDropdown() {\n    this.dropdownOpen = !this.dropdownOpen;\n    setTimeout(() => {\n      if (this.dropdownOpen) {\n        document.addEventListener('click', this.handleDocumentClick);\n      }\n      // Dispatch the ifxMultiselectIsOpen event\n      this.ifxMultiselectIsOpen.emit(this.dropdownOpen);\n    }, 0);\n    this.zIndex = Multiselect.globalZIndex++;\n  }\n\n\n  waitForElement(querySelectorFunc: Function, callback: Function, maxTries = 50) {\n    let tries = 0;\n    function request() {\n      requestAnimationFrame(() => {\n        const elements = querySelectorFunc();\n        if (elements.length > 0 || tries > maxTries) {\n          callback(elements);\n        } else {\n          tries++;\n          request();\n        }\n      });\n    }\n    request();\n  }\n\n\n  handleKeyDown(event: KeyboardEvent) {\n    if (this.disabled) return; // If it's disabled, don't do anything.\n\n    const options = this.dropdownElement.querySelectorAll('.option');\n\n    switch (event.code) {\n      case 'Enter' || 'Space':\n        if (this.dropdownOpen) {\n          this.selectItem(options);\n        } else {\n          this.toggleDropdown();\n          // Wait a bit for the dropdown to finish rendering\n          this.waitForElement(() => {\n            return this.dropdownElement.querySelectorAll('.option');\n          }, (options) => {\n            this.updateHighlightedOption(options);\n          });\n        }\n        break;\n      case 'ArrowDown':\n        this.handleArrowDown(options);\n        if (this.dropdownOpen) {\n          this.updateHighlightedOption(options);\n        }\n        break;\n      case 'ArrowUp':\n        this.handleArrowUp(options);\n        if (this.dropdownOpen) {\n          this.updateHighlightedOption(options);\n        }\n        break;\n    }\n  }\n\n  handleWrapperClick(event: MouseEvent) {\n    // This is your existing logic for positioning the dropdown\n    this.positionDropdown();\n\n    // Check if the event target is the wrapper itself and not a child element.\n    if (event.currentTarget === event.target) {\n      this.toggleDropdown();\n    }\n  }\n\n  clearSelection() {\n    this.persistentSelectedOptions = [];\n    this.ifxSelect.emit(this.persistentSelectedOptions); // if you want to emit empty selection after clearing\n  }\n\n  positionDropdown() {\n    const wrapperRect = this.el.shadowRoot.querySelector('.ifx-multiselect-wrapper')?.getBoundingClientRect();\n    const spaceBelow = window.innerHeight - wrapperRect.bottom;\n    const spaceAbove = wrapperRect.top;\n\n    // If there's more space above than below the trigger and the dropdown doesn't fit below\n    if ((spaceAbove > spaceBelow && wrapperRect.height > spaceBelow) || (wrapperRect.bottom > window.innerHeight)) {\n      this.dropdownFlipped = true;\n    } else {\n      this.dropdownFlipped = false;\n    }\n  }\n\n\n\n  // Helper function to update highlighted option based on currentIndex\n  private updateHighlightedOption(options: NodeList) {\n    // Clear all highlights\n    options.forEach((option: Element) => option.classList.remove('is-highlighted'));\n\n    // Apply highlight to the current option\n    if (this.currentIndex >= 0 && this.currentIndex < options.length) {\n      (options[this.currentIndex] as Element).classList.add('is-highlighted');\n    }\n  }\n\n  // Helper function to handle arrow down navigation\n  private handleArrowDown(options: NodeList) {\n    if (this.currentIndex < options.length - 1) {\n      this.currentIndex++;\n    } else {\n      this.currentIndex = 0; // Wrap to the beginning.\n    }\n  }\n\n  // Helper function to handle arrow up navigation\n  private handleArrowUp(options: NodeList) {\n    if (this.currentIndex > 0) {\n      this.currentIndex--;\n    } else {\n      this.currentIndex = options.length - 1; // Wrap to the end.\n    }\n  }\n\n  private selectItem(options: NodeList) {\n    // If there's a previous selection, remove its \"selected\" class\n    const previouslySelected = this.dropdownElement.querySelector('.option.selected');\n    if (previouslySelected) {\n      previouslySelected.classList.remove('selected');\n    }\n\n    // Mark the current item as selected\n    const currentOptionElement = options[this.currentIndex] as Element;\n    currentOptionElement.classList.add('selected');\n\n    const currentOptionValue = currentOptionElement.getAttribute('data-value');\n    const currentListOfOptions = typeof this.options === 'string' //passed in string form via storybook\n      ? JSON.parse(this.options).map((option) => ({ value: option.value, label: option.label, children: option.children, selected: option.selected })) // added selected\n      : this.options.map(option => ({ ...option }));\n\n    const currentOption = this.findInOptions(currentListOfOptions, currentOptionValue); // get the option object based on the currently selected value and the options array\n    this.handleOptionClick(currentOption);\n  }\n\n\n  renderOption(option: Option, index: number) {\n    const isIndeterminate = this.isOptionIndeterminate(option);\n    const isSelected = option.children ? isIndeterminate || this.isOptionSelected(option) : this.persistentSelectedOptions.some(selectedOption => selectedOption.value === option.value);\n    const disableCheckbox = !isSelected && this.maxItemCount && this.persistentSelectedOptions.length >= this.maxItemCount;\n    const uniqueId = `checkbox-${option.value}-${index}`; // Generate a unique ID using the index\n\n    return (\n      <div class=\"option-wrapper\">\n        <div class={`option ${isSelected ? 'selected' : ''} \n        ${this.getSizeClass()}`}\n          data-value={option.value}\n          onClick={() => !disableCheckbox && this.handleOptionClick(option)}\n          tabindex=\"0\"\n          role={`${option.children?.length > 0 ? \"treeitem\" : \"option\"}`}>\n          <ifx-checkbox ref={(el) => option.checkboxRef = el} id={uniqueId} size=\"s\" value={isIndeterminate ? false : isSelected} indeterminate={isIndeterminate} disabled={disableCheckbox}></ifx-checkbox>\n          <label htmlFor={uniqueId} onClick={(e) => e.stopPropagation()}>{option.label}</label>\n        </div>\n        {option.children && option.children.map((child, childIndex) => this.renderSubOption(child, `${index}-${childIndex}`))}\n      </div>\n    );\n  }\n\n  isOptionSelected(option: Option): boolean {\n    if (!option.children) return false;\n\n    return option.children.every(child =>\n      this.persistentSelectedOptions.some(persistentOption => persistentOption.value === child.value)\n    );\n  }\n\n\n  isOptionIndeterminate(option: Option): boolean {\n    if (!option.children) return false;\n\n    const selectedChildren = option.children.filter(child =>\n      this.persistentSelectedOptions.some(persistentOption => persistentOption.value === child.value)\n    ).length;\n\n    return selectedChildren > 0 && selectedChildren < option.children.length;\n  }\n\n\n  findInOptions(options: Option[], searchTerm: string): Option | null {\n    for (const option of options) {\n      if (option.value === searchTerm) {\n        return option;\n      }\n      if (option.children) {\n        const foundInChildren = this.findInOptions(option.children, searchTerm);\n        if (foundInChildren) {\n          return foundInChildren;\n        }\n      }\n    }\n    return null;\n  }\n\n\n  renderSubOption(option: Option, index: string) {\n    const isSelected = this.persistentSelectedOptions.some(selectedOption => selectedOption.value === option.value);\n    const disableCheckbox = !isSelected && this.maxItemCount && this.persistentSelectedOptions.length >= this.maxItemCount;\n    const uniqueId = `checkbox-${option.value}-${index}`;\n\n    return (\n      <div class={`option sub-option ${isSelected ? 'selected' : ''} ${this.getSizeClass()}`}\n        data-value={option.value}\n        role={`${option.children?.length > 0 ? \"option\" : \"treeitem\"}`}\n        onClick={() => !disableCheckbox && this.handleOptionClick(option)}\n        tabindex=\"0\">\n        <ifx-checkbox ref={(el) => option.checkboxRef = el} id={uniqueId} size=\"s\" value={isSelected} disabled={disableCheckbox}></ifx-checkbox>\n        <label htmlFor={uniqueId} onClick={(e) => e.stopPropagation()}>{option.label}</label>\n      </div>\n    );\n  }\n\n  private renderSelectAll() {\n    const allSelected = this.persistentSelectedOptions.length === this.optionCount;\n    const noneSelected = this.persistentSelectedOptions.length === 0;\n    const indeterminate = this.optionCount > 0 && !noneSelected && !allSelected;\n\n    const that = this;\n    function toggleSelectAll() {\n      if (allSelected) {\n        that.clearSelection();\n      } else {\n        that.selectAll();\n      }\n    }\n\n    return <div class=\"select-all-wrapper\">\n      <div class={`option ${this.getSizeClass()}`} tabindex='0' onClick={toggleSelectAll}>\n        <ifx-checkbox id='selectAll' value={allSelected} indeterminate={indeterminate} size=\"s\"></ifx-checkbox>\n        <label htmlFor='selectAll'>Select all</label>\n      </div>\n      <ifx-dropdown-separator></ifx-dropdown-separator>\n    </div>;\n  }\n\n\n  render() {\n    // Create a label for the selected options\n    const selectedOptionsLabels = this.persistentSelectedOptions\n      .filter(option => {\n        // check if option is a child and its parent is selected\n        const isChildSelectedWithParent = this.persistentSelectedOptions.some(parentOption =>\n          parentOption.children &&\n          parentOption.children.some(child => child.value === option.value) &&\n          parentOption.selected\n        );\n        return !isChildSelectedWithParent;\n      })\n      .map(option => option.label)\n      .join(', ');\n\n    return (\n      <div class={`ifx-multiselect-container`} ref={el => this.dropdownElement = el as HTMLElement}>\n        {\n          this.label ?\n            <div class=\"ifx-label-wrapper\">\n              <span>{this.label}</span>\n            </div> : null\n        }\n        <div class={`ifx-multiselect-wrapper \n        ${this.getSizeClass()} \n        ${this.dropdownOpen ? 'active' : ''} \n        ${this.dropdownFlipped ? 'is-flipped' : ''}\n        ${this.internalError ? 'error' : \"\"}\n        ${this.disabled ? 'disabled' : \"\"}`}\n          tabindex=\"0\"\n          onClick={(event) => this.handleWrapperClick(event)}\n          onKeyDown={(event) => this.handleKeyDown(event)} >\n          <div class={`ifx-multiselect-input \n          ${this.persistentSelectedOptions.length === 0 ? 'placeholder' : \"\"}\n          `}\n            onClick={this.disabled ? undefined : () => this.toggleDropdown()}\n          >\n            {this.persistentSelectedOptions.length > 0 ? selectedOptionsLabels : 'Placeholder'}\n          </div>\n          {this.dropdownOpen && (\n            <div class=\"ifx-multiselect-dropdown-menu\"\n              onScroll={(event) => this.handleScroll(event)}\n              style={{ '--dynamic-z-index': this.zIndex.toString() }}>\n              {this.showSearch && <input type=\"text\" role=\"textbox\" class=\"search-input\" onInput={(event) => this.handleSearch(event.target)} placeholder=\"Search...\"></input>}\n              {this.showSelectAll && this.renderSelectAll()}\n              {this.filteredOptions.map((option, index) => this.renderOption(option, index))}\n              {this.isLoading && <div>Loading more options...</div>}\n            </div>\n          )}\n          <div class=\"ifx-multiselect-icon-container\">\n\n            {/* Clear Button - will show only if there's a selection */}\n            {this.persistentSelectedOptions.length > 0 && (\n              <div class=\"ifx-clear-button\" onClick={() => this.clearSelection()}>\n                <ifx-icon icon=\"cremove24\"></ifx-icon>\n              </div>\n            )}\n            <div class=\"icon-wrapper-up\" onClick={this.disabled ? undefined : () => this.toggleDropdown()}>\n              <ifx-icon\n                key='icon-up'\n                icon='chevronup-16'></ifx-icon>\n            </div>\n            <div class=\"icon-wrapper-down\" onClick={this.disabled ? undefined : () => this.toggleDropdown()}>\n              <ifx-icon\n                key='icon-down'\n                icon='chevron-down-16'></ifx-icon>\n            </div>\n          </div>\n\n        </div>\n        {\n          this.internalError ?\n            <div class=\"ifx-error-message-wrapper\">\n              <span>{this.internalErrorMessage}</span>\n            </div> : null\n        }\n      </div>\n    );\n  }\n\n}\n","// @import '~choices.js/public/assets/styles/choices.css';\n@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../../global/font.scss\";\n\n.ifx-multiselect-container {\n  background-color: tokens.$ifxColorBaseWhite;\n  position: relative;\n  box-sizing: border-box;\n  font-family: var(--ifx-font-family);\n\n  &.small-select {\n    height: 36px;\n  }\n\n  &.medium-select {\n    height: 40px;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n\n\n  .ifx-label-wrapper {\n    font-size: tokens.$ifxFontSizeM;\n    line-height: tokens.$ifxLineHeightM;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    overflow-wrap: anywhere;\n    max-width: 100%;\n  }\n\n  .ifx-error-message-wrapper {\n    color: #CD002F;\n    font-size: tokens.$ifxFontSizeXs;\n    line-height: tokens.$ifxLineHeightXs;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    overflow-wrap: anywhere;\n    max-width: 100%;\n  }\n\n  .ifx-multiselect-wrapper {\n    box-sizing: border-box;\n    position: relative;\n    display: flex;\n    align-items: center;\n    border: 1px solid tokens.$ifxColorEngineering400;\n    border-radius: tokens.$ifxBorderRadius12;\n    width: 100%;\n    font-weight: 400;\n    font-style: normal;\n\n\n    &.small-select {\n      height: 36px;\n      padding: 8px 12px;\n      font-size: tokens.$ifxFontSizeS;\n      line-height: tokens.$ifxLineHeightS;\n    }\n\n    &.medium-select {\n      height: 40px;\n      padding: 8px 16px;\n      font-size: tokens.$ifxFontSizeM;\n      line-height: tokens.$ifxLineHeightM;\n    }\n\n    &:focus-visible {\n      outline: none;\n    }\n\n    &:focus-visible:not(.active):not(:active) {\n      outline: none;\n\n      &::before {\n        content: '';\n        position: absolute;\n        width: calc(100% + 4px);\n        height: calc(100% + 4px);\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        border: 2px solid tokens.$ifxColorOcean500;\n        border-radius: 2px;\n\n      }\n    }\n\n    &.disabled {\n      background: tokens.$ifxColorEngineering200;\n      color: #575352;\n      border-color: #575352;\n      cursor: not-allowed;\n      -webkit-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n    }\n\n    &.error {\n      border-color: #CD002F;\n    }\n\n    &:hover:not(.focus, :focus) {\n      border-color: tokens.$ifxColorEngineering500;\n    }\n\n    &.active {\n      border-color: tokens.$ifxColorOcean500 !important; // Active border color\n\n      & .icon-wrapper-up {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding-left: tokens.$ifxSpace100;\n      }\n\n      & .icon-wrapper-down {\n        display: none\n      }\n    }\n\n\n    & .icon-wrapper-up {\n      display: none;\n    }\n\n    & .icon-wrapper-down {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding-left: tokens.$ifxSpace100;\n    }\n\n    &.is-flipped {\n      .ifx-multiselect-dropdown-menu {\n        top: auto;\n        bottom: 100%;\n      }\n    }\n  }\n\n  .ifx-multiselect-input {\n    flex-grow: 1;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    &.placeholder {\n      opacity: 0.5;\n    }\n\n  }\n\n\n  .ifx-multiselect-icon-container {\n    margin-left: auto;\n    align-items: center;\n    display: flex;\n  }\n\n\n  .ifx-clear-button {\n    margin-right: tokens.$ifxSpace100; // Space between clear button and icons\n    display: flex;\n  }\n\n  .ifx-multiselect-dropdown-menu {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    width: 100%;\n    margin-top: 2px;\n    background-color: #fff;\n    box-shadow: 0px 6px 9px 0px rgba(29, 29, 29, 0.10);\n    max-height: 300px;\n    /* Adjust based on your design */\n    overflow-y: auto;\n    z-index: var(--dynamic-z-index, 1); // Fallback to 1\n\n    .search-input {\n      // position: sticky;\n      // top: 0;\n      // z-index: 2;\n      width: 100%;\n      padding: 8px 16px;\n      font-size: tokens.$ifxFontSizeM;\n      line-height: tokens.$ifxLineHeightM;\n      font-style: normal;\n      font-weight: 400;\n      box-sizing: border-box;\n      background-color: tokens.$ifxColorBaseWhite;\n      border: none;\n      border-bottom: 1px solid tokens.$ifxColorEngineering400;\n\n      &:focus {\n        outline: none;\n        border: 1px solid tokens.$ifxColorOcean500;\n      }\n\n      // Optional: Placeholder style\n      &::placeholder {\n        color: #999;\n      }\n    }\n  }\n\n  .option {\n    position: relative;\n    padding: 8px 16px;\n    gap: 8px;\n    align-items: center;\n    display: flex;\n    font-style: normal;\n    font-weight: 400;\n\n    &.small-select {\n      font-size: tokens.$ifxFontSizeS;\n      line-height: tokens.$ifxLineHeightS;\n    }\n\n    &.medium-select {\n      font-size: tokens.$ifxFontSizeM;\n      line-height: tokens.$ifxLineHeightM;\n    }\n\n    &:hover {\n      background-color: tokens.$ifxColorEngineering200;\n    }\n\n    &:focus {\n      background-color: tokens.$ifxColorEngineering300;\n      outline: none;\n    }\n\n    &.is-highlighted {\n      background-color: tokens.$ifxColorEngineering200;\n      ;\n    }\n\n    &.selected {\n      // color: #0A8276;\n    }\n\n    &.sub-option {\n      padding-left: 30px;\n      /* or however much indentation you want */\n    }\n  }\n\n\n\n}\n\n.select-all-wrapper {\n  padding-top: 8px;\n}"],"names":["Multiselect","currentIndex","handleSearch","func","wait","timeout","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","later","debounce","targetElement","searchTerm","value","toLowerCase","this","filteredOptions","loadedOptions","filter","option","label","includes","handleDocumentClick","event","composedPath","dropdownElement","dropdownOpen","document","removeEventListener","ifxMultiselectIsOpen","emit","loadInitialOptions","isLoading","internalError","error","internalErrorMessage","errorMessage","fetchOptions","batchSize","fetchMoreOptions","moreOptions","handleScroll","element","target","halfwayPoint","Math","floor","scrollHeight","clientHeight","scrollTop","startIndex","count","allOptions","options","JSON","parse","err","console","isArray","optionCount","countOptions","slicedOptions","slice","initallyAndNotAdded","selected","init","persistentSelectedOptions","some","opt","children","componentDidLoad","positionDropdown","componentWillLoad","updateInternalError","updateInternalErrorMessage","loadedOptionsChanged","handleOptionClick","isSelectionLimitReached","checkboxRef","toggleCheckedState","updateSelection","ifxSelect","newOptionsLength","maxItemCount","selectedOption","wasSelected","handleParentOptionClick","handleChildOptionClick","selectAll","selectAllRecursive","every","child","forEach","newChildren","childOption","updateParentSelectedState","_a","isOptionIndeterminate","indeterminate","getSizeClass","concat","size","toggleDropdown","addEventListener","zIndex","globalZIndex","waitForElement","querySelectorFunc","callback","maxTries","undefined","tries","request","requestAnimationFrame","elements","handleKeyDown","disabled","querySelectorAll","code","selectItem","updateHighlightedOption","handleArrowDown","handleArrowUp","handleWrapperClick","currentTarget","clearSelection","wrapperRect","el","shadowRoot","querySelector","getBoundingClientRect","spaceBelow","window","innerHeight","bottom","top","height","dropdownFlipped","classList","remove","add","previouslySelected","currentOptionElement","currentOptionValue","getAttribute","currentListOfOptions","map","Object","assign","currentOption","findInOptions","renderOption","index","isIndeterminate","isSelected","isOptionSelected","disableCheckbox","uniqueId","h","class","onClick","tabindex","role","ref","id","htmlFor","e","stopPropagation","childIndex","renderSubOption","persistentOption","selectedChildren","foundInChildren","renderSelectAll","allSelected","noneSelected","that","render","selectedOptionsLabels","parentOption","join","onKeyDown","onScroll","style","toString","showSearch","type","onInput","placeholder","showSelectAll","icon","key"],"sourceRoot":""}