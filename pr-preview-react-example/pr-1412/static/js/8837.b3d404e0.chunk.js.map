{"version":3,"file":"static/js/8837.b3d404e0.chunk.js","mappings":"yKAAA,MCOaA,EAAW,M,0CACE,E,iCAEK,E,0BAK7BC,YAAAA,CAAaC,EAAkBC,GACzBD,IAAaC,IACfC,KAAKC,cAAgBH,E,CAIzBI,iBAAAA,GACEF,KAAKC,cAAgBD,KAAKG,K,CAG5BC,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,wDAAgB,iBAAgB,aAAaN,KAAKG,MAAQI,MAAO,gBAAgBP,KAAKQ,SACpFH,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,WAAWE,MAAO,CAAEC,MAAO,GAAGV,KAAKC,mBAC3CD,KAAKW,WAA2B,MAAdX,KAAKQ,MAAuC,IAAvBR,KAAKC,gBAAuBI,EAAAA,EAAAA,GAAA,QAAME,MAAM,SAAS,GAAGP,KAAKC,mB,gED7BpF,ymB","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/progress-bar/progress-bar.scss?tag=ifx-progress-bar&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/progress-bar/progress-bar.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n:host {\n  display: flex;\n  width: 100%;\n}\n\n.progress-bar {\n  height: tokens.$ifxSize200;\n  bottom: 0;\n  right: 0;\n  top: 0;\n  left: 0;\n  display: flex;\n  height: tokens.$ifxSize250;\n  border-radius: tokens.$ifxBorderRadius12;\n  width: 100%; // Ensure the bar itself can grow up to 100% width\n  overflow: hidden; // Ensures that the inner progress bar doesn't exceed the width of the outer progress bar\n  background-color: tokens.$ifxColorEngineering200;\n  font-family: var(--ifx-font-family, sans-serif);\n  \n  &.s {\n    height: 4px;\n  }\n\n  .label {\n    font-style: normal;\n    font-size: tokens.$ifxFontSizeS;\n    font-weight: 400;\n    line-height: tokens.$ifxLineHeightS;\n    color: tokens.$ifxColorBaseWhite;\n  }\n  \n  .progress {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    min-width: fit-content;\n    height: 100%;\n    background-color: #0A8276;\n    transition: width 0.2s ease;\n  }\n}","import { Component, Prop, h, State, Watch } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-progress-bar',\n  styleUrl: 'progress-bar.scss',\n  shadow: true\n})\nexport class ProgressBar {\n  @Prop() value: number = 0;\n  @Prop() size: string;\n  @Prop() showLabel: boolean = false;\n\n  @State() internalValue: number;\n\n  @Watch('value')\n  valueChanged(newValue: number, oldValue: number) {\n    if (newValue !== oldValue) {\n      this.internalValue = newValue;\n    }\n  }\n\n  componentWillLoad() {\n    this.internalValue = this.value;\n  }\n\n  render() {\n    return (\n      <div aria-label='a progress bar' aria-value={this.value}  class={`progress-bar ${this.size}`}>\n        <div class=\"progress\" style={{ width: `${this.internalValue}%` }}>\n          {this.showLabel && this.size !== \"s\" && this.internalValue !== 0 && <span class=\"label\">{`${this.internalValue}%`}</span>}\n        </div>\n      </div>\n    );\n  }\n}\n"],"names":["ProgressBar","valueChanged","newValue","oldValue","this","internalValue","componentWillLoad","value","render","h","key","class","size","style","width","showLabel"],"sourceRoot":""}