{"version":3,"file":"static/js/5284.f39ce09b.chunk.js","mappings":"4MAOaA,EAAS,W,kGACE,E,SACA,I,WACE,E,eACI,E,qBACM,E,yGAKD,C,4CAMjC,SAAaC,GACXC,KAAKC,cAAgBF,EACrBC,KAAKE,oB,GACN,CAAAC,IAAA,oBAAAC,MAED,SAAkBC,GAChB,IAAMC,EAASD,EAAMC,OACrBN,KAAKC,cAAgBM,SAASD,EAAOF,OACrCJ,KAAKQ,UAAUC,KAAKT,KAAKC,eACzBD,KAAKE,oB,GACN,CAAAC,IAAA,qBAAAC,MAED,WACE,GAAIJ,KAAKU,SAAU,CACjB,IAAMC,GAAYX,KAAKC,cAAgBD,KAAKY,MAAQZ,KAAKa,IAAMb,KAAKY,KAAQ,IAC5EZ,KAAKU,SAASI,MAAMC,YAAY,kBAAmB,GAAFC,OAAKL,EAAO,K,IAEhE,CAAAR,IAAA,oBAAAC,MAED,WACEJ,KAAKC,cAAgBD,KAAKI,K,GAC3B,CAAAD,IAAA,mBAAAC,MAED,WACEJ,KAAKE,oB,GACN,CAAAC,IAAA,SAAAC,MAGD,WAAM,IAAAa,EAAA,KACJ,OACEC,EAAAA,EAAAA,GAAA,OAAKC,MAAM,cACRnB,KAAKoB,WACJF,EAAAA,EAAAA,GAAA,QAAMC,MAAK,aACRnB,KAAKoB,UAGTpB,KAAKqB,WACJH,EAAAA,EAAAA,GAAA,YAAUI,KAAMtB,KAAKqB,SAAUF,MAAK,YAAAH,OAAchB,KAAKuB,SAAW,YAAc,OAGlFL,EAAAA,EAAAA,GAAA,SACEM,KAAK,QACLZ,IAAKZ,KAAKY,IACVC,IAAKb,KAAKa,IACVU,SAAUvB,KAAKuB,SACfnB,MAAOJ,KAAKC,cACZwB,IAAK,SAACC,GAAE,OAAMT,EAAKP,SAAWgB,CAAsB,EACpDC,QAAS,SAACtB,GAAK,OAAKY,EAAKW,kBAAkBvB,EAAM,IAElDL,KAAK6B,YACJX,EAAAA,EAAAA,GAAA,YAAUI,KAAMtB,KAAK6B,UAAWV,MAAK,aAAAH,OAAehB,KAAKuB,SAAW,YAAc,MAEnFvB,KAAK8B,YACJZ,EAAAA,EAAAA,GAAA,QAAMC,MAAK,aAAAH,OAAehB,KAAKuB,SAAW,YAAc,KACrDvB,KAAK8B,WAIT9B,KAAK+B,iBACJb,EAAAA,EAAAA,GAAA,QACEC,MAAK,qBAAAH,OAAuBhB,KAAKuB,SAAW,YAAc,KAEzDvB,KAAKI,MAAK,K,IAKpB,EAAAD,IAAA,WAAA6B,IAAA,W,qCAnFmB,G,QCPJ,gnD","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/slider/slider.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/slider/slider.scss?tag=ifx-slider&encapsulation=shadow"],"sourcesContent":["import { Component, h, Prop, Event, EventEmitter, State, Watch } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-slider',\n  styleUrl: 'slider.scss',\n  shadow: true,\n})\nexport class IfxSlider {\n  @Prop() min: number = 0;\n  @Prop() max: number = 100;\n  @Prop() value: number = 0;\n  @Prop() disabled: boolean = false;\n  @Prop() showPercentage: boolean = false;\n  @Prop() leftIcon: string;\n  @Prop() rightIcon: string;\n  @Prop() leftText: string;\n  @Prop() rightText: string;\n  @State() internalValue: number = 0;\n  @Event() ifxChange: EventEmitter<number>;\n\n  private inputRef: HTMLInputElement;\n\n  @Watch('value')\n  valueChanged(newValue: number) {\n    this.internalValue = newValue;\n    this.updateValuePercent();\n  }\n\n  handleInputChange(event: Event) {\n    const target = event.target as HTMLInputElement;\n    this.internalValue = parseInt(target.value);\n    this.ifxChange.emit(this.internalValue);\n    this.updateValuePercent();\n  }\n\n  updateValuePercent() {\n    if (this.inputRef) {\n      const percent = ((this.internalValue - this.min) / (this.max - this.min)) * 100;\n      this.inputRef.style.setProperty('--value-percent', `${percent}%`);\n    }\n  }\n\n  componentWillLoad() {\n    this.internalValue = this.value;\n  }\n\n  componentDidLoad() {\n    this.updateValuePercent();\n  }\n\n\n  render() {\n    return (\n      <div class=\"ifx-slider\">\n        {this.leftText && (\n          <span class={`left-text`}>\n            {this.leftText}\n          </span>\n        )}\n        {this.leftIcon && (\n          <ifx-icon icon={this.leftIcon} class={`left-icon${this.disabled ? ' disabled' : ''}`} />\n        )}\n\n        <input\n          type=\"range\"\n          min={this.min}\n          max={this.max}\n          disabled={this.disabled}\n          value={this.internalValue}\n          ref={(el) => (this.inputRef = el as HTMLInputElement)}\n          onInput={(event) => this.handleInputChange(event)}\n        />\n        {this.rightIcon && (\n          <ifx-icon icon={this.rightIcon} class={`right-icon${this.disabled ? ' disabled' : ''}`} />\n        )}\n        {this.rightText && (\n          <span class={`right-text${this.disabled ? ' disabled' : ''}`}>\n            {this.rightText}\n          </span>\n        )}\n\n        {this.showPercentage && (\n          <span\n            class={`percentage-display${this.disabled ? ' disabled' : ''}`}\n          >\n            {this.value}%\n          </span>\n        )}\n      </div>\n    );\n  }\n}\n","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n\n// ifx-slider.scss\n:host {\n  display: inline-block;\n}\n\n.left-icon,\n.right-icon,\n.left-text,\n.right-text,\n.percentage-display {\n  font-size: tokens.$ifxFontSizeS;\n  color: tokens.$ifxColorEngineering500;\n  margin-left: tokens.$ifxSpace100;\n\n  &.disabled {\n    // Add the disabled state for the percentage display\n    color: tokens.$ifxColorEngineering300;\n  }\n}\n\n.left-icon,\n.left-text {\n  margin-right: tokens.$ifxSpace100;\n}\n\n.right-icon,\n.right-text,\n.percentage-display {\n  margin-left: tokens.$ifxSpace100;\n}\n\n.ifx-slider {\n  display: flex;\n  align-items: center;\n  padding: tokens.$ifxSpace25 tokens.$ifxSpace200;\n  border-radius: tokens.$ifxBorderRadiusRound;\n\n  input[type='range'] {\n    -webkit-appearance: none;\n    width: 100%;\n    height: 3px;\n    background: linear-gradient(to right, tokens.$ifxColorOcean500 0%, tokens.$ifxColorOcean500 var(--value-percent, 0%), tokens.$ifxColorEngineering200 var(--value-percent, 0%), tokens.$ifxColorEngineering200 100%);\n    outline: none;\n    cursor: pointer;\n    transition: 0.2s;\n\n    &:disabled {\n      background: tokens.$ifxColorEngineering300;\n      cursor: default;\n    }\n\n    &::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      appearance: none;\n      width: tokens.$ifxSize250;\n      height: tokens.$ifxSize250;\n      border-radius: 50%;\n      background: tokens.$ifxColorOcean500;\n      cursor: pointer;\n      box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.2);\n\n      &:hover {\n        box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.4);\n        background: tokens.$ifxColorOcean600;\n      }\n\n      &:active {\n        box-shadow: 0px 1px 6px rgba(0, 0, 0, 0.6);\n        background: tokens.$ifxColorOcean700;\n      }\n    }\n\n    &::-moz-range-thumb {\n      width: tokens.$ifxSize250;\n      height: tokens.$ifxSize250;\n      border-radius: 50%;\n      background: tokens.$ifxColorOcean500;\n      cursor: pointer;\n      box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.2);\n\n      &:hover {\n        box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.4);\n        background: tokens.$ifxColorOcean600;\n      }\n\n      &:active {\n        box-shadow: 0px 1px 6px rgba(0, 0, 0, 0.6);\n        background: tokens.$ifxColorOcean700;\n      }\n    }\n  }\n}"],"names":["IfxSlider","newValue","this","internalValue","updateValuePercent","key","value","event","target","parseInt","ifxChange","emit","inputRef","percent","min","max","style","setProperty","concat","_this","h","class","leftText","leftIcon","icon","disabled","type","ref","el","onInput","handleInputChange","rightIcon","rightText","showPercentage","get"],"sourceRoot":""}