{"version":3,"file":"static/js/8837.9a60db6a.chunk.js","mappings":"mLAAA,MCQaA,EAAW,M,0CACE,E,iCAEK,E,0BAK7BC,YAAAA,CAAaC,EAAkBC,GACzBD,IAAaC,IACfC,KAAKC,cAAgBH,E,CAKzBI,iBAAAA,GACEF,KAAKC,cAAgBD,KAAKG,K,CAG5BC,gBAAAA,IACEC,EAAAA,EAAAA,GAAmB,c,CAGrBC,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,wDAAgB,iBAAgB,aAAaR,KAAKG,MAAQM,MAAO,gBAAgBT,KAAKU,SACpFH,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,WAAWE,MAAO,CAAEC,MAAO,GAAGZ,KAAKC,mBAC3CD,KAAKa,WAA2B,MAAdb,KAAKU,MAAuC,IAAvBV,KAAKC,gBAAuBM,EAAAA,EAAAA,GAAA,QAAME,MAAM,SAAS,GAAGT,KAAKC,mB,gEDnCpF,ymB,kCECvB,MAAMa,EAA2B,G,SAgBjBT,EAAmBU,GAC5BD,EAAeE,SAASD,IAC3BD,EAAeG,KAAKF,EAExB,CAIAG,aArBA,WACE,GAAIJ,EAAeK,OAAS,EAAG,CAC7B,MAAMC,EAAmB,IAAIN,GAC7BA,EAAeK,OAAS,EAEpBE,OAAOC,KACTD,OAAOC,KAAKL,KAAK,CAAC,aAAc,YAAa,OAAQG,EAAiBG,KAAK,QAE3EC,QAAQC,MAAM,mC,CAGpB,GAbuB,I","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/progress-bar/progress-bar.scss?tag=ifx-progress-bar&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/progress-bar/progress-bar.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/global/utils/tracking.ts"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n:host {\n  display: flex;\n  width: 100%;\n}\n\n.progress-bar {\n  height: tokens.$ifxSize200;\n  bottom: 0;\n  right: 0;\n  top: 0;\n  left: 0;\n  display: flex;\n  height: tokens.$ifxSize250;\n  border-radius: tokens.$ifxBorderRadius12;\n  width: 100%; // Ensure the bar itself can grow up to 100% width\n  overflow: hidden; // Ensures that the inner progress bar doesn't exceed the width of the outer progress bar\n  background-color: tokens.$ifxColorEngineering200;\n  font-family: var(--ifx-font-family, sans-serif);\n  \n  &.s {\n    height: 4px;\n  }\n\n  .label {\n    font-style: normal;\n    font-size: tokens.$ifxFontSizeS;\n    font-weight: 400;\n    line-height: tokens.$ifxLineHeightS;\n    color: tokens.$ifxColorBaseWhite;\n  }\n  \n  .progress {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    min-width: fit-content;\n    height: 100%;\n    background-color: #0A8276;\n    transition: width 0.2s ease;\n  }\n}","import { Component, Prop, h, State, Watch } from '@stencil/core';\nimport { trackComponentView } from '../../global/utils/tracking';\n\n@Component({\n  tag: 'ifx-progress-bar',\n  styleUrl: 'progress-bar.scss',\n  shadow: true\n})\nexport class ProgressBar {\n  @Prop() value: number = 0;\n  @Prop() size: string;\n  @Prop() showLabel: boolean = false;\n\n  @State() internalValue: number;\n\n  @Watch('value')\n  valueChanged(newValue: number, oldValue: number) {\n    if (newValue !== oldValue) {\n      this.internalValue = newValue;\n    }\n  }\n\n  \n  componentWillLoad() {\n    this.internalValue = this.value;\n  }\n\n  componentDidLoad() {\n    trackComponentView('ProgressBar');\n  }\n\n  render() {\n    return (\n      <div aria-label='a progress bar' aria-value={this.value}  class={`progress-bar ${this.size}`}>\n        <div class=\"progress\" style={{ width: `${this.internalValue}%` }}>\n          {this.showLabel && this.size !== \"s\" && this.internalValue !== 0 && <span class=\"label\">{`${this.internalValue}%`}</span>}\n        </div>\n      </div>\n    );\n  }\n}\n","// global/utils/tracking.ts\nconst componentQueue: string[] = [];\nconst BATCH_INTERVAL = 5000; // 5 seconds\n\nfunction sendBatch() {\n  if (componentQueue.length > 0) {\n    const componentsToSend = [...componentQueue];\n    componentQueue.length = 0; // Clear the queue\n\n    if (window._paq) {\n      window._paq.push(['trackEvent', 'Component', 'View', componentsToSend.join(', ')]);\n    } else {\n      console.error(\"Matomo _paq array is not defined\");\n    }\n  }\n}\n\nexport function trackComponentView(componentName: string) {\n  if (!componentQueue.includes(componentName)) {\n    componentQueue.push(componentName);\n  }\n}\n\n\n// Set an interval to send the batch every BATCH_INTERVAL milliseconds\nsetInterval(sendBatch, BATCH_INTERVAL);"],"names":["ProgressBar","valueChanged","newValue","oldValue","this","internalValue","componentWillLoad","value","componentDidLoad","trackComponentView","render","h","key","class","size","style","width","showLabel","componentQueue","componentName","includes","push","setInterval","length","componentsToSend","window","_paq","join","console","error"],"sourceRoot":""}