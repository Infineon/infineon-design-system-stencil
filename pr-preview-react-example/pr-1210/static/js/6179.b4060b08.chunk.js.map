{"version":3,"file":"static/js/6179.b4060b08.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/slider/slider.scss?tag=ifx-slider&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/slider/slider.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n\n// ifx-slider.scss\n:host {\n  display: inline-block;\n}\n\n.left-icon,\n.right-icon,\n.left-text,\n.right-text,\n.percentage-display {\n  font-size: tokens.$ifxFontSizeS;\n  color: tokens.$ifxColorEngineering500;\n  margin-left: tokens.$ifxSpace100;\n\n  &.disabled {\n    // Add the disabled state for the percentage display\n    color: tokens.$ifxColorEngineering300;\n  }\n}\n\n.left-icon,\n.left-text {\n  margin-right: tokens.$ifxSpace100;\n}\n\n.right-icon,\n.right-text,\n.percentage-display {\n  margin-left: tokens.$ifxSpace100;\n}\n\n\n.ifx-slider {\n  display: flex;\n  align-items: center;\n  padding: tokens.$ifxSpace25 tokens.$ifxSpace200;\n  border-radius: tokens.$ifxBorderRadiusRound;\n\n  input[type='range'] {\n    -webkit-appearance: none;\n    width: 100%;\n    height: 4px;\n    background: linear-gradient(to right, tokens.$ifxColorOcean500 0%, tokens.$ifxColorOcean500 var(--value-percent, 0%), tokens.$ifxColorEngineering200 var(--value-percent, 0%), tokens.$ifxColorEngineering200 100%);\n    outline: none;\n    cursor: pointer;\n    transition: 0.2s;\n\n    &::-moz-range-thumb {\n      width: tokens.$ifxSize250;\n      height: tokens.$ifxSize250;\n      border-radius: 50%;\n      background: tokens.$ifxColorOcean500;\n      cursor: pointer;\n      box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.2);\n    }\n    \n\n    &:not(:disabled)::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      width: 16px;\n      height: 16px;\n      background: tokens.$ifxColorOcean500;\n      border-radius: 50%;\n      cursor: pointer;\n      transition: box-shadow 0.2s;\n\n      &:hover {\n        background: tokens.$ifxColorOcean600;\n      }\n\n      &:active {\n        background: tokens.$ifxColorOcean700;\n      }\n    }\n  }\n\n  input[type='range']:disabled {\n    background: tokens.$ifxColorEngineering300;\n    cursor: default;\n  }\n\n  input[type='range']:disabled::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    width: 16px;\n    height: 16px;\n    background: tokens.$ifxColorEngineering300;\n    border-radius: 50%;\n    cursor: default;\n  }\n  \n  & .range-slider__wrapper {\n    position: relative;\n    width: 129px;\n    height: 4px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0px 2px;\n    \n    background: linear-gradient(to right, tokens.$ifxColorEngineering200 0%, tokens.$ifxColorEngineering200 var(--min-value-percent, 100%), tokens.$ifxColorOcean500 var(--min-value-percent, 100%), tokens.$ifxColorOcean500 var(--max-value-percent, 100%), tokens.$ifxColorEngineering200 var(--max-value-percent, 100%), tokens.$ifxColorEngineering200 100%);\n\n    &:has(input[type='range']:disabled) {\n      background: tokens.$ifxColorEngineering300;\n    }\n\n    \n    @mixin thumb() {\n      -webkit-appearance: none;\n      border: none; \n      pointer-events: auto;\n      cursor: pointer;\n      box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.2);\n    }\n    \n    @mixin track() {\n      -webkit-appearance: none;\n      border: none;\n      background: none; \n      width: 100%;\n    }\n\n    input[type='range'] {\n      position: absolute;\n      pointer-events: none; \n      background: none;\n\n      &::-webkit-slider-thumb { @include thumb; }\n      &::-moz-range-thumb { @include thumb; }\n      &::-ms-thumb { @include thumb; }\n\n      &::-webkit-slider-runnable-track { @include track; }\n      &::-moz-range-track { @include track; }\n    }\n  }\n  \n}\n","import { Component, h, Prop, Event, EventEmitter, State, Watch, Element } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-slider',\n  styleUrl: 'slider.scss',\n  shadow: true,\n})\nexport class IfxSlider {\n  @Prop() min: number = 0;\n  @Prop() max: number = 100;\n  @Prop() value: number;\n  @Prop() minValueHandle: number;\n  @Prop() maxValueHandle: number;\n  @Prop() disabled: boolean = false;\n  @Prop() showPercentage: boolean = false;\n  @Prop() leftIcon: string;\n  @Prop() rightIcon: string;\n  @Prop() leftText: string;\n  @Prop() rightText: string;\n  @Prop() type: 'single' | 'double' = 'single';\n  @State() internalValue: number = 0;\n  @State() percentage: number = 0;\n  @State() internalMinValue: number = 0;\n  @State() internalMaxValue: number = 100;\n  @Event() ifxChange: EventEmitter;\n\n  @Element() el;\n\n  private inputRef: HTMLInputElement;\n  private minInputRef: HTMLInputElement;\n  private maxInputRef: HTMLInputElement;\n                                             \n  @Watch('value')\n  valueChanged(newValue: number) {\n    this.internalValue = newValue;\n    this.updateValuePercent();\n  }\n\n  @Watch('minValueHandle')\n  minValueChanged(newValue: number) {\n    this.internalMinValue = newValue;\n    this.updateValuePercent();\n  }\n  \n  @Watch('maxValueHandle')\n  maxValueChanged(newValue: number) {\n    this.internalMaxValue = newValue;\n    this.updateValuePercent();\n  }\n\n  getRangeSliderWrapper() {\n    const rangeSliderWrapper = this.el.shadowRoot.querySelector('.range-slider__wrapper');\n    return rangeSliderWrapper;\n  }\n\n  handleInputChangeOfRangeSlider(event: Event) {\n    const target = event.target as HTMLInputElement;\n    if(parseInt(this.maxInputRef.value) - parseInt(this.minInputRef.value) <= 0) {\n      if(target.id === 'max-slider') {\n        this.maxInputRef.value = this.minInputRef.value;\n      }else{\n        this.minInputRef.value = this.maxInputRef.value;\n      }\n    }\n    if(target.id === 'max-slider') {\n      this.internalMaxValue = parseInt(this.maxInputRef.value);\n    } else {\n      this.internalMinValue = parseInt(this.minInputRef.value);\n    }\n    this.ifxChange.emit({minVal: this.internalMinValue, maxVal: this.internalMaxValue});\n    this.updateValuePercent();\n  }\n  \n  handleOnMouseLeaveOfRangeSlider(event: Event) {\n    const target = event.target as HTMLInputElement;\n    const sliderWrapper = this.getRangeSliderWrapper();\n    if(target.id === 'max-slider') {\n      sliderWrapper.insertBefore(this.maxInputRef, this.minInputRef);\n    } else {\n      sliderWrapper.insertBefore(this.minInputRef, this.maxInputRef);\n    }\n  }\n\n  calculatePercentageValue() {\n    const num = (this.internalValue - this.min) * 1.0;\n    const den = this.max - this.min;\n    this.percentage = +parseFloat(String((num/den)*100)).toFixed(2);\n  }\n\n  handleInputChange(event: Event) {\n    const target = event.target as HTMLInputElement;\n    this.internalValue = parseInt(target.value);\n    this.ifxChange.emit(this.internalValue);\n    this.calculatePercentageValue();\n    this.updateValuePercent();\n  }\n\n  updateValuePercent() {\n    if(this.type === 'double'){\n      if (this.minInputRef) {\n        const minPercent = ((this.internalMinValue - this.min) / (this.max - this.min)) * 100;\n        this.minInputRef.parentElement.style.setProperty('--min-value-percent', `${minPercent}%`);\n      }\n\n      if (this.maxInputRef) {\n        const maxPercent = ((this.internalMaxValue - this.min) / (this.max - this.min)) * 100;\n        this.maxInputRef.parentElement.style.setProperty('--max-value-percent', `${maxPercent}%`);\n      }\n\n    } else {\n\n      if (this.inputRef) {\n        this.inputRef.style.setProperty('--value-percent', `${this.percentage}%`);\n      }\n\n    }\n  }\n\n  componentWillLoad() {\n    if(this.value === undefined) {\n      this.internalValue = (this.max-this.min) / 2;\n    } else {\n      this.internalValue = Math.max(this.min, Math.min(this.max, this.value));\n    }\n\n    this.calculatePercentageValue();\n\n    if(this.minValueHandle !== undefined) this.internalMinValue = this.minValueHandle;\n    else this.internalMinValue = this.min;\n    if(this.maxValueHandle !== undefined) this.internalMaxValue = this.maxValueHandle;\n    else this.internalMaxValue = this.max;\n  }\n\n  componentDidLoad() {\n    this.updateValuePercent();\n  }\n\n\n  render() {\n    return (\n      <div class=\"ifx-slider\">\n        {this.leftText && (\n          <span class={`left-text`}>\n            {this.leftText}\n          </span>\n        )}\n        {this.leftIcon && (\n          <ifx-icon icon={this.leftIcon} class={`left-icon${this.disabled ? ' disabled' : ''}`} />\n        )}\n        {\n          (this.type !== 'double') ?\n            <input\n              type=\"range\"\n              min={this.min}\n              max={this.max}\n              disabled={this.disabled}\n              value={this.internalValue}\n              ref={(el) => (this.inputRef = el as HTMLInputElement)}\n              onInput={(event) => this.handleInputChange(event)}\n              aria-label='a slider'\n              aria-value={this.value}\n              aria-disabled={this.disabled}\n              /> \n              :\n            <div class = 'range-slider__wrapper' aria-label='a range slider' aria-value={this.value} aria-disabled={this.disabled} >\n\n              <input \n                id='min-slider'\n                type='range'\n                min={this.min}\n                max={this.max}\n                value={this.internalMinValue}\n                disabled={this.disabled}\n                ref={(el) => (this.minInputRef = el as HTMLInputElement)}\n                onInput={(event) => this.handleInputChangeOfRangeSlider(event)}\n                onMouseUp={(event) => this.handleOnMouseLeaveOfRangeSlider(event)}\n              />\n              <input \n                id='max-slider'\n                type='range'\n                min={this.min}\n                max={this.max}\n                value={this.internalMaxValue}\n                disabled={this.disabled}\n                ref={(el) => (this.maxInputRef = el as HTMLInputElement)}\n                onInput={(event) => this.handleInputChangeOfRangeSlider(event)}\n                onMouseUp={(event) => this.handleOnMouseLeaveOfRangeSlider(event)}\n              />\n\n            </div>\n        }\n        {this.rightIcon && (\n          <ifx-icon icon={this.rightIcon} class={`right-icon${this.disabled ? ' disabled' : ''}`} />\n        )}\n        {this.rightText && (\n          <span class={`right-text${this.disabled ? ' disabled' : ''}`}>\n            {this.rightText}\n          </span>\n        )}\n\n        {this.showPercentage && (this.type !== \"double\") && (\n          <span\n            class={`percentage-display${this.disabled ? ' disabled' : ''}`}\n          >\n            {this.percentage}%\n          </span>\n        )}\n      </div>\n    );\n  }\n}"],"names":["IfxSlider","valueChanged","newValue","this","internalValue","updateValuePercent","minValueChanged","internalMinValue","maxValueChanged","internalMaxValue","getRangeSliderWrapper","el","shadowRoot","querySelector","handleInputChangeOfRangeSlider","event","target","parseInt","maxInputRef","value","minInputRef","id","ifxChange","emit","minVal","maxVal","handleOnMouseLeaveOfRangeSlider","sliderWrapper","insertBefore","calculatePercentageValue","num","min","den","max","percentage","parseFloat","String","toFixed","handleInputChange","type","minPercent","parentElement","style","setProperty","concat","maxPercent","inputRef","componentWillLoad","undefined","Math","minValueHandle","maxValueHandle","componentDidLoad","render","h","key","class","leftText","leftIcon","icon","disabled","ref","onInput","onMouseUp","rightIcon","rightText","showPercentage"],"sourceRoot":""}