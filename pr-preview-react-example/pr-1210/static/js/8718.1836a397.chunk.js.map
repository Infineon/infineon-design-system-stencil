{"version":3,"file":"static/js/8718.1836a397.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/list/list.scss?tag=ifx-list&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/list/list.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n\n.link-wrapper {\n  display: flex;\n  align-items: center;\n  gap: tokens.$ifxSpace100;\n  margin-top: tokens.$ifxSpace100;\n}","import { Component, h, Prop, State, Event, EventEmitter, Element, Watch } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-list',\n  styleUrl: 'list.scss',\n  shadow: true,\n})\nexport class List {\n  @Element() private el: HTMLElement;\n  @State() expanded: boolean = false;\n  @State() showMore = false;\n  @State() selectedCount: number = 0;\n  @State() totalItems = 0;\n  @Prop() name = \"\";\n  @Prop() maxVisibleItems = 6;\n  @Prop() type: string;\n\n  @Event() ifxListUpdate: EventEmitter;\n\n  observer: MutationObserver;\n\n  @Watch('type')\n  handleTypeChange(newType: string) {\n    const listEntries = Array.from(this.el.querySelectorAll('ifx-list-entry'));\n    listEntries.forEach(entry => entry.setAttribute('type', newType));\n  }\n\n\n  componentWillLoad() {\n    this.el.addEventListener('ifxListEntryChange', this.handleCheckedChange);\n    this.selectedCount = this.getSelectedItems(this.el).length;\n    this.totalItems = this.getTotalItems();\n\n    this.handleTypeChange(this.type);\n\n    // If the list type is 'radio-button' and more than one item is preselected, deselect all items\n    if (this.type === 'radio-button' && this.selectedCount > 1) {\n      const selectedItems = this.getSelectedItems(this.el);\n      // Keep the first one selected and deselect the others\n      selectedItems.slice(1).forEach(item => item.element.setAttribute('value', 'false'));\n      // Or deselect all items\n      // selectedItems.forEach(item => item.element.setAttribute('value', 'false'));\n      this.selectedCount = this.getSelectedItems(this.el).length;\n    }\n    this.observer = new MutationObserver(() => {\n      const newTotalItems = this.getTotalItems();\n      if (newTotalItems !== this.totalItems) {\n        this.totalItems = newTotalItems;\n        this.handleCheckedChange();\n      }\n      this.handleTypeChange(this.type);\n\n    });\n\n    this.observer.observe(this.el, { childList: true });\n  }\n\n\n  disconnectedCallback() {\n    this.el.removeEventListener('ifxListEntryChange', this.handleCheckedChange);\n    this.observer.disconnect();\n  }\n\n  getTotalItems() {\n    return this.el.querySelectorAll('ifx-list-entry').length;\n  }\n\n\n  toggleList = (event: MouseEvent) => {\n    event.stopPropagation();\n    this.expanded = !this.expanded;\n  }\n\n  toggleShowMore = (event: MouseEvent) => {\n    event.stopPropagation();\n    this.showMore = !this.showMore;\n  }\n\n  getSelectedItems(el: HTMLElement) {\n    return Array.from(el.querySelectorAll('ifx-list-entry'))\n      .filter(entry => entry.getAttribute('value') === 'true')\n      .map(entry => ({\n        label: entry.getAttribute('label'),\n        value: entry.getAttribute('value'),\n        element: entry\n      }));\n  }\n\n  handleCheckedChange = (event?: CustomEvent) => {\n    // If the type of the changed entry is 'radio-button' and its value is true, deselect all other radio buttons\n    if (event && event.detail.type === 'radio-button' && event.detail.value) {\n      const otherRadioButtons = Array.from(this.el.querySelectorAll('ifx-list-entry'))\n        .filter(entry => entry.getAttribute('type') === 'radio-button' && entry !== event.target);\n      otherRadioButtons.forEach(radioButton => radioButton.setAttribute('value', 'false'));\n    }\n\n    const selectedItems = this.getSelectedItems(this.el);\n    this.selectedCount = selectedItems.length;\n\n    this.ifxListUpdate.emit({ name: this.name, selectedItems });\n  }\n\n  render() {\n    const listEntries = Array.from(this.el.querySelectorAll('ifx-list-entry'));\n    const visibleItems = this.showMore ? listEntries : listEntries.slice(0, this.maxVisibleItems);\n    const remainingItems = listEntries.length - visibleItems.length;\n \n    return (\n      <div class=\"list-wrapper\">\n        {visibleItems.map(entry => <slot name={entry.getAttribute('slot')}></slot>)}\n        {(remainingItems > 0 || this.showMore) && (\n          <div class=\"link-wrapper\" onClick={this.toggleShowMore}>\n            <ifx-icon key={this.showMore.toString()} icon={this.showMore ? 'chevron-up-12' : 'chevron-down-12'} />\n            <ifx-link size=\"s\" href=\"\" target=\"_blank\" variant=\"underlined\" disabled={false} >\n              {this.showMore ? 'Show less' : `Show ${remainingItems} more`}\n            </ifx-link>\n          </div>\n        )}\n      </div>\n    );\n  }\n}"],"names":["List","toggleList","event","stopPropagation","this","expanded","toggleShowMore","showMore","handleCheckedChange","detail","type","value","Array","from","el","querySelectorAll","filter","entry","getAttribute","target","forEach","radioButton","setAttribute","selectedItems","getSelectedItems","selectedCount","length","ifxListUpdate","emit","name","handleTypeChange","newType","componentWillLoad","addEventListener","totalItems","getTotalItems","slice","item","element","observer","MutationObserver","newTotalItems","observe","childList","disconnectedCallback","removeEventListener","disconnect","map","label","render","listEntries","visibleItems","maxVisibleItems","remainingItems","h","key","class","onClick","toString","icon","size","href","variant","disabled","concat"],"sourceRoot":""}