{"version":3,"file":"static/js/1611.662be309.chunk.js","mappings":"6KAAA,MCQaA,EAAe,M,wGAqB1B,KAAAC,oBAAuBC,IACrB,MAAMC,EAAgBD,EAAME,OAAOD,cACnCE,KAAKC,MAAQH,EAAcI,OAC3BF,KAAKG,yBAAyBC,KAAK,CAAEC,gBAAiBL,KAAKK,gBAAiBP,iBAAgB,EAO9F,KAAAQ,gBAAmBT,IACjBA,EAAMU,kBACNP,KAAKQ,UAAYR,KAAKQ,QAAQ,E,eA/BH,E,uCAEJ,E,gBACH,E,qBAEI,E,CAI1BC,iBAAAA,GACET,KAAKU,GAAGC,iBAAiB,gBAAiBX,KAAKJ,oB,CAGjDgB,mBAAAA,GACE,MAAMd,GCvBgCY,EDuBUV,KAAKU,GCtBhDG,MAAMC,KAAKJ,EAAGK,iBAAiB,mBACnCC,QAAOC,GAAyC,SAAhCA,EAAMC,aAAa,WACnCC,KAAIF,IAAS,CACZG,MAAOH,EAAMC,aAAa,SAC1BG,MAAOJ,EAAMC,aAAa,c,IALUR,EDwBtCV,KAAKC,MAAQH,EAAcI,M,CAU7BoB,mBAAAA,GACEtB,KAAKU,GAAGa,oBAAoB,gBAAiBvB,KAAKJ,oB,CAQpD4B,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAK,aAAAC,OAAe5B,KAAKQ,SAAW,WAAa,MACpDiB,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,SAASE,QAAS7B,KAAKM,kBAChCmB,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAK,iBAAAC,OAAmB5B,KAAKQ,SAAW,WAAa,MACxDiB,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,SACTF,EAAAA,EAAAA,GAAA,QAAAC,IAAA,4CAAO1B,KAAKK,kBACZoB,EAAAA,EAAAA,GAAA,wBAAAC,IAAA,4CAAuB1B,KAAKC,SAE9BwB,EAAAA,EAAAA,GAAA,YAAAC,IAAA,2CACEC,MAAO3B,KAAKQ,SAAW,GAAK,SAC5BsB,KAAK,WACLD,QAAS7B,KAAKM,mBAEhBmB,EAAAA,EAAAA,GAAA,YAAAC,IAAA,2CACEC,MAAO3B,KAAKQ,SAAW,SAAW,GAClCsB,KAAK,UACLD,QAAS7B,KAAKM,oBAInBN,KAAKQ,WACJiB,EAAAA,EAAAA,GAAA,OAAKE,MAAM,+BACTF,EAAAA,EAAAA,GAAA,QAAMM,KAAK,U,wCDnEI,s2B","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/filter-type-group/filter-accordion/filter-accordion.scss?tag=ifx-filter-accordion&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/filter-type-group/filter-accordion/filter-accordion.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/filter-type-group/utils.ts"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n\n\n.header {\n  display: flex;\n  align-items: flex-start;\n  align-self: stretch;\n  cursor: pointer;\n  border-left: 3px solid transparent;\n}\n\n.text-and-icon {\n  display: flex;\n  padding: tokens.$ifxSpace150 tokens.$ifxSpace200 tokens.$ifxSpace150 tokens.$ifxSpace250;\n  align-items: center;\n  gap: tokens.$ifxSpace200;\n  flex: 1 0 0;\n  border-bottom: 1px solid tokens.$ifxColorEngineering200;\n\n  &.expanded {\n    border-bottom: none;\n  }\n}\n\n.header.expanded {\n  border-left: 3px solid tokens.$ifxColorOcean500;\n}\n\n.text {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  flex: 1 0 0;\n  color: tokens.$ifxColorBaseBlack;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 24px;\n}\n\n.hidden {\n  display: none;\n}\n\n.filter-accordion-container {\n  display: flex;\n  padding: 8px 16px 16px 20px;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 12px;\n  align-self: stretch;\n  border-left: 3px solid tokens.$ifxColorOcean500;\n}\n\n::slotted(ifx-filter-entry:nth-child(n+7)) {\n  display: none;\n}\n\n.link {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.show-more ::slotted(ifx-filter-entry:nth-child(n+7)) {\n  display: block;\n}\n\n.show-more .show-more-link {\n  display: none;\n}","import { Component, h, Prop, State, Event, EventEmitter, Element } from '@stencil/core';\nimport { getInitiallySelectedItems } from '../utils';\n\n@Component({\n  tag: 'ifx-filter-accordion',\n  styleUrl: 'filter-accordion.scss',\n  shadow: true,\n})\nexport class FilterAccordion {\n  @Element() private el: HTMLElement;\n  @State() expanded: boolean = false;\n  @Prop() maxVisibleItems: number;\n  @State() count: number = 0;\n  @State() totalItems = 0;\n\n  @Prop() filterGroupName = \"\";\n\n  @Event() ifxFilterAccordionChange: EventEmitter;\n\n  componentWillLoad() {\n    this.el.addEventListener('ifxListUpdate', this.handleCheckedChange);\n  }\n\n  componentWillUpdate() {\n    const selectedItems = getInitiallySelectedItems(this.el);\n    this.count = selectedItems.length;\n  }\n\n\n  handleCheckedChange = (event: CustomEvent) => {\n    const selectedItems = event.detail.selectedItems;\n    this.count = selectedItems.length;\n    this.ifxFilterAccordionChange.emit({ filterGroupName: this.filterGroupName, selectedItems });\n  }\n\n  componentWillUnload() {\n    this.el.removeEventListener('ifxListUpdate', this.handleCheckedChange);\n  }\n\n  toggleAccordion = (event: MouseEvent) => {\n    event.stopPropagation();\n    this.expanded = !this.expanded;\n  }\n\n  render() {\n    return (\n      <div class={`accordion ${this.expanded ? 'expanded' : ''}`}>\n        <div class=\"header\" onClick={this.toggleAccordion}>\n          <div class={`text-and-icon ${this.expanded ? 'expanded' : ''}`}>\n            <div class=\"text\">\n              <span>{this.filterGroupName}</span>\n              <ifx-number-indicator>{this.count}</ifx-number-indicator>\n            </div>\n            <ifx-icon\n              class={this.expanded ? '' : 'hidden'}\n              icon=\"minus-16\"\n              onClick={this.toggleAccordion}\n            ></ifx-icon>\n            <ifx-icon\n              class={this.expanded ? 'hidden' : ''}\n              icon=\"plus-16\"\n              onClick={this.toggleAccordion}\n            ></ifx-icon>\n          </div>\n        </div>\n        {this.expanded &&\n          <div class=\"filter-accordion-container\">\n            <slot name=\"list\"></slot>\n          </div>\n        }\n      </div>\n    );\n  }\n}","// utils.ts\nexport function getInitiallySelectedItems(el: HTMLElement) {\n  return Array.from(el.querySelectorAll('ifx-list-entry'))\n    .filter(entry => entry.getAttribute('value') === 'true')\n    .map(entry => ({\n      label: entry.getAttribute('label'),\n      value: entry.getAttribute('value')\n    }));\n}"],"names":["FilterAccordion","handleCheckedChange","event","selectedItems","detail","this","count","length","ifxFilterAccordionChange","emit","filterGroupName","toggleAccordion","stopPropagation","expanded","componentWillLoad","el","addEventListener","componentWillUpdate","Array","from","querySelectorAll","filter","entry","getAttribute","map","label","value","componentWillUnload","removeEventListener","render","h","key","class","concat","onClick","icon","name"],"sourceRoot":""}