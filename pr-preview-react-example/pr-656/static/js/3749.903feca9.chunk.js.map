{"version":3,"file":"static/js/3749.903feca9.chunk.js","mappings":"+MAQaA,EAAS,W,wGAGU,c,WACW,G,YAChB,E,WACD,G,UACD,G,aACG,G,UACH,I,eACK,E,eACA,E,cACD,E,eACC,C,4CAK5B,SAAaC,GACPA,IAAaC,KAAKC,aAAaC,QACjCF,KAAKC,aAAaC,MAAQH,E,GAE7B,CAAAI,IAAA,cAAAD,MAGD,WACE,IAAME,EAAQJ,KAAKC,aAAaC,MAChCF,KAAKE,MAAQE,EACbJ,KAAKK,SAASC,KAAKN,KAAKE,M,GACzB,CAAAC,IAAA,SAAAD,MAED,WAAM,IAAAK,EAAA,KACJ,OACEC,EAAAA,EAAAA,GAAA,OAAKC,MAAK,wBAAAC,OAA0BV,KAAKW,SAAW,WAAa,MAC/DH,EAAAA,EAAAA,GAAA,OAAKC,MAAM,2BACTD,EAAAA,EAAAA,GAAA,SAAOI,QAAQ,eACbJ,EAAAA,EAAAA,GAAA,aACCR,KAAKa,UAAYb,KAAKc,UACrBN,EAAAA,EAAAA,GAAA,QAAMC,MAAM,qBAAmB,gBAC7BT,KAAKa,UACPL,EAAAA,EAAAA,GAAA,QAAMC,MAAM,YAAU,cACpBT,KAAKc,UACPN,EAAAA,EAAAA,GAAA,QAAMC,MAAM,YAAU,KACpB,QAIRD,EAAAA,EAAAA,GAAA,OAAKC,MAAM,8BACTD,EAAAA,EAAAA,GAAA,OAAKC,MAAM,mBACRT,KAAKe,OACJP,EAAAA,EAAAA,GAAA,YAAUO,KAAMf,KAAKe,QAEvBP,EAAAA,EAAAA,GAAA,SACEQ,IAAK,SAACC,GAAE,OAAMV,EAAKN,aAAegB,CAAE,EACpCN,SAAUX,KAAKW,SACfO,KAAK,OACLC,GAAG,aACHjB,MAAOF,KAAKE,MACZkB,QAAS,kBAAMb,EAAKc,aAAa,EACjCC,YAAatB,KAAKsB,YAClBb,MAAK,GAAAC,OACAV,KAAKe,KAAO,OAAS,GAAE,sBAAAL,OACxBV,KAAKuB,MAAQ,QAAU,GAAE,qBAAAb,OACb,MAAdV,KAAKwB,KAAe,UAAY,GAAE,oBAAAd,OAClCV,KAAKyB,QAAU,UAAY,OAEhCzB,KAAK0B,UAAY1B,KAAKuB,QACrBf,EAAAA,EAAAA,GAAA,OAAKC,MAAK,qCAAAC,OAAuCV,KAAKW,SAAQ,qBAC3DX,KAAK0B,SAET1B,KAAKuB,QACJf,EAAAA,EAAAA,GAAA,OAAKC,MAAM,2CACRT,KAAK0B,U,GAKjB,CAAAvB,IAAA,KAAAwB,IAAA,W,4FA7EmB,G,QCRD,8qG","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/text-field/text-field.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/text-field/text-field.scss?tag=ifx-text-field&encapsulation=shadow"],"sourcesContent":["import { Component, h, Event, Element, Prop, EventEmitter, Watch } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-text-field',\n  styleUrl: 'text-field.scss',\n  shadow: true\n})\n\nexport class TextField {\n  private inputElement: HTMLInputElement;\n  @Element() el;\n  @Prop() placeholder: string = \"Placeholder\"\n  @Prop({ mutable: true }) value: string = '';\n  @Prop() error: boolean = false;\n  @Prop() label: string = \"\";\n  @Prop() icon: string = \"\";\n  @Prop() caption: string = \"\";\n  @Prop() size: string = 'm';\n  @Prop() required: boolean = false;\n  @Prop() optional: boolean = false;\n  @Prop() success: boolean = false;\n  @Prop() disabled: boolean = false;\n  @Event() ifxInput: EventEmitter<String>;\n\n\n  @Watch('value')\n  valueWatcher(newValue: string) {\n    if (newValue !== this.inputElement.value) {\n      this.inputElement.value = newValue;\n    }\n  }\n\n\n  handleInput() {\n    const query = this.inputElement.value;\n    this.value = query; // update the value property when input changes\n    this.ifxInput.emit(this.value);\n  }\n\n  render() {\n    return (\n      <div class={`textInput__container ${this.disabled ? 'disabled' : \"\"}`}>\n        <div class=\"textInput__top-wrapper\">\n          <label htmlFor=\"text-field\">\n            <slot></slot>\n            {this.optional && this.required ? (\n              <span class=\"optional-required\">(optional) *</span>\n            ) : this.optional ? (\n              <span class=\"optional\">(optional)</span>\n            ) : this.required ? (\n              <span class=\"required\">*</span>\n            ) : null}\n          </label>\n        </div>\n\n        <div class=\"textInput__bottom-wrapper\">\n          <div class=\"input-container\">\n            {this.icon && (\n              <ifx-icon icon={this.icon} />\n            )}\n            <input\n              ref={(el) => (this.inputElement = el)}\n              disabled={this.disabled}\n              type=\"text\"\n              id='text-field'\n              value={this.value}\n              onInput={() => this.handleInput()}\n              placeholder={this.placeholder}\n              class={\n                `${this.icon ? 'icon' : \"\"}\n                ${this.error ? 'error' : \"\"} \n              ${this.size === \"s\" ? \"input-s\" : \"\"}\n              ${this.success ? \"success\" : \"\"}`} />\n          </div>\n          {this.caption && !this.error &&\n            <div class={`textInput__bottom-wrapper-caption ${this.disabled} ? disabled : \"\"`}>\n              {this.caption}\n            </div>}\n          {this.error &&\n            <div class=\"textInput__bottom-wrapper-caption error\">\n              {this.caption}\n            </div>}\n        </div>\n      </div>\n    );\n  }\n}\n","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n:host { \n  display: flex;\n}\n\n.textInput__container {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 0px;\n  width: 100%;\n  flex: none;\n  order: 0;\n  align-self: stretch;\n  flex-grow: 0;\n  font-family: tokens.$ifxFontFamilyBody;\n\n\n  &.disabled {\n    & .textInput__top-wrapper {\n      & label {\n        color: tokens.$ifxColorEngineering500;\n      }\n    }\n\n    & .textInput__bottom-wrapper {\n      input {\n        border: 1px solid tokens.$ifxColorEngineering500;\n        background-color: tokens.$ifxColorEngineering200;\n\n        &::placeholder {\n          font-size: tokens.$ifxFontSizeS;\n          color: tokens.$ifxColorEngineering500;\n        }\n      }\n    }\n  }\n\n  & .textInput__top-wrapper {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    padding: 0px;\n    gap: 4px;\n    flex: none;\n    order: 0;\n    align-self: stretch;\n    flex-grow: 0;\n\n    & label {\n      font-style: normal;\n      font-weight: 400;\n      font-size: tokens.$ifxFontSizeM;\n      line-height: tokens.$ifxLineHeightM;\n      display: flex;\n      align-items: center;\n      color: tokens.$ifxColorBaseBlack;\n      flex: none;\n      order: 0;\n      flex-grow: 0;\n\n      & .optional-required {\n        margin-left: 4px;\n      }\n\n      & .optional {\n        margin-left: 4px;\n      }\n\n      & .required {\n        margin-left: 4px;\n      }\n    }\n  }\n\n  .input-container {\n    position: relative;\n    display: flex;\n    align-items: center;\n    width: 100%;\n  }\n\n\n  & .textInput__bottom-wrapper {\n    flex-grow: 1;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    padding: 0px;\n    gap: 4px;\n    flex: none;\n    order: 1;\n    align-self: stretch;\n    flex-grow: 0;\n\n    & input {\n      width: 100%;\n      box-sizing: border-box;\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      padding: tokens.$ifxSpace100 tokens.$ifxSpace200;\n      gap: tokens.$ifxSpace100;\n      height: tokens.$ifxSize500;\n      background-color: tokens.$ifxColorBaseWhite;\n      color: tokens.$ifxColorBaseBlack;\n      border: 1px solid tokens.$ifxColorEngineering400;\n      border-radius: tokens.$ifxBorderRadius12;\n      flex: none;\n      order: 0;\n      align-self: stretch;\n      flex-grow: 0;\n\n      &.input-s {\n        height: tokens.$ifxSize450;\n      }\n\n      &.icon {\n        padding-left: tokens.$ifxSpace400;\n      }\n\n      &.error {\n        border: 1px solid #CD002F;\n\n        &:focus {\n          outline: none;\n        }\n      }\n\n      &.success {\n        border: 1px solid #4CA460;\n\n        &:focus {\n          outline: none;\n        }\n      }\n\n\n      &:focus:not(.error, .success) {\n        outline: none;\n        border: 1px solid #0A8276;\n      }\n\n      &:hover:not(:disabled, .error, .success) {\n        border: 1px solid #3C3A39;\n      }\n\n      &::placeholder {\n        font-style: normal;\n        font-weight: 400;\n        font-size: tokens.$ifxFontSizeS;\n        line-height: tokens.$ifxLineHeightM;\n        color: #8D8786;\n        flex: none;\n        order: 1;\n        flex-grow: 1;\n      }\n    }\n\n    & ifx-icon {\n      // Position the icon within the icon container\n      // Adjust the positioning as needed\n      position: absolute;\n      top: 50%;\n      transform: translateY(-50%);\n      left: 8px;\n      /* Adjust this value to control the icon's left offset */\n      transition: .3s;\n    }\n\n    & .textInput__bottom-wrapper-caption {\n      font-style: normal;\n      font-weight: 400;\n      font-size: tokens.$ifxFontSizeXs;\n      line-height: tokens.$ifxLineHeightXs;\n      letter-spacing: 0.2px;\n      color: tokens.$ifxColorBaseBlack;\n      flex: none;\n      order: 1;\n      align-self: stretch;\n      flex-grow: 0;\n\n      &.error {\n        color: #CD002F;\n\n      }\n\n      &.disabled {\n        color: tokens.$ifxColorEngineering500;\n      }\n    }\n\n  }\n}"],"names":["TextField","newValue","this","inputElement","value","key","query","ifxInput","emit","_this","h","class","concat","disabled","htmlFor","optional","required","icon","ref","el","type","id","onInput","handleInput","placeholder","error","size","success","caption","get"],"sourceRoot":""}