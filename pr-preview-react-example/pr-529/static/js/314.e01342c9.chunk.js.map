{"version":3,"file":"static/js/314.e01342c9.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chips/chip.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chips/chip.scss?tag=ifx-chip&encapsulation=shadow"],"sourcesContent":["import { Component, h, Element, Prop, Listen, State, Event, EventEmitter } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-chip',\n  styleUrl: 'chip.scss',\n  shadow: true\n})\n\nexport class Chip {\n  @Element() el;\n  @Prop() placeholder: string;\n  @State() isEmpty: boolean = true;\n  @Event() ifxDropdownMenu: EventEmitter<CustomEvent>;\n\n  @Listen('mousedown', { target: 'document' })\n  handleOutsideClick(event: MouseEvent) {\n    const path = event.composedPath();\n    if (!path.includes(this.el)) {\n      this.closeDropdownMenu();\n    }\n  }\n\n  getDropdownMenu() {\n    let dropdownMenuComponent = this.el.querySelector('ifx-dropdown-menu');\n    if (dropdownMenuComponent) {\n      dropdownMenuComponent = this.el.querySelector('ifx-dropdown-menu').shadowRoot;\n      const dropdownMenuElement = dropdownMenuComponent.querySelector('.dropdown-menu');\n      return dropdownMenuElement\n    }\n  }\n\n  getDropdownWrapper() {\n    const dropdownWrapper = this.el.shadowRoot.querySelector('.dropdown');\n    return dropdownWrapper\n  }\n\n  getDropdownItems() {\n    const dropdownMenuItems = this.el.querySelectorAll('ifx-dropdown-item')\n    return dropdownMenuItems\n  }\n\n  handleClassList(el, type, className) {\n    el?.classList[type](className)\n  }\n\n  toggleDropdownMenu() {\n    console.log(\"dropdown menu\")\n\n    const textField = this.getTextField()\n    const textFieldElement = textField.querySelector('.wrapper-close-button')\n    const chipWrapper = textField.closest('.wrapper');\n    const dropdownMenu = this.getDropdownMenu();\n    const dropdownWrapper = this.getDropdownWrapper()\n    this.handleClassList(dropdownMenu, 'toggle', 'show')\n    this.handleClassList(dropdownWrapper, 'toggle', 'show')\n    this.handleClassList(textFieldElement, 'toggle', 'show')\n    this.handleClassList(chipWrapper, 'toggle', 'open')\n  }\n\n  closeDropdownMenu() {\n    const dropdownMenu = this.getDropdownMenu()\n    const dropdownWrapper = this.getDropdownWrapper()\n    const textField = this.getTextField()\n    const chipWrapper = textField.closest('.wrapper');\n    const textFieldElement = textField.querySelector('.wrapper-close-button')\n    this.handleClassList(dropdownMenu, 'remove', 'show')\n    this.handleClassList(dropdownWrapper, 'remove', 'show')\n    this.handleClassList(textFieldElement, 'remove', 'show')\n    this.handleClassList(chipWrapper, 'remove', 'open')\n  }\n\n  removeActiveMenuItem() {\n    const dropdownMenuItems = this.getDropdownItems()\n    for (let i = 0; i < dropdownMenuItems.length; i++) {\n      this.handleClassList(dropdownMenuItems[i].shadowRoot.querySelector('a'), 'remove', 'active')\n    }\n  }\n\n  uncheckCheckboxes(target) {\n    const dropdownMenuItems = this.getDropdownItems()\n    for (let i = 0; i < dropdownMenuItems.length; i++) {\n      if (dropdownMenuItems[i].shadowRoot.querySelector('a') !== target) {\n        dropdownMenuItems[i].shadowRoot.querySelector('a').querySelector('ifx-checkbox').checked = false;\n      }\n    }\n  }\n\n  returnToDefaultLabel() {\n    console.log(\"default labe\")\n    const textField = this.getTextField()\n    const labelWrapper = textField.querySelector('.wrapper-label');\n    labelWrapper.innerHTML = this.placeholder;\n  }\n\n  // toggleCheckbox(target) {\n  //   console.log(\"toggle checkbox\")\n  //   this.uncheckCheckboxes(target)\n  //   target.querySelector('ifx-checkbox').checked = !target.querySelector('ifx-checkbox').checked\n  //   if (target.querySelector('ifx-checkbox').checked === false) {\n  //     this.returnToDefaultLabel()\n  //   }\n  // }\n\n  getClickedElement(target) {\n    if (target instanceof SVGElement) {\n      return target.closest('.dropdown-item')\n    } else if (target.className.includes('dropdown-menu')\n      || target.className.includes('form-check-input')) {\n      return false\n    } else {\n      return target.closest('.dropdown-item');\n\n    }\n  }\n\n  @Listen('ifxDropdownItem')\n  handleDropdownItemValueEmission(event: CustomEvent) {\n    console.log(\"event\", event)\n    this.ifxDropdownMenu.emit(event.detail)\n  }\n\n\n  addActiveMenuItem = (e) => {\n    const target = this.getClickedElement(e.composedPath()[0])\n    const selectedAnchor = e.target.shadowRoot.querySelector('a');\n    console.log(\"anchor\", selectedAnchor)\n    // const isCheckable = e.target.checkable;\n    // this.uncheckCheckboxes(selectedAnchor)\n\n    // if (!target) {\n    //   if (selectedAnchor.querySelector('ifx-checkbox').checked === false) {\n    //     this.returnToDefaultLabel()\n    //   }\n    //   return;\n    // }\n\n    // if (isCheckable) {\n    //   this.toggleCheckbox(target)\n    //   return;\n    // }\n\n    this.removeActiveMenuItem()\n    this.handleClassList(target, 'add', 'active')\n    this.toggleDropdownMenu()\n  }\n\n  getTextField() {\n    let textField = this.el.shadowRoot.querySelector('.wrapper');\n    return textField\n  }\n\n  addItemValueToTextField(value) {\n    const textField = this.getTextField()\n    const labelWrapper = textField.querySelector('.wrapper-label')\n    value.target.setAttribute('target', value.target?.index)\n    labelWrapper.innerHTML = value.value\n  }\n\n  addEventListeners() {\n    const dropdownMenu = this.getDropdownMenu();\n    document.addEventListener('click', this.handleOutsideClick.bind(this))\n    dropdownMenu.addEventListener('click', this.addActiveMenuItem)\n    let dropdownMenuComponent = this.el.querySelector('ifx-dropdown-menu');\n    dropdownMenuComponent.addEventListener('selectValues', (event) => {\n      this.addItemValueToTextField(event.detail)\n    })\n  }\n\n  componentDidRender() {\n    let textInput = this.getTextField()\n    if (textInput) {\n      textInput.addEventListener('click', this.toggleDropdownMenu.bind(this))\n      this.addEventListeners()\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"dropdown container\">\n        <div class=\"wrapper\">\n          <div class=\"wrapper-label\">\n            {this.placeholder}\n          </div>\n          <div class=\"wrapper-close-button\">\n            <ifx-icon icon=\"chevrondown12\"></ifx-icon>\n          </div>\n        </div>\n\n        <slot name=\"menu\" />\n\n      </div>\n    );\n  }\n}","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n.container {\n  //display: inline-block;\n  position: relative;\n\n  & .wrapper {\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n    padding: 8px 16px;\n    gap: tokens.$ifxSpace100;\n\n    background: tokens.$ifxColorBaseWhite;\n\n    border: 1px solid #BFBBBB;\n    border-radius: 100px;\n\n    &:hover {\n      cursor: pointer;\n      border: 1px solid #575352;\n    }\n\n    &:active {\n      border: 1px solid #0A8276;\n    }\n\n    &.open {\n      border: 1px solid #0A8276;\n    }\n\n    & .wrapper-label {\n      font-style: normal;\n      font-weight: 400;\n      font-size: tokens.$ifxFontSizeS;\n      line-height: tokens.$ifxLineHeightS;\n\n      display: flex;\n      align-items: center;\n\n      color: tokens.$ifxColorBaseBlack;\n\n      flex: none;\n      order: 0;\n      flex-grow: 0;\n    }\n\n    & .wrapper-close-button {\n      & ifx-icon {\n        transition: .3s;\n      }\n\n      &.show {\n        & ifx-icon {\n          transition: .3s;\n          transform: rotate(180deg);\n        }\n      }\n\n      & ifx-icon {\n        width: 12px;\n        height: 12px;\n\n        flex: none;\n        order: 1;\n        flex-grow: 0;\n      }\n    }\n  }\n\n  // & .dropdown-menu { \n  //   display: none;\n  // }\n  // &.show  { \n  //   & .dropdown-menu { \n  //     display: block;\n  //   }\n  // }\n}"],"names":["Chip","addActiveMenuItem","e","target","_this","getClickedElement","composedPath","selectedAnchor","shadowRoot","querySelector","console","log","removeActiveMenuItem","handleClassList","toggleDropdownMenu","event","includes","this","el","closeDropdownMenu","key","value","dropdownMenuComponent","querySelectorAll","type","className","classList","textField","getTextField","textFieldElement","chipWrapper","closest","dropdownMenu","getDropdownMenu","dropdownWrapper","getDropdownWrapper","dropdownMenuItems","getDropdownItems","i","length","checked","innerHTML","placeholder","SVGElement","ifxDropdownMenu","emit","detail","labelWrapper","setAttribute","_a","index","_this2","document","addEventListener","handleOutsideClick","bind","addItemValueToTextField","textInput","addEventListeners","h","class","icon","name","get"],"sourceRoot":""}