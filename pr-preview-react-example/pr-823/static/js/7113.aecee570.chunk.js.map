{"version":3,"file":"static/js/7113.aecee570.chunk.js","mappings":"+LAAA,MCQaA,EAAS,M,kDAEY,C,CAGhC,gBAAMC,CAAWC,GACf,GAAGC,KAAKC,aAAc,CACpB,MAAMC,EAAQC,MAAMC,KAAKJ,KAAKK,GAAGC,iBAAiB,uBAClD,IAAK,MAAMC,KAAQL,EAAO,CACxB,MAAMM,EAAcD,EAChBC,IAAgBT,EAAMU,cAAiBD,EAAYE,UACrDF,EAAYG,O,GAMpBC,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,OAAKC,MAAM,sBACTD,EAAAA,EAAAA,GAAA,a,wCD5Ba,mHEArB,MCQaE,EAAgB,M,yKAEQ,E,WACV,C,CAKzBC,UAAAA,GACEhB,KAAKiB,MAAQjB,KAAKiB,KACdjB,KAAKiB,KACPjB,KAAKkB,YAAYC,OAEjBnB,KAAKoB,aAAaD,M,CAItBE,iBAAAA,GACMrB,KAAKiB,KACPjB,KAAKsB,UAAUC,MAAMC,UAAY,GAAHC,OAAMzB,KAAKsB,UAAUI,aAAY,MAE/D1B,KAAKsB,UAAUC,MAAMC,UAAY,G,CAIrCG,iBAAAA,GACM3B,KAAK4B,kBACP5B,KAAKiB,MAAO,EACZjB,KAAKkB,YAAYC,O,CAIrBU,gBAAAA,GACE7B,KAAKqB,mB,CAGPS,kBAAAA,GACE9B,KAAKqB,mB,CAIP,WAAMV,GACJX,KAAKiB,MAAO,EACZjB,KAAKoB,aAAaD,M,CAIpB,YAAMT,GACJ,OAAOV,KAAKiB,I,CAGdc,gBAAAA,GACK/B,KAAKiB,MACNjB,KAAKqB,mB,CAITT,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,oBAAiBb,KAAKgC,QAASlB,MAAK,kBAAAW,OAAoBzB,KAAKiB,KAAO,OAAS,MAC3EJ,EAAAA,EAAAA,GAAA,OAAKC,MAAM,kBAAkBmB,QAASA,IAAMjC,KAAKgB,eAC/CH,EAAAA,EAAAA,GAAA,QAAMC,MAAM,mBACVD,EAAAA,EAAAA,GAAA,YAAUqB,KAAK,sBAEjBrB,EAAAA,EAAAA,GAAA,QAAMC,MAAM,qBAAqBd,KAAKgC,WAExCnB,EAAAA,EAAAA,GAAA,OAAKC,MAAM,oBAAoBqB,IAAM9B,GAAQL,KAAKsB,UAAYjB,IAC5DQ,EAAAA,EAAAA,GAAA,OAAKC,MAAM,kBACTD,EAAAA,EAAAA,GAAA,QAAMuB,aAAcA,IAAMpC,KAAK+B,uB,WD5ElB,w0B","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/accordion/accordion.scss?tag=ifx-accordion&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/accordion/accordion.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/accordion/accordionItem.scss?tag=ifx-accordion-item&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/accordion/accordionItem.tsx"],"sourcesContent":["// ifxAccordion.scss\n@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n:host {\n  display: block;\n}\n\n.accordion-wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: tokens.$ifxSpace100;\n}","//ifxAccordion.tsx\nimport { Component, h, Listen, Element, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-accordion',\n  styleUrl: 'accordion.scss',\n  shadow: true,\n})\nexport class Accordion {\n  @Element() el: HTMLElement;\n  @Prop() autoCollapse: boolean = false;\n\n  @Listen('ifxItemOpen')\n  async onItemOpen(event: CustomEvent) {\n    if(this.autoCollapse) { \n      const items = Array.from(this.el.querySelectorAll('ifx-accordion-item'));\n      for (const item of items) {\n        const itemElement = item as HTMLIfxAccordionItemElement;\n        if (itemElement !== event.target && (await itemElement.isOpen())) {\n          itemElement.close();\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"accordion-wrapper\">\n        <slot />\n      </div>\n    );\n  }\n}\n","// ifxAccordionItem.scss\n@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n// :host {\n//   display: block;\n// }\n\n.accordion-item {\n  border-radius: 3px;\n  overflow: hidden;\n  transition: all 0.3s;\n}\n\n.accordion-title:hover {\n  border: 1px solid tokens.$ifxColorEngineering200;\n  color: tokens.$ifxColorOcean600;\n}\n\n.accordion-title {\n  display: flex;\n  align-items: center;\n  padding: tokens.$ifxSpace150 tokens.$ifxSpace200;\n  gap: tokens.$ifxSpace150;\n  color: tokens.$ifxColorOcean500;\n  background-color: tokens.$ifxColorBaseWhite;\n  border: 1px solid tokens.$ifxColorEngineering200;\n  cursor: pointer;\n}\n\n.accordion-caption {\n  font-weight: tokens.$ifxFontWeightSemibold;\n  font-size: tokens.$ifxFontSizeL;\n}\n\n.accordion-content {\n  gap: tokens.$ifxSpace100;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.3s ease-in-out;\n  line-height: 24px;\n  font-size: tokens.$ifxFontSizeM;\n  font-weight: 400;\n  font-family: tokens.$ifxFontFamilyBody;\n}\n\n.inner-content {\n  background-color: tokens.$ifxColorBaseWhite;\n  padding: tokens.$ifxSpace300;\n  // white-space: pre-wrap;\n  /* wraps text at spaces and within words */\n  word-wrap: break-word;\n  /* breaks text within a word if necessary */\n  overflow-wrap: anywhere;\n  align-self: stretch;\n\n  /* breaks text at arbitrary points when needed */\n}\n\n.accordion-icon {\n  font-weight: bold;\n  display: inline-block;\n  transition: transform 0.3s;\n\n  &:hover {\n    color: tokens.$ifxColorOcean600;\n\n  }\n}\n\n\n\n.accordion-item.open .accordion-icon {\n  transform: rotate(-180deg);\n}","//ifxAccordionItem\nimport { Component, Prop, h, State, Event, EventEmitter, Method } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-accordion-item',\n  styleUrl: 'accordionItem.scss',\n  shadow: true,\n})\nexport class IfxAccordionItem {\n  @Prop() caption: string;\n  @Prop() initialCollapse: boolean = true;\n  @State() open: boolean = false;\n  @Event() ifxItemOpen: EventEmitter;\n  @Event() ifxItemClose: EventEmitter;\n  private contentEl!: HTMLElement;\n\n  toggleOpen() {\n    this.open = !this.open;\n    if (this.open) {\n      this.ifxItemOpen.emit();\n    } else {\n      this.ifxItemClose.emit();\n    }\n  }\n\n  openAccordionItem() { \n    if (this.open) {\n      this.contentEl.style.maxHeight = `${this.contentEl.scrollHeight}px`;\n    } else {\n      this.contentEl.style.maxHeight = '0';\n    }\n  }\n\n  componentWillLoad() { \n    if(!this.initialCollapse) { \n      this.open = true;\n      this.ifxItemOpen.emit();\n    }\n  }\n\n  componentDidLoad() { \n    this.openAccordionItem()\n  }\n\n  componentDidUpdate() {\n    this.openAccordionItem()\n  }\n\n  @Method()\n  async close() {\n    this.open = false;\n    this.ifxItemClose.emit();\n  }\n\n  @Method()\n  async isOpen(): Promise<boolean> {\n    return this.open;\n  }\n\n  handleSlotChange() { \n    if(this.open) { \n      this.openAccordionItem()\n    }\n  }\n\n  render() {\n    return (\n      <div aria-label={this.caption} class={`accordion-item ${this.open ? 'open' : ''}`}>\n        <div class=\"accordion-title\" onClick={() => this.toggleOpen()}>\n          <span class=\"accordion-icon\">\n            <ifx-icon icon=\"chevron-down-12\" />\n          </span>\n          <span class=\"accordion-caption\">{this.caption}</span>\n        </div>\n        <div class=\"accordion-content\" ref={(el) => (this.contentEl = el as HTMLElement)}>\n          <div class=\"inner-content\">\n            <slot onSlotchange={() => this.handleSlotChange()} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"],"names":["Accordion","onItemOpen","event","this","autoCollapse","items","Array","from","el","querySelectorAll","item","itemElement","target","isOpen","close","render","h","class","IfxAccordionItem","toggleOpen","open","ifxItemOpen","emit","ifxItemClose","openAccordionItem","contentEl","style","maxHeight","concat","scrollHeight","componentWillLoad","initialCollapse","componentDidLoad","componentDidUpdate","handleSlotChange","caption","onClick","icon","ref","onSlotchange"],"sourceRoot":""}