{"version":3,"file":"static/js/6577.4f15ee18.chunk.js","mappings":"oKAAA,MCiBaA,EAAO,M,0FAea,E,uBAOkB,O,qBAOZ,E,aAOO,U,6BAKJC,E,uBAQtCC,YAAAA,CAAaC,GACT,MAAMC,EAAqBD,EAAME,OAAOD,mBACnCA,EAAmBE,UACpBF,EAAmBG,aAAa,QAAS,O,CAKjDC,gBAAAA,GACIC,KAAKC,kB,CAITC,8BAAAA,GACI,MAAMC,EAAQH,KAAKI,WACnBD,EAAMA,EAAME,OAAS,GAAGC,UAAW,EACnC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAME,OAAQE,IAC9BJ,EAAMI,GAAGC,OAASD,EAAI,EAE1BP,KAAKS,WAAaN,EAAME,M,CAI5BD,QAAAA,GAEI,OAD8CJ,KAAKU,GAAGC,iBAAiB,W,CAK3EC,aAAAA,CAAcJ,GACVR,KAAKC,iBAAiBO,E,CAI1BK,8BAAAA,GACkBb,KAAKI,WACbU,SAAS,CAACC,EAAMP,KACdA,EAAO,EAAIR,KAAKgB,aAAYD,EAAKlB,UAAW,EAAI,G,CAK5DoB,YAAAA,GACI,MAAMd,EAAQH,KAAKI,WACnB,IAAK,IAAIG,EAAI,EAAGA,EAAIJ,EAAME,OAAQE,IAAK,CACnC,MAAMW,EAA6B,CAC/BF,WAAYhB,KAAKmB,mBACjBC,kBAAmBpB,KAAKoB,kBACxBC,eAAgBrB,KAAKqB,eACrBC,QAAStB,KAAKsB,QACdV,cAAeZ,KAAKY,cAAcW,KAAKvB,OAE3CG,EAAMI,GAAGW,aAAeA,C,EAKhCjB,gBAAAA,GAAsC,IAArBO,EAAAgB,UAAAnB,OAAA,QAAAb,IAAAgC,UAAA,GAAAA,UAAA,GAAiB,KAC1BC,EAAgBjB,GAAkBkB,KAAKC,IAAI,EAAGD,KAAKE,IAAI5B,KAAKS,YAA+B,YAAjBT,KAAKsB,QAAwB,EAAI,GAAItB,KAAKgB,aACxH,GAAIS,GAAiBzB,KAAKmB,mBAAoB,CAC1C,MAAMhB,EAAQH,KAAKI,gBACaZ,IAA5BQ,KAAKmB,oBAAkCnB,KAAK6B,UAAUC,KAAK,CAAEd,WAAYb,EAAMsB,EAAc,GAAI9B,mBAAoBQ,EAAMH,KAAKmB,mBAAmB,GAAIY,WAAY/B,KAAKS,Y,CAEhLT,KAAKmB,mBAAqBM,C,CAO9BO,iBAAAA,GACIhC,KAAKE,iCACLF,KAAKC,mBACLD,KAAKa,iCACLb,KAAKiB,c,CAGTgB,mBAAAA,GACIjC,KAAKiB,c,CAGTiB,MAAAA,GACI,OACIC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,wDAAkB,YACdC,KAAO,aACPC,MAAK,WAAAC,OAAevC,KAAKsB,QAAO,KAAAiB,OAAqB,YAAjBvC,KAAKsB,QAAwB,WAAWtB,KAAKoB,kBAAmB,KAG9E,YAAjBpB,KAAKsB,UACNa,EAAAA,EAAAA,GAAA,OAAKG,MAAQ,qBACTH,EAAAA,EAAAA,GAAA,OAAKG,MAAQ,mBAAiB,GAAAC,OACtBb,KAAKE,IAAI5B,KAAKmB,mBAAoBnB,KAAKS,YAAW,QAAA8B,OAAOvC,KAAKS,eAM9E0B,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKE,MAAK,oBACNH,EAAAA,EAAAA,GAAA,QAAAC,IAAA,8C,CAMhBI,kBAAAA,GAEI,GAAoB,WAAhBxC,KAAKsB,QAAsB,CACMtB,KAAKU,GAAG+B,WAAWC,cAAc,qBACtDC,MAAMC,YAAY,OAAQ,GAAFL,OAAMvC,KAAKmB,mBAAsBnB,KAAKS,WAAe,IAAG,K,uGD9KrF,+vB","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/stepper/stepper.scss?tag=ifx-stepper&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/stepper/stepper.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n.stepper{\n    display: flex;\n    align-items: center;\n    \n    &.compact{\n        justify-content: space-between;\n        align-items: center;\n        \n        &.compact-right {\n            flex-direction: row-reverse;\n            text-align: left;\n        }\n\n        .stepper-wrapper{\n            flex-direction: column;\n        }\n    }\n}\n\n.stepper-wrapper{\n    display: flex;\n    flex-direction: row;\n}\n\n.stepper-progress{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font: tokens.$ifxBodyBodySemibold04;\n    min-width: tokens.$ifxSize700;\n    height: tokens.$ifxSize700;\n    border-radius: tokens.$ifxBorderRadiusRound;\n    background: conic-gradient(tokens.$ifxColorOcean500 var(--pb, 0%), tokens.$ifxColorEngineering400 0);\n    \n    .progress-detail{\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        text-align: center;\n        width: (tokens.$ifxSize700)-(tokens.$ifxSize100);\n        height: (tokens.$ifxSize700)-(tokens.$ifxSize100);\n        border-radius: tokens.$ifxBorderRadiusRound;\n        background: white;\n    }\n}\n\n","import { h, \n         Component, \n         Element, \n         Event, \n         EventEmitter, \n         Listen, \n         Prop, \n         State, \n         Watch } from \"@stencil/core\";\nimport { StepperState } from \"./interfaces\";\n\n@Component({\n    tag     : 'ifx-stepper',\n    styleUrl: 'stepper.scss',\n    shadow  : true\n})\n\nexport class Stepper {\n\n    /**\n     * Reference to the host element.\n     */\n    @Element() el: HTMLElement;\n\n    /**\n     * An event emmited when the active step is changed.\n     */\n    @Event() ifxChange: EventEmitter;\n\n    /**\n     * Represents the active step of the stepper.\n     */\n    @Prop() activeStep: number = 1;\n\n    /**\n     * (Optional) Defines the position of the indicator in a compact variant.\n     * \n     * @Default 'left'\n     */\n    @Prop() indicatorPosition?: 'left' | 'right' = 'left';\n\n    /**\n     * (Optional) Control whether to show step number or not in a DEFAULT variant.\n     * \n     * @Default false\n     */\n    @Prop() showStepNumber?: boolean = false;\n\n    /**\n     * (Optional) Defines the variant of the stepper.\n     * \n     * @Default 'default'\n     */\n    @Prop() variant?: 'default' | 'compact' = 'default';\n\n    /**\n     * An internal state for activeStep prop.\n     */\n    @State() internalActiveStep: number = undefined;\n\n    /**\n     * Stores total number of steps in a stepper.\n     */\n    @State() stepsCount: number;\n\n    @Listen('ifxChange') \n    onStepChange(event: CustomEvent) {\n        const previousActiveStep = event.detail.previousActiveStep;\n        if (!previousActiveStep.complete) {\n            previousActiveStep.setAttribute('error', 'true');\n        }\n    } \n\n    @Watch('activeStep')\n    handleActiveStep() {\n        this.updateActiveStep();\n    }\n\n    /* Assigns step Id's to ifx-steps. */\n    addStepIdsToStepsAndCountSteps() {\n        const steps = this.getSteps()\n        steps[steps.length - 1].lastStep = true;\n        for (let i = 0; i < steps.length; i++) {\n            steps[i].stepId = i + 1;\n        }\n        this.stepsCount = steps.length;\n    }\n\n    /* Returns the reference to all steps from DOM. */\n    getSteps() {\n        const steps: NodeListOf<HTMLIfxStepElement> = this.el.querySelectorAll('ifx-step');\n        return steps;\n    }\n\n    /* Sets the specified step as an active step. */\n    setActiveStep(stepId: number) {\n        this.updateActiveStep(stepId);\n    }\n\n    /* Sets the step before active to step to complete by default (on load). */\n    setStepsBeforeActiveToComplete() {\n        const steps = this.getSteps();\n        steps.forEach( (step, stepId) => {\n            if (stepId+1 < this.activeStep) step.complete = true;\n        });\n    }\n\n    /* Sync steps with parent state. */\n    syncIfxSteps() {\n        const steps = this.getSteps()\n        for (let i = 0; i < steps.length; i++) {\n            const stepperState: StepperState = { \n                activeStep: this.internalActiveStep, \n                indicatorPosition: this.indicatorPosition, \n                showStepNumber: this.showStepNumber, \n                variant: this.variant, \n                setActiveStep: this.setActiveStep.bind(this)\n            };\n            steps[i].stepperState = stepperState;\n        }\n    }\n\n    /* Sets the initial active step or assigns new active step. */\n    updateActiveStep(stepId: number = null) {\n        let newActiveStep = stepId ? stepId : Math.max(1, Math.min(this.stepsCount + (this.variant !== 'compact' ? 1 : 0), this.activeStep));\n        if (newActiveStep != this.internalActiveStep) {\n            const steps = this.getSteps();\n            if (this.internalActiveStep !== undefined) this.ifxChange.emit({ activeStep: steps[newActiveStep-1], previousActiveStep: steps[this.internalActiveStep-1], totalSteps: this.stepsCount });\n        }\n        this.internalActiveStep = newActiveStep;\n    }\n\n    /**\n     * Lifecycle methods\n     */\n\n    componentWillLoad() {\n        this.addStepIdsToStepsAndCountSteps();\n        this.updateActiveStep();\n        this.setStepsBeforeActiveToComplete();\n        this.syncIfxSteps();\n    }\n\n    componentWillUpdate() {\n        this.syncIfxSteps();\n    }\n\n    render() {\n        return (\n            <div aria-label = 'a stepper' \n                role = 'navigation' \n                class = {`stepper ${this.variant} ${this.variant === 'compact' ? 'compact-'+this.indicatorPosition: ''}`}>\n                {\n                    /* Progress bar for compact variant. */\n                    (this.variant === 'compact') && \n                    <div class = 'stepper-progress'>\n                        <div class = 'progress-detail'>\n                            {`${Math.min(this.internalActiveStep, this.stepsCount)} of ${this.stepsCount}`}\n                        </div>\n                    </div>\n                }\n                \n                {/* Slot for ifx-steps. */}\n                <div class = {`stepper-wrapper`}>\n                    <slot />\n                </div>\n            </div>\n        );\n    };\n\n    componentDidRender() {\n        /* Updating progress bar in compact version. */\n        if (this.variant == 'compact') {\n            const progressBar: HTMLElement = this.el.shadowRoot.querySelector('.stepper-progress');\n            progressBar.style.setProperty('--pb', `${(this.internalActiveStep / (this.stepsCount)) * 100}%`);\n        }\n    }\n}\n"],"names":["Stepper","undefined","onStepChange","event","previousActiveStep","detail","complete","setAttribute","handleActiveStep","this","updateActiveStep","addStepIdsToStepsAndCountSteps","steps","getSteps","length","lastStep","i","stepId","stepsCount","el","querySelectorAll","setActiveStep","setStepsBeforeActiveToComplete","forEach","step","activeStep","syncIfxSteps","stepperState","internalActiveStep","indicatorPosition","showStepNumber","variant","bind","arguments","newActiveStep","Math","max","min","ifxChange","emit","totalSteps","componentWillLoad","componentWillUpdate","render","h","key","role","class","concat","componentDidRender","shadowRoot","querySelector","style","setProperty"],"sourceRoot":""}