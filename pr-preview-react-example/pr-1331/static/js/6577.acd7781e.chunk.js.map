{"version":3,"file":"static/js/6577.acd7781e.chunk.js","mappings":"oKAAA,MCQaA,EAAO,M,8GAMmC,E,uBACA,O,qBACA,E,aACA,U,6BAEbC,C,CAKtCC,gBAAAA,GACIC,KAAKC,kB,CAITC,QAAAA,GAEI,OAD8CF,KAAKG,GAAGC,iBAAiB,W,CAK3EC,aAAAA,CAAcC,GACVN,KAAKO,WAAaD,EAClBN,KAAKC,iBAAiBK,E,CAI1BE,8BAAAA,GACI,MAAMC,EAAQT,KAAKE,WACnBO,EAAMA,EAAMC,OAAS,GAAGC,UAAW,EACnC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAMC,OAAQE,IAC9BH,EAAMG,GAAGN,OAASM,EAAI,EAE1BZ,KAAKa,WAAaJ,EAAMC,M,CAI5BT,gBAAAA,GAAsC,IAArBK,EAAAQ,UAAAJ,OAAA,QAAAZ,IAAAgB,UAAA,GAAAA,UAAA,GAAiB,KAC1BC,EAAgBT,GAAkBU,KAAKC,IAAI,EAAGD,KAAKE,IAAIlB,KAAKa,YAA+B,YAAjBb,KAAKmB,QAAwB,EAAI,GAAInB,KAAKO,aACpHQ,GAAiBf,KAAKoB,yBACStB,IAA5BE,KAAKoB,oBAAkCpB,KAAKqB,oBAAoBC,KAAK,CAAEf,WAAYQ,EAAeQ,mBAAoBvB,KAAKoB,mBAAoBI,WAAYxB,KAAKa,aAEvKb,KAAKoB,mBAAqBL,C,CAI9BU,YAAAA,GACI,MAAMhB,EAAQT,KAAKE,WACnB,IAAK,IAAIU,EAAI,EAAGA,EAAIH,EAAMC,OAAQE,IAC9BH,EAAMG,GAAGc,aAAe,CACpBnB,WAAYP,KAAKoB,mBACjBO,eAAgB3B,KAAK2B,eACrBR,QAASnB,KAAKmB,QACdS,kBAAmB5B,KAAK4B,kBACxBvB,cAAeL,KAAKK,cAAcwB,KAAK7B,M,CAKnD8B,iBAAAA,GACI9B,KAAKQ,iCACLR,KAAKC,mBACLD,KAAKyB,c,CAGTM,mBAAAA,GACI/B,KAAKyB,c,CAGTO,MAAAA,GACI,OACIC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAK,WAAAC,OAAapC,KAAKmB,QAAO,KAAAiB,OAAqB,YAAjBpC,KAAKmB,QAAwB,WAAWnB,KAAK4B,kBAAmB,KAG7E,YAAjB5B,KAAKmB,UACNc,EAAAA,EAAAA,GAAA,OAAKE,MAAM,qBACPF,EAAAA,EAAAA,GAAA,OAAKE,MAAM,mBAAiB,GAAAC,OACpBpB,KAAKE,IAAIlB,KAAKoB,mBAAoBpB,KAAKa,YAAW,QAAAuB,OAAOpC,KAAKa,eAM9EoB,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAK,oBACNF,EAAAA,EAAAA,GAAA,QAAAC,IAAA,8C,CAMhBG,kBAAAA,GAEI,GAAoB,WAAhBrC,KAAKmB,QAAsB,CACMnB,KAAKG,GAAGmC,WAAWC,cAAc,qBACtDC,MAAMC,YAAY,OAAQ,GAAFL,OAAMpC,KAAKoB,mBAAsBpB,KAAKa,WAAe,IAAG,K,uGD5GrF,+vB","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/stepper/stepper.scss?tag=ifx-stepper&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/stepper/stepper.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n.stepper{\n    display: flex;\n    align-items: center;\n    \n    &.compact{\n        justify-content: space-between;\n        align-items: center;\n        \n        &.compact-right {\n            flex-direction: row-reverse;\n            text-align: left;\n        }\n\n        .stepper-wrapper{\n            flex-direction: column;\n        }\n    }\n}\n\n.stepper-wrapper{\n    display: flex;\n    flex-direction: row;\n}\n\n.stepper-progress{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font: tokens.$ifxBodyBodySemibold04;\n    min-width: tokens.$ifxSize700;\n    height: tokens.$ifxSize700;\n    border-radius: tokens.$ifxBorderRadiusRound;\n    background: conic-gradient(tokens.$ifxColorOcean500 var(--pb, 0%), tokens.$ifxColorEngineering400 0);\n    \n    .progress-detail{\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        text-align: center;\n        width: (tokens.$ifxSize700)-(tokens.$ifxSize100);\n        height: (tokens.$ifxSize700)-(tokens.$ifxSize100);\n        border-radius: tokens.$ifxBorderRadiusRound;\n        background: white;\n    }\n}\n\n","import { Component, h, Prop, Element, State, EventEmitter, Event, Watch } from \"@stencil/core\";\n\n@Component({\n    tag     : 'ifx-stepper',\n    styleUrl: 'stepper.scss',\n    shadow  : true\n})\n\nexport class Stepper {\n\n    @Element() el: HTMLElement;\n\n    @Event() ifxActiveStepChange: EventEmitter;\n\n    @Prop() activeStep       : number                = 1;\n    @Prop() indicatorPosition: 'left' | 'right'      = 'left';\n    @Prop() showStepNumber   : boolean               = false;\n    @Prop() variant          : 'default' | 'compact' = 'default';\n\n    @State() internalActiveStep: number = undefined;\n\n    private stepsCount: number;\n\n    @Watch('activeStep')\n    handleActiveStep() {\n        this.updateActiveStep();\n    }\n\n    // Returns the reference to all steps from DOM\n    getSteps() {\n        const steps: NodeListOf<HTMLIfxStepElement> = this.el.querySelectorAll('ifx-step');\n        return steps;\n    }\n\n    // Sets the specified step as an active step\n    setActiveStep(stepId: number) {\n        this.activeStep = stepId;\n        this.updateActiveStep(stepId);\n    }\n\n    // Assigns step Id's to ifx-steps\n    addStepIdsToStepsAndCountSteps() {\n        const steps = this.getSteps()\n        steps[steps.length - 1].lastStep = true;\n        for (let i = 0; i < steps.length; i++) {\n            steps[i].stepId = i + 1;\n        }\n        this.stepsCount = steps.length;\n    }\n\n    // Sets the initial active step or assigns new active step\n    updateActiveStep(stepId: number = null) {\n        let newActiveStep = stepId ? stepId : Math.max(1, Math.min(this.stepsCount + (this.variant !== 'compact' ? 1 : 0), this.activeStep));\n        if (newActiveStep != this.internalActiveStep) {\n            if(this.internalActiveStep !== undefined) this.ifxActiveStepChange.emit({ activeStep: newActiveStep, previousActiveStep: this.internalActiveStep, totalSteps: this.stepsCount });\n        }\n        this.internalActiveStep = newActiveStep;\n    }\n\n    // Sync steps with parent state\n    syncIfxSteps() {\n        const steps = this.getSteps()\n        for (let i = 0; i < steps.length; i++) {\n            steps[i].stepperState = { \n                activeStep: this.internalActiveStep, \n                showStepNumber: this.showStepNumber, \n                variant: this.variant, \n                indicatorPosition: this.indicatorPosition, \n                setActiveStep: this.setActiveStep.bind(this)\n            };\n        }\n    }\n\n    componentWillLoad() {\n        this.addStepIdsToStepsAndCountSteps();\n        this.updateActiveStep();\n        this.syncIfxSteps();\n    }\n\n    componentWillUpdate() {\n        this.syncIfxSteps();\n    }\n\n    render() {\n        return (\n            <div class={`stepper ${this.variant} ${this.variant === 'compact' ? 'compact-'+this.indicatorPosition: ''}`}>\n                {\n                    // Progress bar for compact variant\n                    (this.variant === 'compact') && \n                    <div class='stepper-progress'>\n                        <div class='progress-detail'>\n                            {`${Math.min(this.internalActiveStep, this.stepsCount)} of ${this.stepsCount}`}\n                        </div>\n                    </div>\n                }\n                \n                {/* Slot for ifx-steps */}\n                <div class={`stepper-wrapper`}>\n                    <slot />\n                </div>\n            </div>\n        );\n    };\n\n    componentDidRender() {\n        // Updating progress bar in compact version\n        if (this.variant == 'compact') {\n            const progressBar: HTMLElement = this.el.shadowRoot.querySelector('.stepper-progress');\n            progressBar.style.setProperty('--pb', `${(this.internalActiveStep / (this.stepsCount)) * 100}%`);\n        }\n    }\n}\n"],"names":["Stepper","undefined","handleActiveStep","this","updateActiveStep","getSteps","el","querySelectorAll","setActiveStep","stepId","activeStep","addStepIdsToStepsAndCountSteps","steps","length","lastStep","i","stepsCount","arguments","newActiveStep","Math","max","min","variant","internalActiveStep","ifxActiveStepChange","emit","previousActiveStep","totalSteps","syncIfxSteps","stepperState","showStepNumber","indicatorPosition","bind","componentWillLoad","componentWillUpdate","render","h","key","class","concat","componentDidRender","shadowRoot","querySelector","style","setProperty"],"sourceRoot":""}