{"version":3,"file":"static/js/8736.5c90e602.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table/interfaces.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table/buttonCellRenderer.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table/table.scss?tag=ifx-table","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table/table.tsx"],"sourcesContent":["export interface ButtonInterface {\n  disabled?: boolean;\n  variant?: string,\n  size?: string,\n  target?: string,\n  color?: string,\n  text: string\n}\n\nexport const ButtonKeys: Array<keyof ButtonInterface> = ['disabled', 'variant', 'size', 'target', 'color', 'text'];\n\n\n","import { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport { ButtonInterface, ButtonKeys } from './interfaces';\n\nexport class ButtonCellRenderer implements ICellRendererComp {\n  eGui!: HTMLDivElement;\n  eButton: any;\n  eValue: any;\n  cellValue: any;\n  eventListener!: () => void;\n\n  // gets called once before the renderer is used\n  init(params: ICellRendererParams) {\n    const config = params.data.button;\n    this.eGui = document.createElement('div');\n\n    if (this.hasRequiredKeys(config)) {\n      // create the cell\n      this.eGui.innerHTML = `\n        <span>\n          <ifx-button\n          disabled=${config.disabled}\n          variant=${config.variant}\n          size=${config.size}\n          target=${config.target}\n          color=${config.color}>\n          ${config.text}\n        </ifx-button>\n        </span>\n       `;\n\n      // get references to the elements we want\n      this.eButton = this.eGui.querySelector('ifx-button');\n    }\n    // // add event listener to button\n    // this.eventListener = () => alert('Button clicked!');\n    // this.eButton?.addEventListener('click', this.eventListener);\n    else {\n      this.eGui.innerHTML = `\n      <span>\n        ${config}\n      </span>\n     `;\n    }\n  }\n\n\n  getGui() {\n    return this.eGui;\n  }\n\n  // gets called whenever the cell refreshes\n  refresh(params: ICellRendererParams) {\n    // set value into cell again\n    const config = params.data.button;\n    this.eGui = document.createElement('div');\n    if (this.hasRequiredKeys(config)) {\n      // create the cell\n      this.eGui.innerHTML = `\n        <span>\n          <ifx-button\n          disabled=${config.disabled}\n          variant=${config.variant}\n          size=${config.size}\n          target=${config.target}\n          color=${config.color}>\n          ${config.text}\n        </ifx-button>\n        </span>\n       `;\n\n      // get references to the elements we want\n      this.eButton = this.eGui.querySelector('ifx-button');\n    }\n    // // add event listener to button\n    // this.eventListener = () => alert('Button clicked!');\n    // this.eButton?.addEventListener('click', this.eventListener);\n    else {\n      this.eGui.innerHTML = `\n      <span>\n        ${config}\n      </span>\n     `;\n    }\n    // return true to tell the grid we refreshed successfully\n    return true;\n  }\n\n  // gets called when the cell is removed from the grid\n  destroy() {\n    // do cleanup, remove event listener from button\n    if (this.eButton) {\n      // check that the button element exists as destroy() can be called before getGui()\n      this.eButton.removeEventListener('click', this.eventListener);\n    }\n  }\n\n  getFieldValueToDisplay(params: ICellRendererParams) {\n    return params.valueFormatted ? params.valueFormatted : params.value;\n  }\n\n  isObject(value: any): value is Object {\n    return value && typeof value === 'object' && value.constructor === Object;\n  }\n\n  hasRequiredKeys(obj: any): obj is ButtonInterface {\n    if (!this.isObject(obj)) return false;\n    return ButtonKeys.every(key => key in obj);\n  }\n\n}","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n@import \"~ag-grid-community/styles/ag-grid.css\";\n@import \"~ag-grid-community/styles/ag-theme-alpine.css\";\n\n\n\n.auto-height .ag-theme-alpine .ag-root-wrapper-body {\n  height: auto !important;\n}\n\n\n\n.ag-root-wrapper {\n  border: none;\n  font-family: var(--ifx-font-family);\n\n}\n\n\n.ag-header {\n  background-color: tokens.$ifxColorEngineering100;\n  border-bottom: none;\n}\n\n.ag-header-cell {\n  padding-left: 16px;\n  padding-right: 16px;\n  gap: 4px;\n}\n\n\n\n.ag-header-cell-text {\n  font-size: 13px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 20px;\n  color: tokens.$ifxColorBaseBlack;\n  font-family: var(--ifx-font-family);\n\n}\n\n.ag-theme-alpine .ag-row-focus {\n  background-color: inherit !important;\n  /* Reset the hover color to the row's original color */\n}\n\n.ag-theme-alpine .ag-row-hover {\n  background-color: inherit !important;\n  /* Reset the hover color to the row's original color */\n}\n\n.ag-theme-alpine .ag-cell-focus {\n  border: none !important;\n  outline: none !important;\n\n}\n\n.ag-theme-alpine .ag-cell-focus {\n  border: none !important;\n  background-color: inherit !important;\n}\n\n\n\n.ag-row {\n  background-color: tokens.$ifxColorBaseWhite;\n  border-bottom: 1px solid tokens.$ifxColorEngineering200;\n  font-size: 13;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 20px;\n\n}\n\n.ag-row-odd {\n  background-color: tokens.$ifxColorBaseWhite;\n}\n\n.ag-cell {\n  padding-left: 16px;\n  padding-right: 16px;\n}\n\n.ag-ltr .ag-sort-indicator-icon {\n  padding-left: 0px;\n}\n\n.unsort-icon-custom-color {\n  color: tokens.$ifxColorEngineering400;\n}","import { Component, h, Prop, State } from '@stencil/core';\nimport { FirstDataRenderedEvent, Grid, GridOptions } from 'ag-grid-community';\nimport { ButtonCellRenderer } from './buttonCellRenderer';\n\n\n@Component({\n  tag: 'ifx-table',\n  styleUrl: 'table.scss',\n  shadow: false // only works with shadowdom off because we are using an external library\n})\nexport class Table {\n  @State() gridOptions: GridOptions;\n  @Prop() cols: any[] | string;\n  @Prop() rows: any[] | string;\n  @Prop() columnDefs: any[] = [];\n  @Prop() rowData: any[] = [];\n  @Prop() rowHeight: string = 'default'; //default or compact\n  @Prop() uniqueKey: string;\n  @Prop() tableHeight: string = 'auto';\n  @Prop() pagination: boolean = false;\n  @Prop() paginationPageSize: number = 10;\n\n\n\n  componentWillLoad() {\n    this.uniqueKey = `unique-${Math.floor(Math.random() * 1000000)}`;\n    if (typeof this.rows === 'string' && typeof this.cols === 'string') {\n      try {\n        this.columnDefs = JSON.parse(this.cols);\n        this.rowData = JSON.parse(this.rows);\n      } catch (err) {\n        console.error('Failed to parse input:', err);\n      }\n    } else if ((Array.isArray(this.rows) || typeof this.rows === 'object') && (Array.isArray(this.cols) || typeof this.cols === 'object')) {\n      this.columnDefs = this.cols;\n      this.rowData = this.rows;\n\n    } else {\n      console.error('Unexpected value for cols and rows:', this.rows, this.cols);\n    }\n    this.setButtonRenderer();\n\n\n    this.gridOptions = {\n      rowHeight: this.rowHeight === 'default' ? 40 : 32,\n      headerHeight: 40,\n      defaultColDef: {\n        resizable: true,\n      },\n      suppressDragLeaveHidesColumns: true,\n      onFirstDataRendered: this.onFirstDataRendered,\n      columnDefs: this.columnDefs,\n      rowData: this.rowData,\n      icons: {\n        sortAscending: '<ifx-icon icon=\"arrowtriangleup16\"></ifx-icon>',\n        sortDescending: '<ifx-icon icon=\"arrowtriangledown16\"></ifx-icon>',\n        sortUnSort: '<a class=\"unsort-icon-custom-color\"><ifx-icon icon=\"arrowtrianglevertikal16\"></ifx-icon></a>'\n      },\n      rowDragManaged: this.columnDefs.some(col => col.dndSource === true) ? true : false,\n      animateRows: this.columnDefs.some(col => col.dndSource === true) ? true : false,\n      pagination: this.pagination,\n      paginationPageSize: this.paginationPageSize,\n    };\n\n  }\n\n\n  onFirstDataRendered(params: FirstDataRenderedEvent) {\n    params.api.sizeColumnsToFit();\n  }\n\n\n  componentWillUpdate() {\n    this.gridOptions.columnDefs = this.columnDefs;\n    this.gridOptions.rowData = this.rowData;\n    if (this.gridOptions.api) {\n      this.gridOptions.api.setRowData(this.rowData);\n      this.gridOptions.api.setColumnDefs(this.columnDefs);\n    }\n  }\n\n  componentDidLoad() {\n    new Grid(document.getElementById(`ifxTable-${this.uniqueKey}`), this.gridOptions);\n    if (this.gridOptions.api) {\n      this.gridOptions.api.sizeColumnsToFit();\n    }\n  }\n\n\n  render() {\n    // if (this.gridOptions.rowDragManaged) {\n    //   // console.log(\"draggable table render\")\n    // }\n    return (\n      <div id=\"grid-wrapper\" class={{ 'auto-height': this.tableHeight === 'auto' ? true : false }}>\n\n        <div id={`ifxTable-${this.uniqueKey}`} class=\"ag-theme-alpine\" style={{\n          'height': `${this.tableHeight}`, width: '100%'\n        }}></div >\n      </div >\n    );\n\n\n  }\n\n\n  hasButtonCol(): boolean {\n    return this.columnDefs.some(column => column.field === 'button');\n  }\n\n\n\n  setButtonRenderer() {\n    const buttonColumn = this.columnDefs.find(column => column.field === 'button');\n    if (buttonColumn) {\n      buttonColumn.cellRenderer = ButtonCellRenderer;\n    }\n  }\n\n  // setIconButtonRenderer() {\n  //   const iconButtonColumn = this.columnDefs.find(column => column.field === 'iconButton');\n  //   if (iconButtonColumn) {\n  //     iconButtonColumn.cellRenderer = IconButtonCellRenderer;\n  //   }\n  // }\n\n  // setLinkRenderer() {\n  //   const linkColumn = this.columnDefs.find(column => column.field === 'link');\n  //   if (linkColumn) {\n  //     linkColumn.cellRenderer = LinkCellRenderer;\n  //   }\n  // }\n\n\n\n  onDragOver(event) {\n    var dragSupported = event.dataTransfer.length;\n\n    if (dragSupported) {\n      event.dataTransfer.dropEffect = 'move';\n    }\n\n    event.preventDefault();\n  }\n\n  onDrop(event) {\n    var jsonData = event.dataTransfer.getData('application/json');\n\n    var eJsonRow = document.createElement('div');\n    eJsonRow.classList.add('json-row');\n    eJsonRow.innerText = jsonData;\n\n    var eJsonDisplay = document.querySelector('#eJsonDisplay');\n\n    eJsonDisplay.appendChild(eJsonRow);\n    event.preventDefault();\n  }\n\n}\n"],"names":["ButtonKeys","ButtonCellRenderer","init","params","config","data","button","this","eGui","document","createElement","hasRequiredKeys","innerHTML","concat","disabled","variant","size","target","color","text","eButton","querySelector","getGui","refresh","destroy","removeEventListener","eventListener","getFieldValueToDisplay","valueFormatted","value","isObject","constructor","Object","obj","every","key","Table","componentWillLoad","uniqueKey","Math","floor","random","rows","cols","columnDefs","JSON","parse","rowData","err","console","error","Array","isArray","setButtonRenderer","gridOptions","rowHeight","headerHeight","defaultColDef","resizable","suppressDragLeaveHidesColumns","onFirstDataRendered","icons","sortAscending","sortDescending","sortUnSort","rowDragManaged","some","col","dndSource","animateRows","pagination","paginationPageSize","api","sizeColumnsToFit","componentWillUpdate","setRowData","setColumnDefs","componentDidLoad","Grid","getElementById","render","h","id","class","tableHeight","style","width","hasButtonCol","column","field","buttonColumn","find","cellRenderer","onDragOver","event","dataTransfer","length","dropEffect","preventDefault","onDrop","jsonData","getData","eJsonRow","classList","add","innerText","appendChild"],"sourceRoot":""}