{"version":3,"file":"static/js/9326.e970a821.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/select/multi-select/multiselect.scss?tag=ifx-multiselect&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/select/multi-select/multiselect.tsx"],"sourcesContent":["// @import '~choices.js/public/assets/styles/choices.css';\n@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../../global/font.scss\";\n\n.ifx-multiselect-container {\n  position: relative;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n\n  &.small-select {\n    height: 36px;\n  }\n\n  &.medium-select {\n    height: 40px;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n\n\n  .ifx-label-wrapper {\n    font-size: 16px;\n    line-height: 24px;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    overflow-wrap: anywhere;\n    max-width: 100%;\n  }\n\n  .ifx-error-message-wrapper {\n    color: #CD002F;\n    font-size: 12px;\n    line-height: 16px;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    overflow-wrap: anywhere;\n    max-width: 100%;\n  }\n\n  .ifx-multiselect-wrapper {\n    box-sizing: border-box;\n    position: relative;\n    display: flex;\n    align-items: center;\n    border: 1px solid #8D8786;\n    width: 100%;\n\n    &.small-select {\n      line-height: 20px;\n      padding: 8px 12px;\n      font-size: 14px;\n    }\n\n    &.medium-select {\n      line-height: 24px;\n      padding: 8px 16px;\n      font-size: 16px;\n    }\n\n    &:focus-visible {\n      outline: none;\n    }\n\n    &:focus-visible:not(.active):not(:active) {\n      &::before {\n        content: '';\n        position: absolute;\n        width: calc(100% + 4px);\n        height: calc(100% + 4px);\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        border: 2px solid #0A8276;\n      }\n    }\n\n    &.disabled {\n      background: #EEEDED;\n      color: #575352;\n      border-color: #575352;\n      cursor: not-allowed;\n      -webkit-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n    }\n\n    &.error {\n      border-color: #CD002F;\n    }\n\n    &:hover:not(.focus, :focus) {\n      border-color: #8D8786;\n    }\n\n    &.active {\n      border: 2px solid #0A8276 !important; // Active border color\n\n      & .icon-wrapper-up {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      & .icon-wrapper-down {\n        display: none\n      }\n    }\n\n\n    & .icon-wrapper-up {\n      display: none;\n    }\n\n    & .icon-wrapper-down {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    &.is-flipped {\n      .ifx-multiselect-dropdown-menu {\n        top: auto;\n        bottom: 100%;\n      }\n    }\n  }\n\n  .ifx-multiselect-input {\n    flex-grow: 1;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    &.placeholder {\n      opacity: 0.5;\n    }\n\n  }\n\n\n  .ifx-multiselect-icon-container {\n    margin-left: auto;\n    align-items: center;\n    display: flex;\n  }\n\n\n  .ifx-clear-button {\n    margin-right: tokens.$ifxSpace100; // Space between clear button and icons\n    display: flex;\n  }\n\n  .ifx-multiselect-dropdown-menu {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    width: 100%;\n    border: 1px solid #ddd;\n    margin-top: 2px;\n    background-color: #fff;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n    max-height: 300px;\n    /* Adjust based on your design */\n    overflow-y: auto;\n    z-index: var(--dynamic-z-index, 1); // Fallback to 1\n\n    .search-input {\n      // position: sticky;\n      // top: 0;\n      // z-index: 2;\n      width: 100%;\n      padding: 8px 16px;\n      font-size: 16px;\n      font-style: normal;\n      font-weight: 400;\n      box-sizing: border-box;\n      background-color: tokens.$ifxColorBaseWhite;\n      border: none;\n      border-bottom: 2px solid #ccc;\n\n      &:focus {\n        outline: none;\n        border: 1px solid tokens.$ifxColorOcean500;\n      }\n\n      // Optional: Placeholder style\n      &::placeholder {\n        color: #999;\n      }\n    }\n  }\n\n  .option {\n    position: relative;\n    padding: 8px 16px;\n    gap: 8px;\n    align-items: center;\n    display: flex;\n    font-style: normal;\n    font-weight: 400;\n\n    &.small-select {\n      line-height: 20px;\n      font-size: 14px;\n    }\n\n    &.medium-select {\n      line-height: 24px;\n      font-size: 16px;\n    }\n\n    &:hover {\n      background-color: #EEEDED;\n    }\n\n    &:focus {\n      background-color: #BFBBBB;\n      outline: none;\n      box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);\n    }\n\n    &.is-highlighted {\n      background-color: #EEEDED;\n      ;\n    }\n\n    &.selected {\n      // color: #0A8276;\n    }\n\n    &.sub-option {\n      padding-left: 30px;\n      /* or however much indentation you want */\n    }\n  }\n\n\n\n}","import { Component, Prop, State, Event, EventEmitter, Element, h, Watch } from '@stencil/core';\nimport { Option } from './interfaces';\n\n@Component({\n  tag: 'ifx-multiselect',\n  styleUrl: 'multiselect.scss',\n  shadow: true\n})\n\n\nexport class Multiselect {\n\n  @Prop() options: any[] | string;\n  @Prop() batchSize: number = 50;\n  @Prop() size: string = 'medium (40px)';\n  @Prop() disabled: boolean = false;\n  @Prop() error: boolean = false;\n  @Prop() errorMessage: string = \"Error\";\n  @Prop() label: string = \"\";\n  @State() persistentSelectedOptions: Option[] = [];\n  @Prop() placeholder: string = \"\";\n  @State() listOfOptions: Option[] = [];\n  @State() dropdownOpen = false;\n  @State() dropdownFlipped: boolean;\n  @Prop() maxItemCount: number;\n  @State() zIndex: number = 1; // default z-index value\n  static globalZIndex = 1; // This will be shared among all instances of the component.\n  private currentIndex: number = 0; //needed for option selection using keyboard\n  @State() isLoading: boolean = false;\n  @State() loadedOptions: Option[] = [];\n  @State() filteredOptions: Option[] = [];\n\n\n\n  @Event() ifxSelect: EventEmitter;\n  @Event() ifxMultiselectIsOpen: EventEmitter;\n\n  @Element() el: HTMLElement;\n  dropdownElement!: HTMLElement;\n\n\n  async loadInitialOptions() {\n    this.isLoading = true;\n    // Load the first batch of options (e.g., first 20)\n    this.loadedOptions = await this.fetchOptions(0, this.batchSize);\n    this.isLoading = false;\n  }\n\n  async fetchMoreOptions() {\n    this.isLoading = true;\n    const moreOptions = await this.fetchOptions(this.loadedOptions.length, this.batchSize);\n    this.loadedOptions = [...this.loadedOptions, ...moreOptions];\n    this.isLoading = false;\n  }\n\n\n  handleScroll(event: UIEvent) {\n    const element = event.target as HTMLElement;\n    const halfwayPoint = Math.floor((element.scrollHeight - element.clientHeight) / 2); //loading more options when the user has scrolled halfway through the current list\n\n    if (element.scrollTop >= halfwayPoint) {\n      this.fetchMoreOptions();\n    }\n  }\n\n\n\n\n  async fetchOptions(startIndex: number, count: number): Promise<Option[]> {\n    let allOptions: Option[] = [];\n\n    // Parse options if it's a string, or use directly if it's an array\n    if (typeof this.options === 'string') {\n      try {\n        allOptions = JSON.parse(this.options);\n      } catch (err) {\n        console.error('Failed to parse options:', err);\n      }\n    } else if (Array.isArray(this.options)) {\n      allOptions = this.options;\n    } else {\n      console.error('Unexpected value for options:', this.options);\n    }\n\n    // Slice the options array based on startIndex and count\n    const slicedOptions = allOptions.slice(startIndex, startIndex + count);\n\n    // Update the state for initially selected options, if needed\n    if (startIndex === 0) { // Assuming you want to do this only for the first batch\n      const initiallySelected = slicedOptions.filter(option => option.selected);\n      this.persistentSelectedOptions = [...this.persistentSelectedOptions, ...initiallySelected];\n    }\n\n    return slicedOptions;\n  }\n\n  handleSearch(event: Event) {\n    const searchTerm = (event.target as HTMLInputElement).value.toLowerCase();\n    if (searchTerm === '') {\n      this.filteredOptions = this.loadedOptions;\n    } else {\n      this.filteredOptions = this.loadedOptions.filter(option => option.label.toLowerCase().includes(searchTerm))\n    }\n  }\n\n  componentDidLoad() {\n    setTimeout(() => {\n      this.positionDropdown();\n    }, 500);\n\n    // setInterval(this.handleScroll, 5000); // Runs every 5 seconds (5000 milliseconds)\n\n\n  }\n\n\n  componentWillLoad() {\n    this.loadInitialOptions();\n    this.filteredOptions = [...this.loadedOptions];\n  }\n\n  @Watch('loadedOptions')\n  loadedOptionsChanged() {\n    this.filteredOptions = [...this.loadedOptions];\n  }\n\n\n  handleOptionClick(option: Option) {\n    this.error = false; //reset potential previous errors\n    // 1. Prevent action if disabled\n    //check if newly selected option has children => if not, count it as 1, otherwise count the # of children\n    let newOptionsLength = option.children ? option.children.length : 1;\n    if (this.maxItemCount && this.persistentSelectedOptions.length + newOptionsLength > this.maxItemCount && !this.persistentSelectedOptions.some(selectedOption => selectedOption.value === option.value)) {\n      console.error('Max item count reached');\n      this.error = true;\n      this.errorMessage = \"Please consider the maximum number of items to choose from\";\n      return;\n    }\n\n    // 2. Determine if the current option was previously selected\n    const wasSelected = this.persistentSelectedOptions.some(selectedOption => selectedOption.value === option.value);\n\n    // 3. Handle parent-child relationships\n    if (option.children && option.children.length > 0) {\n      if (wasSelected) {\n        this.persistentSelectedOptions = this.persistentSelectedOptions.filter(selectedOption => selectedOption.value !== option.value && !option.children.some(child => child.value === selectedOption.value));\n      } else {\n        this.persistentSelectedOptions = [...this.persistentSelectedOptions, option, ...option.children];\n      }\n    } else {\n      if (wasSelected) {\n        this.persistentSelectedOptions = this.persistentSelectedOptions.filter(selectedOption => selectedOption.value !== option.value);\n      } else {\n        this.persistentSelectedOptions.push(option);\n      }\n\n      const parentOption = this.listOfOptions.find(opt => opt.children && opt.children.some(child => child.value === option.value));\n\n      if (parentOption) {\n        const allChildrenSelected = parentOption.children.every(child => this.persistentSelectedOptions.some(selectedOption => selectedOption.value === child.value));\n        const someChildrenSelected = parentOption.children.some(child => this.persistentSelectedOptions.some(selectedOption => selectedOption.value === child.value));\n\n        if (allChildrenSelected) {\n          if (!this.persistentSelectedOptions.some(selectedOption => selectedOption.value === parentOption.value)) {\n            this.persistentSelectedOptions.push(parentOption);\n          }\n        } else if (someChildrenSelected) {\n          this.persistentSelectedOptions = this.persistentSelectedOptions.filter(selectedOption => selectedOption.value !== parentOption.value);\n        } else {\n          this.persistentSelectedOptions = this.persistentSelectedOptions.filter(selectedOption => selectedOption.value !== parentOption.value);\n        }\n      }\n    }\n\n    // 4. Reflect changes in the listOfOptions state\n    this.listOfOptions = this.listOfOptions.map(opt => {\n      if (opt.value === option.value) {\n        return { ...opt, selected: !wasSelected };\n      } else if (opt.children) {\n        const isParentSelected = this.persistentSelectedOptions.includes(opt);\n        opt.children = opt.children.map(child => {\n          if (child.value === option.value || isParentSelected) {\n            return { ...child, selected: true };\n          }\n          return child;\n        });\n        return { ...opt, children: opt.children };\n      }\n      return opt;\n    });\n\n    // 5. Update the selected status in persistentSelectedOptions\n    this.persistentSelectedOptions = this.persistentSelectedOptions.map(pOpt => {\n      const matchingOption = this.listOfOptions.find(loOpt => loOpt.value === pOpt.value) || this.listOfOptions.flatMap(loOpt => loOpt.children || []).find(child => child.value === pOpt.value);\n      if (matchingOption) {\n        return { ...pOpt, selected: matchingOption.selected };\n      }\n      return pOpt;\n    });\n\n    // 6. Emit persistentSelectedOptions without duplicated children\n    const emittedOptions = this.persistentSelectedOptions.map(pOpt => {\n      // If this option is a child, check if its parent is in persistentSelectedOptions\n      const parent = this.listOfOptions.find(loOpt => loOpt.children && loOpt.children.some(child => child.value === pOpt.value));\n      if (parent && this.persistentSelectedOptions.some(selectedOption => selectedOption.value === parent.value)) {\n        // If it's a child and its parent is also selected, ensure it's set to selected: true\n        return { ...pOpt, selected: true };\n      }\n      return pOpt;\n    }).filter(pOpt => {\n      // After ensuring the children are selected, now filter out the children whose parents are also in the persistentSelectedOptions\n      const parent = this.listOfOptions.find(loOpt => loOpt.children && loOpt.children.some(child => child.value === pOpt.value));\n      if (parent && this.persistentSelectedOptions.some(selectedOption => selectedOption.value === parent.value)) {\n        return false;  // Exclude this child since its parent is already selected\n      }\n      return true;\n    });\n    this.ifxSelect.emit(emittedOptions);\n  }\n\n  handleDocumentClick = (event: Event) => {\n    const path = event.composedPath();\n    if (!path.includes(this.dropdownElement)) {\n      this.dropdownOpen = false;\n      document.removeEventListener('click', this.handleDocumentClick);\n\n      // Dispatch the ifxMultiselectIsOpen event\n      this.ifxMultiselectIsOpen.emit(this.dropdownOpen);\n    }\n  }\n\n  getSizeClass() {\n    return `${this.size}` === \"s\"\n      ? \"small-select\"\n      : \"medium-select\";\n  }\n\n  toggleDropdown() {\n    this.dropdownOpen = !this.dropdownOpen;\n    setTimeout(() => {\n      if (this.dropdownOpen) {\n        document.addEventListener('click', this.handleDocumentClick);\n      }\n      // Dispatch the ifxMultiselectIsOpen event\n      this.ifxMultiselectIsOpen.emit(this.dropdownOpen);\n    }, 0);\n    this.zIndex = Multiselect.globalZIndex++;\n  }\n\n\n  waitForElement(querySelectorFunc: Function, callback: Function, maxTries = 50) {\n    let tries = 0;\n    function request() {\n      requestAnimationFrame(() => {\n        const elements = querySelectorFunc();\n        if (elements.length > 0 || tries > maxTries) {\n          callback(elements);\n        } else {\n          tries++;\n          request();\n        }\n      });\n    }\n    request();\n  }\n\n\n  handleKeyDown(event: KeyboardEvent) {\n    if (this.disabled) return; // If it's disabled, don't do anything.\n\n    const options = this.dropdownElement.querySelectorAll('.option');\n\n    switch (event.code) {\n      case 'Enter' || 'Space':\n        if (this.dropdownOpen) {\n          this.selectItem(options);\n        } else {\n          this.toggleDropdown();\n          // Wait a bit for the dropdown to finish rendering\n          this.waitForElement(() => {\n            return this.dropdownElement.querySelectorAll('.option');\n          }, (options) => {\n            this.updateHighlightedOption(options);\n          });\n        }\n        break;\n      case 'ArrowDown':\n        this.handleArrowDown(options);\n        if (this.dropdownOpen) {\n          this.updateHighlightedOption(options);\n        }\n        break;\n      case 'ArrowUp':\n        this.handleArrowUp(options);\n        if (this.dropdownOpen) {\n          this.updateHighlightedOption(options);\n        }\n        break;\n    }\n  }\n\n  handleWrapperClick(event: MouseEvent) {\n    // This is your existing logic for positioning the dropdown\n    this.positionDropdown();\n\n    // Check if the event target is the wrapper itself and not a child element.\n    if (event.currentTarget === event.target) {\n      this.toggleDropdown();\n    }\n  }\n\n  clearSelection() {\n    this.persistentSelectedOptions = [];\n    this.listOfOptions = this.listOfOptions.map(option => ({ ...option, selected: false }));\n    this.ifxSelect.emit(this.persistentSelectedOptions); // if you want to emit empty selection after clearing\n  }\n\n  positionDropdown() {\n    const wrapperRect = this.el.shadowRoot.querySelector('.ifx-multiselect-wrapper')?.getBoundingClientRect();\n    const spaceBelow = window.innerHeight - wrapperRect.bottom;\n    const spaceAbove = wrapperRect.top;\n\n    // If there's more space above than below the trigger and the dropdown doesn't fit below\n    if ((spaceAbove > spaceBelow && wrapperRect.height > spaceBelow) || (wrapperRect.bottom > window.innerHeight)) {\n      this.dropdownFlipped = true;\n    } else {\n      this.dropdownFlipped = false;\n    }\n  }\n\n\n\n  // Helper function to update highlighted option based on currentIndex\n  private updateHighlightedOption(options: NodeList) {\n    // Clear all highlights\n    options.forEach((option: Element) => option.classList.remove('is-highlighted'));\n\n    // Apply highlight to the current option\n    if (this.currentIndex >= 0 && this.currentIndex < options.length) {\n      (options[this.currentIndex] as Element).classList.add('is-highlighted');\n    }\n  }\n\n  // Helper function to handle arrow down navigation\n  private handleArrowDown(options: NodeList) {\n    if (this.currentIndex < options.length - 1) {\n      this.currentIndex++;\n    } else {\n      this.currentIndex = 0; // Wrap to the beginning.\n    }\n  }\n\n  // Helper function to handle arrow up navigation\n  private handleArrowUp(options: NodeList) {\n    if (this.currentIndex > 0) {\n      this.currentIndex--;\n    } else {\n      this.currentIndex = options.length - 1; // Wrap to the end.\n    }\n  }\n\n  private selectItem(options: NodeList) {\n    // If there's a previous selection, remove its \"selected\" class\n    const previouslySelected = this.dropdownElement.querySelector('.option.selected');\n    if (previouslySelected) {\n      previouslySelected.classList.remove('selected');\n    }\n\n    // Mark the current item as selected\n    const currentOptionElement = options[this.currentIndex] as Element;\n    currentOptionElement.classList.add('selected');\n\n    const currentOptionValue = currentOptionElement.getAttribute('data-value');\n    const currentListOfOptions = typeof this.options === 'string' //passed in string form via storybook\n      ? JSON.parse(this.options).map((option) => ({ value: option.value, label: option.label, children: option.children, selected: option.selected })) // added selected\n      : this.options.map(option => ({ ...option }));\n\n    const currentOption = this.findInOptions(currentListOfOptions, currentOptionValue); // get the option object based on the currently selected value and the options array\n    this.handleOptionClick(currentOption);\n  }\n\n\n  renderOption(option: Option, index: number) {\n    const isSelected = this.persistentSelectedOptions.some(selectedOption => selectedOption.value === option.value);\n    const disableCheckbox = !isSelected && this.maxItemCount && this.persistentSelectedOptions.length >= this.maxItemCount;\n    const uniqueId = `checkbox-${option.value}-${index}`; // Generate a unique ID using the index\n    const isIndeterminate = this.isOptionIndeterminate(option);\n\n    return (\n      <div>\n        <div class={`option ${isSelected ? 'selected' : ''} \n        ${this.getSizeClass()}`}\n          data-value={option.value}\n          onClick={() => !disableCheckbox && this.handleOptionClick(option)}\n          tabindex=\"0\"\n          role={`${option.children?.length > 0 ? \"treeitem\" : \"option\"}`}\n        >\n          <ifx-checkbox id={uniqueId} value={isSelected} indeterminate={isIndeterminate} disabled={disableCheckbox}></ifx-checkbox>\n          <label htmlFor={uniqueId}>{option.label}</label>\n        </div>\n        {option.children && option.children.map((child, childIndex) => this.renderSubOption(child, `${index}-${childIndex}`))}\n      </div>\n    );\n  }\n\n\n  isOptionIndeterminate(option: Option): boolean {\n    if (!option.children) return false;\n\n    const selectedChildren = option.children.filter(child =>\n      this.persistentSelectedOptions.some(persistentOption => persistentOption.value === child.value)\n    ).length;\n\n    return selectedChildren > 0 && selectedChildren < option.children.length;\n  }\n\n\n  findInOptions(options: Option[], searchTerm: string): Option | null {\n    for (const option of options) {\n      if (option.value === searchTerm) {\n        return option;\n      }\n      if (option.children) {\n        const foundInChildren = this.findInOptions(option.children, searchTerm);\n        if (foundInChildren) {\n          return foundInChildren;\n        }\n      }\n    }\n    return null;\n  }\n\n\n  renderSubOption(option: Option, index: string) {\n    const isSelected = this.persistentSelectedOptions.some(selectedOption => selectedOption.value === option.value);\n    const disableCheckbox = !isSelected && this.maxItemCount && this.persistentSelectedOptions.length >= this.maxItemCount;\n    const uniqueId = `checkbox-${option.value}-${index}`;\n\n    return (\n      <div class={`option sub-option ${isSelected ? 'selected' : ''} ${this.getSizeClass()}`}\n        data-value={option.value}\n        role={`${option.children?.length > 0 ? \"option\" : \"treeitem\"}`}\n        onClick={() => !disableCheckbox && this.handleOptionClick(option)}\n        tabindex=\"0\">\n        <ifx-checkbox id={uniqueId} value={isSelected} disabled={disableCheckbox}></ifx-checkbox>\n        <label htmlFor={uniqueId}>{option.label}</label>\n      </div>\n    );\n  }\n\n  render() {\n    // Create a label for the selected options\n    const selectedOptionsLabels = this.persistentSelectedOptions.map(option => option.label).join(', ');\n\n    return (\n      <div class={`ifx-multiselect-container ${this.getSizeClass()}`} ref={el => this.dropdownElement = el as HTMLElement}>\n        {\n          this.label ?\n            <div class=\"ifx-label-wrapper\">\n              <span>{this.label}</span>\n            </div> : null\n        }\n        <div class={`ifx-multiselect-wrapper \n        ${this.getSizeClass()} \n        ${this.dropdownOpen ? 'active' : ''} \n        ${this.dropdownFlipped ? 'is-flipped' : ''}\n        ${this.error ? 'error' : \"\"}\n        ${this.disabled ? 'disabled' : \"\"}`}\n          tabindex=\"0\"\n          onClick={(event) => this.handleWrapperClick(event)}\n          onKeyDown={(event) => this.handleKeyDown(event)} >\n          <div class={`ifx-multiselect-input \n          ${this.persistentSelectedOptions.length === 0 ? 'placeholder' : \"\"}\n          `}\n            onClick={this.disabled ? undefined : () => this.toggleDropdown()}\n          >\n            {this.persistentSelectedOptions.length > 0 ? selectedOptionsLabels : this.placeholder}\n          </div>\n          {this.dropdownOpen && (\n            <div class=\"ifx-multiselect-dropdown-menu\"\n              onScroll={(event) => this.handleScroll(event)}\n              style={{ '--dynamic-z-index': this.zIndex.toString() }}>\n              <input type=\"text\" role=\"textbox\" class=\"search-input\" onInput={(event) => this.handleSearch(event)} placeholder=\"Search...\"></input>\n              {this.filteredOptions.map((option, index) => this.renderOption(option, index))}\n              {this.isLoading && <div>Loading more options...</div>}\n            </div>\n          )}\n          <div class=\"ifx-multiselect-icon-container\">\n\n            {/* Clear Button - will show only if there's a selection */}\n            {this.persistentSelectedOptions.length > 0 && (\n              <div class=\"ifx-clear-button\" onClick={() => this.clearSelection()}>\n                <ifx-icon icon=\"cremove24\"></ifx-icon>\n              </div>\n            )}\n            <div class=\"icon-wrapper-up\" onClick={this.disabled ? undefined : () => this.toggleDropdown()}>\n              <ifx-icon\n                key='icon-up'\n                icon='chevronup-16'></ifx-icon>\n            </div>\n            <div class=\"icon-wrapper-down\" onClick={this.disabled ? undefined : () => this.toggleDropdown()}>\n              <ifx-icon\n                key='icon-down'\n                icon='chevron-down-16'></ifx-icon>\n            </div>\n          </div>\n\n        </div>\n        {\n          this.error ?\n            <div class=\"ifx-error-message-wrapper\">\n              <span>{this.errorMessage}</span>\n            </div> : null\n        }\n      </div>\n    );\n  }\n\n}\n"],"names":["Multiselect","currentIndex","handleDocumentClick","event","composedPath","includes","this","dropdownElement","dropdownOpen","document","removeEventListener","ifxMultiselectIsOpen","emit","loadInitialOptions","isLoading","loadedOptions","fetchOptions","batchSize","fetchMoreOptions","moreOptions","length","handleScroll","element","target","halfwayPoint","Math","floor","scrollHeight","clientHeight","scrollTop","startIndex","count","allOptions","options","JSON","parse","err","console","error","Array","isArray","slicedOptions","slice","initiallySelected","filter","option","selected","persistentSelectedOptions","handleSearch","searchTerm","value","toLowerCase","filteredOptions","label","componentDidLoad","setTimeout","positionDropdown","componentWillLoad","loadedOptionsChanged","handleOptionClick","newOptionsLength","children","maxItemCount","some","selectedOption","errorMessage","wasSelected","child","push","parentOption","listOfOptions","find","opt","allChildrenSelected","every","map","Object","assign","isParentSelected","pOpt","matchingOption","loOpt","flatMap","emittedOptions","parent","ifxSelect","getSizeClass","concat","size","toggleDropdown","addEventListener","zIndex","globalZIndex","waitForElement","querySelectorFunc","callback","maxTries","arguments","undefined","tries","request","requestAnimationFrame","elements","handleKeyDown","disabled","querySelectorAll","code","selectItem","updateHighlightedOption","handleArrowDown","handleArrowUp","handleWrapperClick","currentTarget","clearSelection","wrapperRect","_a","el","shadowRoot","querySelector","getBoundingClientRect","spaceBelow","window","innerHeight","bottom","top","height","dropdownFlipped","forEach","classList","remove","add","previouslySelected","currentOptionElement","currentOptionValue","getAttribute","currentListOfOptions","currentOption","findInOptions","renderOption","index","isSelected","disableCheckbox","uniqueId","isIndeterminate","isOptionIndeterminate","h","class","onClick","tabindex","role","id","indeterminate","htmlFor","childIndex","renderSubOption","selectedChildren","persistentOption","foundInChildren","render","selectedOptionsLabels","join","ref","onKeyDown","placeholder","onScroll","style","toString","type","onInput","icon","key"],"sourceRoot":""}