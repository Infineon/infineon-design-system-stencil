{"version":3,"file":"static/js/6577.ebb9b71e.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/stepper/stepper.scss?tag=ifx-stepper&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/stepper/stepper.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/global/utils/tracking.ts"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n.stepper{\n    display: flex;\n    align-items: center;\n    \n    &.compact{\n        justify-content: space-between;\n        align-items: center;\n        \n        &.compact-right {\n            flex-direction: row-reverse;\n            text-align: left;\n        }\n\n        .stepper-wrapper{\n            flex-direction: column;\n        }\n    }\n}\n\n.stepper-wrapper{\n    display: flex;\n    flex-direction: row;\n}\n\n.stepper-progress{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font: tokens.$ifxBodyBodySemibold04;\n    min-width: tokens.$ifxSize700;\n    height: tokens.$ifxSize700;\n    border-radius: tokens.$ifxBorderRadiusRound;\n    background: conic-gradient(tokens.$ifxColorOcean500 var(--pb, 0%), tokens.$ifxColorEngineering400 0);\n    \n    .progress-detail{\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        text-align: center;\n        width: (tokens.$ifxSize700)-(tokens.$ifxSize100);\n        height: (tokens.$ifxSize700)-(tokens.$ifxSize100);\n        border-radius: tokens.$ifxBorderRadiusRound;\n        background: white;\n    }\n}\n\n","import { h, \n         Component, \n         Element, \n         Event, \n         EventEmitter, \n         Listen, \n         Prop, \n         State, \n         Watch } from \"@stencil/core\";\nimport { StepperState } from \"./interfaces\";\nimport { trackComponentView } from '../../global/utils/tracking';\n\n@Component({\n    tag     : 'ifx-stepper',\n    styleUrl: 'stepper.scss',\n    shadow  : true\n})\n\nexport class Stepper {\n\n    /**\n     * Reference to the host element.\n     */\n    @Element() el: HTMLElement;\n\n    /**\n     * An event emmited when the active step is changed.\n     */\n    @Event() ifxChange: EventEmitter;\n\n    /**\n     * Represents the active step of the stepper.\n     */\n    @Prop({ mutable: true }) activeStep: number = 1;\n\n    /**\n     * (Optional) Defines the position of the indicator in a compact variant.\n     * \n     * @Default 'left'\n     */\n    @Prop() indicatorPosition?: 'left' | 'right' = 'left';\n\n    /**\n     * (Optional) Control whether to show step number or not in a DEFAULT variant.\n     * \n     * @Default false\n     */\n    @Prop() showStepNumber?: boolean = false;\n\n    /**\n     * (Optional) Defines the variant of the stepper.\n     * \n     * @Default 'default'\n     */\n    @Prop() variant?: 'default' | 'compact' = 'default';\n\n    /**\n     * An internal state for activeStep prop.\n     */\n    @State() internalActiveStep: number = undefined;\n\n    /**\n     * Stores total number of steps in a stepper.\n     */\n    @State() stepsCount: number;\n\n\n    componentDidLoad() {\n        trackComponentView('Stepper');\n      }\n    \n    @Listen('ifxChange') \n    onStepChange(event: CustomEvent) {\n        const steps = this.getSteps();\n        const previousActiveStep = steps[event.detail.previousActiveStep-1];\n        if (previousActiveStep && !previousActiveStep.complete) {\n            previousActiveStep.setAttribute('error', 'true');\n        }\n    } \n\n    @Watch('activeStep')\n    handleActiveStep() {\n        this.updateActiveStep();\n    }\n\n    /* Assigns step Id's to ifx-steps. */\n    addStepIdsToStepsAndCountSteps() {\n        const steps = this.getSteps()\n        steps[steps.length - 1].lastStep = true;\n        for (let i = 0; i < steps.length; i++) {\n            steps[i].stepId = i + 1;\n        }\n        this.stepsCount = steps.length;\n    }\n\n    /* Returns the reference to all steps from DOM. */\n    getSteps() {\n        const steps: NodeListOf<HTMLIfxStepElement> = this.el.querySelectorAll('ifx-step');\n        return steps;\n    }\n\n    /* Sets the specified step as an active step. */\n    setActiveStep(stepId: number) {\n        this.updateActiveStep(stepId);\n    }\n\n    /* Sets the step before active to step to complete by default (on load). */\n    setStepsBeforeActiveToComplete() {\n        const steps = this.getSteps();\n        steps.forEach( (step, stepId) => {\n            if (stepId+1 < this.activeStep) step.complete = true;\n        });\n    }\n\n    /* Sync steps with parent state. */\n    syncIfxSteps() {\n        const steps = this.getSteps()\n        for (let i = 0; i < steps.length; i++) {\n            const stepperState: StepperState = { \n                activeStep: this.internalActiveStep, \n                indicatorPosition: (this.indicatorPosition !== 'right' ? 'left' : 'right'), \n                showStepNumber: this.showStepNumber, \n                variant: (this.variant !== 'compact' ? 'default' : 'compact'), \n                setActiveStep: this.setActiveStep.bind(this)\n            };\n            steps[i].stepperState = stepperState;\n        }\n    }\n\n    /* Sets the initial active step or assigns new active step. */\n    updateActiveStep(stepId: number = null) {\n        let newActiveStep = stepId ? stepId : Math.max(1, Math.min(this.stepsCount + (this.variant !== 'compact' ? 1 : 0), this.activeStep));\n        if (newActiveStep != this.internalActiveStep) {\n            if (this.internalActiveStep !== undefined) {\n                this.ifxChange.emit({ activeStep: newActiveStep, \n                                      previousActiveStep: this.internalActiveStep, \n                                      totalSteps: this.stepsCount });\n            }\n        }\n        this.internalActiveStep = newActiveStep;\n        this.activeStep = newActiveStep;\n    }\n\n    /**\n     * Lifecycle methods\n     */\n\n    componentWillLoad() {\n        this.addStepIdsToStepsAndCountSteps();\n        this.updateActiveStep();\n        this.setStepsBeforeActiveToComplete();\n        this.syncIfxSteps();\n    }\n\n    componentWillUpdate() {\n        this.syncIfxSteps();\n    }\n\n    render() {\n        return (\n            <div aria-label = 'a stepper' \n                role = 'navigation' \n                class = {`stepper ${this.variant !== 'compact' ? 'default' : 'compact'} ${this.variant === 'compact' ? 'compact-'+this.indicatorPosition: ''}`}>\n                {\n                    /* Progress bar for compact variant. */\n                    (this.variant === 'compact') && \n                    <div class = 'stepper-progress'>\n                        <div class = 'progress-detail'>\n                            {`${Math.min(this.internalActiveStep, this.stepsCount)} of ${this.stepsCount}`}\n                        </div>\n                    </div>\n                }\n                \n                {/* Slot for ifx-steps. */}\n                <div class = {`stepper-wrapper`}>\n                    <slot />\n                </div>\n            </div>\n        );\n    };\n\n    componentDidRender() {\n        /* Updating progress bar in compact version. */\n        if (this.variant == 'compact') {\n            const progressBar: HTMLElement = this.el.shadowRoot.querySelector('.stepper-progress');\n            progressBar.style.setProperty('--pb', `${(this.internalActiveStep / (this.stepsCount)) * 100}%`);\n        }\n    }\n}\n","// global/utils/tracking.ts\nconst componentQueue: string[] = [];\nconst BATCH_INTERVAL = 5000; // 5 seconds\n\nfunction sendBatch() {\n  if (componentQueue.length > 0) {\n    const componentsToSend = [...componentQueue];\n    componentQueue.length = 0; // Clear the queue\n\n    if (window._paq) {\n      window._paq.push(['trackEvent', 'Component', 'View', componentsToSend.join(', ')]);\n    } else {\n      console.error(\"Matomo _paq array is not defined\");\n    }\n  }\n}\n\nexport function trackComponentView(componentName: string) {\n  if (!componentQueue.includes(componentName)) {\n    componentQueue.push(componentName);\n  }\n}\n\n\n// Set an interval to send the batch every BATCH_INTERVAL milliseconds\nsetInterval(sendBatch, BATCH_INTERVAL);"],"names":["Stepper","undefined","componentDidLoad","trackComponentView","onStepChange","event","previousActiveStep","this","getSteps","detail","complete","setAttribute","handleActiveStep","updateActiveStep","addStepIdsToStepsAndCountSteps","steps","length","lastStep","i","stepId","stepsCount","el","querySelectorAll","setActiveStep","setStepsBeforeActiveToComplete","forEach","step","activeStep","syncIfxSteps","stepperState","internalActiveStep","indicatorPosition","showStepNumber","variant","bind","arguments","newActiveStep","Math","max","min","ifxChange","emit","totalSteps","componentWillLoad","componentWillUpdate","render","h","key","role","class","componentDidRender","shadowRoot","querySelector","style","setProperty","componentQueue","componentName","includes","push","setInterval","componentsToSend","window","_paq","join","console","error"],"sourceRoot":""}