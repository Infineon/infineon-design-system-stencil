{"version":3,"file":"static/js/5987.f554461c.chunk.js","mappings":"+KAAA,MC6BaA,EAAQ,M,6KACY,e,kBAGA,E,qBAEI,E,qBAGD,E,iDAUO,E,yBACH,E,qCAYtCC,iBAAAA,GAEEC,KAAKC,oBACLD,KAAKE,mBAAmBF,KAAKG,YAAaH,KAAKI,e,CAIjDF,kBAAAA,CAAmBG,EAAmBC,GAChCD,IAAaC,GAAYD,IAAaL,KAAKI,iBACzCC,EACFL,KAAKO,eAELP,KAAKQ,gB,CAMXC,oBAAAA,CAAqBJ,GACfL,KAAKU,UACNV,KAAKU,QAA6DC,SAAWN,E,CAMlFO,gBAAAA,GACEZ,KAAKC,mB,CAMPA,iBAAAA,GAEED,KAAKU,QAAUV,KAAKa,GAAGC,cAAc,qDACjCd,KAAKU,UACNV,KAAKU,QAA6DC,SAAWX,KAAKW,SACnFX,KAAKU,QAAQK,oBAAoB,QAASf,KAAKgB,oBAAoBC,KAAKjB,OACxEA,KAAKU,QAAQQ,iBAAiB,QAASlB,KAAKgB,oBAAoBC,KAAKjB,QAGlEA,KAAKmB,eAURnB,KAAKoB,KAAOpB,KAAKa,GAAGC,cAAc,sBAT9Bd,KAAKoB,MACPpB,KAAKoB,KAAKC,SAGZrB,KAAKoB,KAAOpB,KAAKa,GAAGC,cAAc,qBAGlCQ,SAASC,KAAKC,OAAOxB,KAAKoB,OAK5BpB,KAAKoB,KAAKL,oBAAoB,QAASf,KAAKyB,iBAAiBR,KAAKjB,OAClEA,KAAKoB,KAAKF,iBAAiB,QAASlB,KAAKyB,iBAAiBR,KAAKjB,M,CAIjEyB,gBAAAA,GACOzB,KAAK0B,oBACR1B,KAAKQ,e,CAITQ,mBAAAA,GACOhB,KAAKI,eAGRJ,KAAKQ,gBAFLR,KAAKO,c,CAMToB,oBAAAA,GAEM3B,KAAK4B,iBACP5B,KAAK4B,eAAeC,UACpB7B,KAAK4B,eAAiB,MAGpB5B,KAAKoB,MACPpB,KAAKoB,KAAKC,Q,CAKd,YAAMS,GACJ,OAAO9B,KAAKI,c,CAId,mBAAMI,GACAR,KAAKI,iBACPJ,KAAKI,gBAAiB,EAErBJ,KAAKU,QAAiCoB,QAAS,EAC/C9B,KAAKoB,KAA8BU,QAAS,EAE7C9B,KAAK+B,SAASC,QAGZhC,KAAK4B,iBACP5B,KAAK4B,eAAeC,UACpB7B,KAAK4B,eAAiB,K,CAK1B,kBAAMrB,GACCP,KAAKI,gBAAmBJ,KAAKW,WAChCX,KAAKI,gBAAiB,EAErBJ,KAAKU,QAAiCoB,QAAS,EAC/C9B,KAAKoB,KAA8BU,QAAS,EAE7C9B,KAAK4B,gBAAiBK,EAAAA,EAAAA,GACpBjC,KAAKa,GACLb,KAAKoB,KACL,CAAEc,UAAWlC,KAAKkC,YAEpBlC,KAAKmC,QAAQH,O,CAYjBI,kBAAAA,CAAmBC,GACjB,MAAMC,EAASD,EAAMC,OAEhBtC,KAAKuC,uBAA0BvC,KAAKa,GAAG2B,SAASF,IAAYtC,KAAKoB,KAAKoB,SAASF,IAClFtC,KAAKQ,e,CAITiC,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,oBAAgB,gBAAgBC,MAAM,aACpCD,EAAAA,EAAAA,GAAA,a,2ID7MY,6B","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/dropdown/dropdown.scss?tag=ifx-dropdown&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/dropdown/dropdown.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n\n:host {\n    display: inline-block;\n}","//dropdown.tsx\nimport { Component, Prop, h, Element, Listen, Method, Watch, State, EventEmitter, Event } from \"@stencil/core\";\nimport { createPopper } from '@popperjs/core';\n\nimport { IOpenable } from './IOpenable';\n\nexport type Placement =\n  | 'auto'\n  | 'auto-start'\n  | 'auto-end'\n  | 'top'\n  | 'top-start'\n  | 'top-end'\n  | 'bottom'\n  | 'bottom-start'\n  | 'bottom-end'\n  | 'right'\n  | 'right-start'\n  | 'right-end'\n  | 'left'\n  | 'left-start'\n  | 'left-end';\n\n@Component({\n  tag: 'ifx-dropdown',\n  styleUrl: 'dropdown.scss',\n  shadow: true\n})\n\nexport class Dropdown {\n  @Prop() placement: Placement = 'bottom-start';\n\n  // isOpen prop\n  @Prop() defaultOpen: boolean = false;\n  // internal state for isOpen prop\n  @State() internalIsOpen: boolean = false;\n\n  // isOpen prop\n  @Prop() noAppendToBody: boolean = false;\n\n  // Custom events for opening and closing dropdown\n  @Event() ifxOpen: EventEmitter;\n  @Event() ifxClose: EventEmitter;\n  @Event() ifxDropdown: EventEmitter;\n\n  // determine if dropdown is disabled\n  @Prop() disabled: boolean;\n\n  @Prop() noCloseOnOutsideClick: boolean = false;\n  @Prop() noCloseOnMenuClick: boolean = false;\n\n  // Reference to host element\n  @Element() el;\n  // Dropdown trigger and menu\n  @State() trigger: HTMLElement;\n  @State() menu: HTMLElement\n  // Popper instance for positioning\n  popperInstance: any;\n\n\n\n  componentWillLoad() {\n    //maybe not needed\n    this.updateSlotContent();\n    this.watchHandlerIsOpen(this.defaultOpen, this.internalIsOpen);\n  }\n\n  @Watch('defaultOpen')\n  watchHandlerIsOpen(newValue: boolean, oldValue: boolean) {\n    if (newValue !== oldValue && newValue !== this.internalIsOpen) {\n      if (newValue) {\n        this.openDropdown();\n      } else {\n        this.closeDropdown();\n      }\n    }\n  }\n\n  @Watch('disabled')\n  watchHandlerDisabled(newValue: boolean) {\n    if (this.trigger) {\n      (this.trigger as undefined as HTMLIfxDropdownTriggerButtonElement).disabled = newValue;\n    }\n  }\n\n\n  @Listen('slotchange')\n  watchHandlerSlot() {\n    this.updateSlotContent();\n  }\n\n\n\n  // handling assignment of trigger and menu\n  updateSlotContent() {\n    // Get dropdown trigger. name has to start with ifx-dropdown-trigger\n    this.trigger = this.el.querySelector('ifx-dropdown-trigger-button, ifx-dropdown-trigger');\n    if (this.trigger) {\n      (this.trigger as undefined as HTMLIfxDropdownTriggerButtonElement).disabled = this.disabled;\n      this.trigger.removeEventListener('click', this.triggerClickHandler.bind(this));\n      this.trigger.addEventListener('click', this.triggerClickHandler.bind(this));\n    }\n    // Remove menu if exists from body\n    if (!this.noAppendToBody) {\n      if (this.menu) {\n        this.menu.remove();\n      }\n      // Get new menu and add to body\n      this.menu = this.el.querySelector('ifx-dropdown-menu');\n\n      // event handler for closing dropdown on menu click\n      document.body.append(this.menu);\n    } else {\n      this.menu = this.el.querySelector('ifx-dropdown-menu');\n\n    }\n    this.menu.removeEventListener('click', this.menuClickHandler.bind(this));\n    this.menu.addEventListener('click', this.menuClickHandler.bind(this));\n\n  }\n\n  menuClickHandler() {\n    if (!this.noCloseOnMenuClick) {\n      this.closeDropdown();\n    }\n  }\n\n  triggerClickHandler() {\n    if (!this.internalIsOpen) {\n      this.openDropdown();\n    } else {\n      this.closeDropdown();\n    }\n  }\n\n  disconnectedCallback() {\n    // Destroy popper instance if exists\n    if (this.popperInstance) {\n      this.popperInstance.destroy();\n      this.popperInstance = null;\n    }\n    // Remove menu if exists\n    if (this.menu) {\n      this.menu.remove();\n    }\n  }\n\n  @Method()\n  async isOpen() {\n    return this.internalIsOpen;\n  }\n\n  @Method()\n  async closeDropdown() {\n    if (this.internalIsOpen) {\n      this.internalIsOpen = false;\n      // sets isOpen prop on trigger and menu\n      (this.trigger as unknown as IOpenable).isOpen = false;\n      (this.menu as unknown as IOpenable).isOpen = false;\n      // Emit close event\n      this.ifxClose.emit();\n    }\n    // Destroy popper instance if exists\n    if (this.popperInstance) {\n      this.popperInstance.destroy();\n      this.popperInstance = null;\n    }\n  }\n\n  @Method()\n  async openDropdown() {\n    if (!this.internalIsOpen && !this.disabled) {\n      this.internalIsOpen = true;\n      // sets isOpen prop on trigger and menu\n      (this.trigger as unknown as IOpenable).isOpen = true;\n      (this.menu as unknown as IOpenable).isOpen = true;\n      // Create popper instance for positioning\n      this.popperInstance = createPopper(\n        this.el,\n        this.menu,\n        { placement: this.placement });\n\n      this.ifxOpen.emit();\n    }\n  }\n\n  //emitted by and listening to it from the dropdown menu right now\n  // @Listen('ifxDropdownMenu')\n  // handleDropdownMenuEvents(event: CustomEvent) {\n  //   this.ifxDropdown.emit(event.detail)\n  //   console.log('Selected item received in higher-level parent:');\n  // }\n\n  @Listen('mousedown', { target: 'document' })\n  handleOutsideClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    // Close dropdown if outside click\n    if (!this.noCloseOnOutsideClick && !this.el.contains(target) && !this.menu.contains(target)) {\n      this.closeDropdown();\n    }\n  }\n\n  render() {\n    return (\n      <div aria-label='dropdown menu' class='dropdown'>\n        <slot />\n      </div>\n    )\n  }\n}"],"names":["Dropdown","componentWillLoad","this","updateSlotContent","watchHandlerIsOpen","defaultOpen","internalIsOpen","newValue","oldValue","openDropdown","closeDropdown","watchHandlerDisabled","trigger","disabled","watchHandlerSlot","el","querySelector","removeEventListener","triggerClickHandler","bind","addEventListener","noAppendToBody","menu","remove","document","body","append","menuClickHandler","noCloseOnMenuClick","disconnectedCallback","popperInstance","destroy","isOpen","ifxClose","emit","createPopper","placement","ifxOpen","handleOutsideClick","event","target","noCloseOnOutsideClick","contains","render","h","class"],"sourceRoot":""}