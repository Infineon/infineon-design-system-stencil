{"version":3,"file":"static/js/466.c8fa02ec.chunk.js","mappings":"kKAAA,MCQaA,EAAO,M,gDAEc,E,gBAC6B,E,aACjC,S,CAK1BC,cAAAA,GACI,MAAMC,EAAwCC,KAAKC,GAAGC,iBAAiB,YACvE,IAAI,IAAIC,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAC7BJ,EAAMI,GAAGE,aAAe,CAACC,WAAYN,KAAKM,WAAYC,WAAYP,KAAKO,WAAYC,QAASR,KAAKQ,Q,CAKzGC,iBAAAA,GAEI,MAAMV,EAAwCC,KAAKC,GAAGC,iBAAiB,YACvEH,EAAMA,EAAMK,OAAO,GAAGM,UAAW,EACjC,IAAI,IAAIP,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAC7BJ,EAAMI,GAAGQ,OAASR,EAAE,EAExBH,KAAKM,WAAaM,KAAKC,IAAI,EAAGD,KAAKE,IAAIf,EAAMK,OAAO,EAAGJ,KAAKM,aAC5DN,KAAKe,WAAahB,EAAMK,OACxBJ,KAAKF,gB,CAGTkB,mBAAAA,GACIhB,KAAKF,gB,CAGTmB,MAAAA,GACI,OACIC,EAAAA,EAAAA,GAAA,OAAKC,MAAK,WAAAC,OAAapB,KAAKQ,UAEH,YAAjBR,KAAKQ,UAAyBU,EAAAA,EAAAA,GAAA,OAAKC,MAAM,qBACrCD,EAAAA,EAAAA,GAAA,OAAKC,MAAQ,mBAAiB,GAAAC,OACtBpB,KAAKM,WAAU,QAAAc,OAAOpB,KAAKe,eAK3CG,EAAAA,EAAAA,GAAA,OAAKC,MAAK,oBACND,EAAAA,EAAAA,GAAA,c,CAMhBG,kBAAAA,GAEI,GAAmB,WAAhBrB,KAAKQ,QAAqB,CACQR,KAAKC,GAAGqB,WAAWC,cAAc,qBACtDC,MAAMC,YAAY,OAAQ,GAAFL,OAAMpB,KAAKM,WAAYN,KAAKe,WAAe,IAAG,K,yCD/D3E,wyB","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/stepper/stepper.scss?tag=ifx-stepper&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/stepper/stepper.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n.stepper{\n    display: flex;\n    align-items: center;\n    \n    &.compact{\n        min-width: (tokens.$ifxSize3800)-(tokens.$ifxSize50);\n        max-width: (tokens.$ifxSize3800)-(tokens.$ifxSize50);\n        justify-content: space-between;\n        align-items: center;\n\n        .stepper-wrapper{\n            align-items: flex-end;\n            flex-direction: column;\n            max-width: (tokens.$ifxSize3000)-(tokens.$ifxSize50);\n            min-width: (tokens.$ifxSize3000)-(tokens.$ifxSize50);\n        }\n    }\n}\n\n.stepper-wrapper{\n    display: flex;\n    flex-direction: row;\n}\n\n.stepper-progress{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font: tokens.$ifxBodyBodySemibold04;\n    width: tokens.$ifxSize700;\n    height: tokens.$ifxSize700;\n    border-radius: tokens.$ifxBorderRadiusRound;\n    background: conic-gradient(tokens.$ifxColorOcean500 var(--pb, 0%), tokens.$ifxColorEngineering400 0);\n    transition: all 5000ms ease-in-out;\n    \n    .progress-detail{\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        text-align: center;\n        width: (tokens.$ifxSize700)-(tokens.$ifxSize100);\n        height: (tokens.$ifxSize700)-(tokens.$ifxSize100);\n        border-radius: tokens.$ifxBorderRadiusRound;\n        background: white;\n    }\n}\n\n","import { Component, h, Prop, Element } from \"@stencil/core\";\n\n@Component({\n    tag: 'ifx-stepper',\n    styleUrl: 'stepper.scss',\n    shadow: true\n})\n\nexport class Stepper{\n\n    @Prop() showNumber: boolean = false;\n    @Prop({mutable: true, reflect: true}) activeStep: number = 1;\n    @Prop() variant: string = 'default';\n    @Element() el: HTMLElement;\n    private stepsCount: number;\n\n    // Syncing children (steps) with parent state\n    updateChildren(){\n        const steps: NodeListOf<HTMLIfxStepElement> = this.el.querySelectorAll('ifx-step');\n        for(let i = 0; i < steps.length; i++){\n            steps[i].stepperState = {activeStep: this.activeStep, showNumber: this.showNumber, variant: this.variant};\n        }\n        \n    }\n    \n    componentWillLoad(){\n        // Adding Step Id's to steps\n        const steps: NodeListOf<HTMLIfxStepElement> = this.el.querySelectorAll('ifx-step');\n        steps[steps.length-1].lastStep = true;\n        for(let i = 0; i < steps.length; i++){\n            steps[i].stepId = i+1;\n        }\n        this.activeStep = Math.max(1, Math.min(steps.length+1, this.activeStep));\n        this.stepsCount = steps.length;\n        this.updateChildren();\n    }\n    \n    componentWillUpdate(){\n        this.updateChildren();\n    }\n\n    render(){\n        return(\n            <div class={`stepper ${this.variant}`}>\n                {   \n                    this.variant === 'compact' && <div class='stepper-progress'>\n                        <div class = 'progress-detail'>\n                            {`${this.activeStep} of ${this.stepsCount}`}\n                        </div>\n                    </div>\n                }\n\n                <div class={`stepper-wrapper`}>\n                    <slot/>\n                </div>\n            </div>\n        );\n    };\n\n    componentDidRender(){\n        // Updating progress bar in compact version\n        if(this.variant == 'compact'){\n            const progressBar: HTMLElement = this.el.shadowRoot.querySelector('.stepper-progress')\n            progressBar.style.setProperty('--pb', `${(this.activeStep/(this.stepsCount)) * 100}%`);\n        }\n    }\n}\n"],"names":["Stepper","updateChildren","steps","this","el","querySelectorAll","i","length","stepperState","activeStep","showNumber","variant","componentWillLoad","lastStep","stepId","Math","max","min","stepsCount","componentWillUpdate","render","h","class","concat","componentDidRender","shadowRoot","querySelector","style","setProperty"],"sourceRoot":""}