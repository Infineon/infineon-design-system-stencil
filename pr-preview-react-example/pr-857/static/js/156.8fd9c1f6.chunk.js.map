{"version":3,"file":"static/js/156.8fd9c1f6.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/sidebar/sidebar-item.scss?tag=ifx-sidebar-item&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/sidebar/sidebar-item.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n:host { \n  position: relative;\n}\n\n.sidebar__nav-item, .sidebar__nav-item.header__section {\n  &:focus { \n    outline: none;\n    & .sidebar__nav-item-icon-wrapper { \n      color: tokens.$ifxColorOcean600;\n    }\n    & .sidebar__nav-item-label { \n      outline: none;\n      color: tokens.$ifxColorOcean600;\n    }\n    & .sidebar__nav-item-indicator {\n      & .item__arrow-wrapper { \n        & ifx-icon { \n          color: tokens.$ifxColorOcean600;\n        }\n      }\n    }\n  }\n\n  &:hover { \n    outline: none;\n    & .sidebar__nav-item-icon-wrapper { \n      color: tokens.$ifxColorOcean600;\n    }\n    & .sidebar__nav-item-label { \n      outline: none;\n      color: tokens.$ifxColorOcean600;\n    }\n\n    & .sidebar__nav-item-indicator {\n      & .item__arrow-wrapper { \n        & ifx-icon { \n          color: tokens.$ifxColorOcean600;\n        }\n      }\n    }\n  }\n}\n\n.sidebar__nav-item {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n  gap: 4px;\n  flex: none;\n  order: 0;\n  flex-grow: 0;\n  text-decoration: none;\n  color: tokens.$ifxColorBaseBlack;\n  cursor: pointer;\n\n  &.active { \n    color: tokens.$ifxColorOcean500;\n  }\n\n    &.active-section { \n      &::before { \n        content: \"\";\n        position: absolute;\n        left: -44px;\n        height: 40px;\n        width: 2px;\n        background: tokens.$ifxColorOcean500;\n      }\n    }\n  \n\n  &.open { \n    & .sidebar__nav-item-label { \n      font-family: Source Sans 3;\n      font-size: 16px;\n      font-style: normal;\n      font-weight: 400;\n      line-height: 24px;\n    }\n\n    & .sidebar__nav-item-indicator { \n      & .item__arrow-wrapper { \n        & ifx-icon { \n          transform: rotate(-180deg);\n        }\n      }\n    }\n  }\n\n  &.header__section { \n    box-sizing: padding-box;\n    border-top: 1px solid tokens.$ifxColorEngineering200;\n    padding: 20px 0px;\n    display: -webkit-flex;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: horizontal;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    &.active-section { \n      &::before { \n        content: \"\";\n        position: absolute;\n        left: -32px;\n        height: 40px;\n        width: 2px;\n        background: tokens.$ifxColorOcean500;\n      }\n    }\n    \n    &.open { \n      & .sidebar__nav-item-indicator { \n        & .item__arrow-wrapper { \n          & ifx-icon { \n            transform: rotate(-180deg);\n          }\n        }\n      }\n    }\n\n    & .sidebar__nav-item-label { \n      color: tokens.$ifxColorBaseBlack;\n      font-family: Source Sans 3;\n      font-size: 16px;\n      font-style: normal;\n      font-weight: 600;\n      line-height: 24px; \n    }\n  }\n\n  & .sidebar__nav-item-icon-wrapper {\n    display: flex;\n    width: tokens.$ifxSize300;\n    height: tokens.$ifxSize300;\n    justify-content: center;\n    align-items: center;\n    gap: tokens.$ifxSpace100;\n    flex-shrink: 0;\n\n    &.noIcon {\n      display: none;\n    }\n\n    & ifx-icon {\n      width: tokens.$ifxSize200;\n      height: tokens.$ifxSize200;\n    }\n  }\n\n  & .sidebar__nav-item-label {\n    font-style: normal;\n    font-weight: 400;\n    font-size: tokens.$ifxFontSizeM;\n    line-height: tokens.$ifxLineHeightM;\n    display: flex;\n    align-items: center;\n    flex: none;\n    order: 1;\n    flex-grow: 1;\n    cursor: pointer;\n  }\n\n  & .sidebar__nav-item-indicator {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    padding: 0px 4px;\n    flex: none;\n    order: 2;\n    flex-grow: 0;\n  }\n}\n\n.expandable__submenu { \n  display: none;\n  list-style-type: none;\n  flex-direction: column;\n  padding: 0;\n  margin: 0;\n  padding-left: 12px;\n\n  &.open { \n    display: flex;\n  }\n}\n  ","import { Component, h, Prop, Element, State, Listen, Watch, Event, EventEmitter, Method } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-sidebar-item',\n  styleUrl: 'sidebar-item.scss',\n  shadow: true\n})\nexport class SidebarItem {\n  @Element() el;\n  @Prop() icon: string = \"\"\n  @State() hasIcon: boolean = false;\n  @State() hasIconWrapper: boolean = false;\n  @Prop() href: string = \"\";\n  @State() internalHref: string = \"\";\n  @Prop() target: string = \"_self\";\n  @State() isExpandable: boolean = false;\n  @State() isNested: boolean = true;\n  @Prop() numberIndicator: number;\n  @Prop() active: boolean = false; // set to true manually or by clicking on a navigation item\n  @Prop() isActionItem: boolean = false; // if an item is an action item, it can not become active\n\n  @State() internalActiveState: boolean = false;\n\n  @Event({ bubbles: true, composed: true }) ifxSidebarMenu: EventEmitter;\n  @Event({ bubbles: true, composed: true }) ifxSidebarNavigationItem: EventEmitter;\n  @Event({ bubbles: true, composed: true }) ifxSidebarActionItem: EventEmitter;\n\n\n  @Prop() value: string = \"\"\n  @Prop() handleItemClick: (item: HTMLElement) => void;\n\n\n  @Watch('active')\n  handleActiveChange(newValue: boolean, oldValue: boolean) {\n    // If the item is an action item, ignore the active prop\n    if (this.isActionItem) {\n      this.internalActiveState = false;\n      return;\n    }\n    this.internalActiveState = newValue;\n    if (newValue !== oldValue) {\n      let labelElement = this.getNavItem(this.el.shadowRoot)\n      if (!this.isExpandable && !newValue) {\n        this.handleClassList(labelElement, 'remove', 'active');\n      }\n      if (!this.isExpandable && newValue) {\n        this.handleClassList(labelElement, 'add', 'active');\n      }\n    }\n  }\n\n\n\n  @Listen('consoleError')\n  handleConsoleError(event: CustomEvent<boolean>) {\n    if (event.detail) {\n      this.hasIcon = false;\n    } else {\n      this.hasIcon = true;\n    }\n  }\n\n  handleEventEmission() {\n    // Get the active item section\n    this.ifxSidebarMenu.emit(this.el)\n  }\n\n  handleClassList(el, type, className) {\n    el.classList[type](className)\n    if (type === 'contains') {\n      return el.classList.contains(className)\n    }\n  }\n\n  getExpandableMenu() {\n    const expandableSubmenu = this.el.shadowRoot.querySelector('.expandable__submenu')\n    return expandableSubmenu\n  }\n\n  getNavItem(el) {\n    return el?.querySelector('.sidebar__nav-item')\n  }\n\n\n\n  getSidebarMenuItems(el = this.el) {\n    const sidebarItems = el.querySelectorAll('ifx-sidebar-item');\n    if (sidebarItems.length === 0) {\n      return el.shadowRoot.querySelectorAll('ifx-sidebar-item');\n    }\n    return sidebarItems;\n  }\n\n  getSidebarMenuItem() {\n    const sidebarItem = this.el.shadowRoot.querySelector('.sidebar__nav-item')\n    return sidebarItem;\n  }\n\n  toggleSubmenu() {\n    if (this.isExpandable) {\n      const menuItem = this.getSidebarMenuItem();\n      const expandableMenu = this.getExpandableMenu();\n      this.handleClassList(expandableMenu, 'toggle', 'open');\n      this.handleClassList(menuItem, 'toggle', 'open');\n      // Emit an event with the current component\n      this.handleEventEmission();\n    } else {\n      // If the sidebar item is not expandable, it's a leaf item without a submenu.\n      // Emit an event to the parent `ifx-sidebar` component to notify it that a leaf item has been clicked.\n      if (this.isActionItem) { //its an action item that eg opens an overlay etc and should not influence the active state of the item\n        this.ifxSidebarActionItem.emit(this.el); // emit new event if isActionItem is true\n        return;\n      } else { //its a navigation item which becomes active after clicking it\n        this.handleActiveChange(true, this.internalActiveState)\n        this.ifxSidebarNavigationItem.emit(this.el);\n      }\n      // If the sidebar item is selectable (not expandable), then call the handler function with the current element.\n      if (this.handleItemClick) {\n        this.handleItemClick(this.el);\n      }\n    }\n    // // Emit an event with the current component\n    // this.handleEventEmission();\n  }\n\n\n\n  handleExpandableMenu(sidebarItems) {\n    const sidebarExpandableMenu = this.getExpandableMenu();\n    sidebarItems.forEach((el: HTMLElement) => {\n      const li = document.createElement('li')\n      li.appendChild(el)\n      sidebarExpandableMenu.appendChild(li)\n    })\n  }\n\n  parentElementIsSidebar() {\n    const parentElement = this.el.parentElement;\n    if (parentElement.tagName.toUpperCase() === 'IFX-SIDEBAR') {\n      return true;\n    } else return false;\n  }\n\n  checkIfMenuItemIsNested() {\n    const parentIsSidebar = this.parentElementIsSidebar()\n    if (parentIsSidebar) {\n      this.isNested = false;\n    }\n  }\n\n  isActive(iteratedComponent) {\n    const activeAttributeValue = iteratedComponent.getAttribute('active');\n    const isActive = activeAttributeValue === 'true';\n    return isActive\n  }\n\n  getParentSection(el: HTMLElement) {\n    let parentElement = el.parentElement;\n\n    while (parentElement && parentElement.tagName.toUpperCase() !== 'IFX-SIDEBAR') {\n      if (parentElement.tagName.toUpperCase() === 'IFX-SIDEBAR-ITEM') {\n        return parentElement;\n      }\n      parentElement = parentElement.parentElement;\n    }\n\n    return null;\n  }\n\n\n\n  handleBorderIndicatorDisplacement(menuItem) {\n    // Recursive function to handle each item\n    const handleItem = (item, menuItem) => {\n      const isActive = this.isActive(item);\n      if (isActive) {\n        const isOpen = this.handleClassList(menuItem, 'contains', 'open');\n        const activeMenuItemSection = this.getActiveItemSection();\n        if (!isOpen) {\n          this.handleClassList(activeMenuItemSection, 'add', 'active-section');\n        } else {\n          this.handleClassList(activeMenuItemSection, 'remove', 'active-section');\n        }\n      }\n\n      // Process each child item\n      const children = this.getSidebarMenuItems(item);\n      children.forEach((child) => handleItem(child, menuItem));\n    }\n\n    // Start with the top-level items\n    const topLevelItems = this.getSidebarMenuItems();\n    topLevelItems.forEach((item) => handleItem(item, menuItem));\n  }\n\n\n  setHref() {\n    if (this.href.toLowerCase().trim() === \"\") {\n      this.internalHref = undefined;\n    } else this.internalHref = this.href;\n  }\n\n  getActiveItemSection() {\n    const parentIsSidebar = this.parentElementIsSidebar()\n    if (parentIsSidebar) {\n      const labelElement = this.getNavItem(this.el.shadowRoot)\n      return labelElement;\n    } else {\n      const labelElement = this.getNavItem(this.el.shadowRoot)\n      return labelElement;\n    }\n  }\n\n  @Method()\n  async setActiveClasses() {\n    const activeMenuItem = this.getNavItem(this.el.shadowRoot)\n    this.handleClassList(activeMenuItem, 'add', 'active')\n  }\n\n  handleActiveState() {\n    if (this.internalActiveState) {\n      this.setActiveClasses()\n    }\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.toggleSubmenu()\n    }\n  }\n\n  componentDidLoad() {\n    this.handleActiveState();\n    if (this.isExpandable) {\n      const sidebarItems = this.getSidebarMenuItems();\n      this.handleExpandableMenu(sidebarItems)\n    }\n  }\n\n  componentWillLoad() {\n    this.internalActiveState = this.active;\n    this.checkIfMenuItemIsNested();\n    this.setHref()\n    const sidebarItems = this.getSidebarMenuItems();\n    if (sidebarItems.length !== 0) {\n      this.isExpandable = true;\n    } else {\n      this.isExpandable = false;\n    }\n  }\n\n  componentWillUpdate() {\n    // If the active prop has been set to true and the internalActiveState has not been set to true yet\n    if (this.active && !this.internalActiveState) {\n      // Set the internal active state to true\n      this.internalActiveState = this.active;\n\n      // Emit the event to notify the parent Sidebar\n      this.ifxSidebarNavigationItem.emit(this.el);\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <a tabIndex={1} onKeyDown={(event) => this.handleKeyDown(event)} href={this.internalHref} onClick={() => this.toggleSubmenu()} target={this.target} class={`sidebar__nav-item ${!this.isNested && this.isExpandable ? 'header__section' : \"\"}`}>\n          {this.icon &&\n            <div class={`sidebar__nav-item-icon-wrapper ${!this.hasIcon ? 'noIcon' : \"\"}`}>\n              <ifx-icon icon={this.icon}></ifx-icon>\n            </div>}\n          <div class=\"sidebar__nav-item-label\">\n            <slot />\n          </div>\n          <div class=\"sidebar__nav-item-indicator\">\n            {this.isExpandable &&\n              <span class='item__arrow-wrapper'>\n                <ifx-icon icon=\"chevron-down-12\" />\n              </span>\n            }\n\n            {!this.isExpandable && !this.isNested &&\n              <span class='item__number-indicator'>\n                <ifx-number-indicator>{this.numberIndicator}</ifx-number-indicator>\n              </span>}\n\n          </div>\n        </a>\n        {this.isExpandable && <ul class='expandable__submenu'></ul>}\n\n      </div>\n    );\n  }\n}\n"],"names":["SidebarItem","handleActiveChange","newValue","oldValue","this","isActionItem","internalActiveState","labelElement","getNavItem","el","shadowRoot","isExpandable","handleClassList","handleConsoleError","event","detail","hasIcon","handleEventEmission","ifxSidebarMenu","emit","type","className","classList","contains","getExpandableMenu","querySelector","getSidebarMenuItems","arguments","length","undefined","sidebarItems","querySelectorAll","getSidebarMenuItem","toggleSubmenu","menuItem","expandableMenu","ifxSidebarActionItem","ifxSidebarNavigationItem","handleItemClick","handleExpandableMenu","sidebarExpandableMenu","forEach","li","document","createElement","appendChild","parentElementIsSidebar","parentElement","tagName","toUpperCase","checkIfMenuItemIsNested","isNested","isActive","iteratedComponent","getAttribute","getParentSection","handleBorderIndicatorDisplacement","handleItem","item","isOpen","activeMenuItemSection","getActiveItemSection","child","setHref","href","toLowerCase","trim","internalHref","setActiveClasses","activeMenuItem","handleActiveState","handleKeyDown","key","componentDidLoad","componentWillLoad","active","componentWillUpdate","render","h","tabIndex","onKeyDown","onClick","target","class","concat","icon","numberIndicator"],"sourceRoot":""}