{"version":3,"file":"static/js/5544.295c6489.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/dropdown/dropdown.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/dropdown/dropdown.scss?tag=ifx-dropdown&encapsulation=shadow"],"sourcesContent":["//dropdown.tsx\nimport { Component, Prop, h, Element, Listen, Method, Watch, State, EventEmitter, Event } from \"@stencil/core\";\nimport { createPopper } from '@popperjs/core';\n\nimport { IOpenable } from './IOpenable';\n\nexport type Placement =\n  | 'auto'\n  | 'auto-start'\n  | 'auto-end'\n  | 'top'\n  | 'top-start'\n  | 'top-end'\n  | 'bottom'\n  | 'bottom-start'\n  | 'bottom-end'\n  | 'right'\n  | 'right-start'\n  | 'right-end'\n  | 'left'\n  | 'left-start'\n  | 'left-end';\n\n@Component({\n  tag: 'ifx-dropdown',\n  styleUrl: 'dropdown.scss',\n  shadow: true\n})\n\nexport class Dropdown {\n  @Prop() placement: Placement = 'bottom-start';\n\n  // isOpen prop\n  @Prop() defaultOpen: boolean = false;\n  // internal state for isOpen prop\n  @State() internalIsOpen: boolean = false;\n\n  // isOpen prop\n  @Prop() noAppendToBody: boolean = false;\n\n  // Custom events for opening and closing dropdown\n  @Event() ifxOpen: EventEmitter;\n  @Event() ifxClose: EventEmitter;\n  @Event() ifxDropdown: EventEmitter;\n\n  // determine if dropdown is disabled\n  @Prop() disabled: boolean;\n\n  @Prop() noCloseOnOutsideClick: boolean = false;\n  @Prop() noCloseOnMenuClick: boolean = false;\n\n  // Reference to host element\n  @Element() el;\n  // Dropdown trigger and menu\n  @State() trigger: HTMLElement;\n  @State() menu: HTMLElement\n  // Popper instance for positioning\n  popperInstance: any;\n\n\n\n  componentWillLoad() {\n    //maybe not needed\n    this.updateSlotContent();\n    this.watchHandlerIsOpen(this.defaultOpen, this.internalIsOpen);\n  }\n\n  @Watch('defaultOpen')\n  watchHandlerIsOpen(newValue: boolean, oldValue: boolean) {\n    if (newValue !== oldValue && newValue !== this.internalIsOpen) {\n      if (newValue) {\n        this.openDropdown();\n      } else {\n        this.closeDropdown();\n      }\n    }\n  }\n\n  @Watch('disabled')\n  watchHandlerDisabled(newValue: boolean) {\n    if (this.trigger) {\n      (this.trigger as undefined as HTMLIfxDropdownTriggerButtonElement).disabled = newValue;\n    }\n  }\n\n\n  @Listen('slotchange')\n  watchHandlerSlot() {\n    this.updateSlotContent();\n  }\n\n\n\n  // handling assignment of trigger and menu\n  updateSlotContent() {\n    // Get dropdown trigger. name has to start with ifx-dropdown-trigger\n    this.trigger = this.el.querySelector('ifx-dropdown-trigger-button, ifx-dropdown-trigger');\n    if (this.trigger) {\n      (this.trigger as undefined as HTMLIfxDropdownTriggerButtonElement).disabled = this.disabled;\n      this.trigger.removeEventListener('click', this.triggerClickHandler.bind(this));\n      this.trigger.addEventListener('click', this.triggerClickHandler.bind(this));\n    }\n    // Remove menu if exists from body\n    if (!this.noAppendToBody) {\n      if (this.menu) {\n        this.menu.remove();\n      }\n      // Get new menu and add to body\n      this.menu = this.el.querySelector('ifx-dropdown-menu');\n\n      // event handler for closing dropdown on menu click\n      document.body.append(this.menu);\n    } else {\n      this.menu = this.el.querySelector('ifx-dropdown-menu');\n\n    }\n    this.menu.removeEventListener('click', this.menuClickHandler.bind(this));\n    this.menu.addEventListener('click', this.menuClickHandler.bind(this));\n\n  }\n\n  menuClickHandler() {\n    if (!this.noCloseOnMenuClick) {\n      this.closeDropdown();\n    }\n  }\n\n  triggerClickHandler() {\n    if (!this.internalIsOpen) {\n      this.openDropdown();\n    } else {\n      this.closeDropdown();\n    }\n  }\n\n  disconnectedCallback() {\n    // Destroy popper instance if exists\n    if (this.popperInstance) {\n      this.popperInstance.destroy();\n      this.popperInstance = null;\n    }\n    // Remove menu if exists\n    if (this.menu) {\n      this.menu.remove();\n    }\n  }\n\n  @Method()\n  async isOpen() {\n    return this.internalIsOpen;\n  }\n\n  @Method()\n  async closeDropdown() {\n    if (this.internalIsOpen) {\n      this.internalIsOpen = false;\n      // sets isOpen prop on trigger and menu\n      (this.trigger as unknown as IOpenable).isOpen = false;\n      (this.menu as unknown as IOpenable).isOpen = false;\n      // Emit close event\n      this.ifxClose.emit();\n    }\n    // Destroy popper instance if exists\n    if (this.popperInstance) {\n      this.popperInstance.destroy();\n      this.popperInstance = null;\n    }\n  }\n\n  @Method()\n  async openDropdown() {\n    if (!this.internalIsOpen && !this.disabled) {\n      this.internalIsOpen = true;\n      // sets isOpen prop on trigger and menu\n      (this.trigger as unknown as IOpenable).isOpen = true;\n      (this.menu as unknown as IOpenable).isOpen = true;\n      // Create popper instance for positioning\n      this.popperInstance = createPopper(\n        this.el,\n        this.menu,\n        { placement: this.placement });\n\n      this.ifxOpen.emit();\n    }\n  }\n\n  //emitted by and listening to it from the dropdown menu right now\n  // @Listen('ifxDropdownMenu')\n  // handleDropdownMenuEvents(event: CustomEvent) {\n  //   this.ifxDropdown.emit(event.detail)\n  //   console.log('Selected item received in higher-level parent:');\n  // }\n\n  @Listen('mousedown', { target: 'document' })\n  handleOutsideClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    // Close dropdown if outside click\n    if (!this.noCloseOnOutsideClick && !this.el.contains(target) && !this.menu.contains(target)) {\n      this.closeDropdown();\n    }\n  }\n\n  render() {\n    return (\n      <div class='dropdown'>\n        <slot />\n      </div>\n    )\n  }\n}","@use \"~@infineon/design-system-tokens/dist/tokens\";\n\n:host {\n    display: inline-block;\n}"],"names":["Dropdown","this","updateSlotContent","watchHandlerIsOpen","defaultOpen","internalIsOpen","key","value","newValue","oldValue","openDropdown","closeDropdown","trigger","disabled","el","querySelector","removeEventListener","triggerClickHandler","bind","addEventListener","noAppendToBody","menu","remove","document","body","append","menuClickHandler","noCloseOnMenuClick","popperInstance","destroy","_isOpen","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","stop","apply","arguments","_closeDropdown","_callee2","_context2","isOpen","ifxClose","emit","_openDropdown","_callee3","_context3","createPopper","placement","ifxOpen","event","target","noCloseOnOutsideClick","contains","h","class","get"],"sourceRoot":""}