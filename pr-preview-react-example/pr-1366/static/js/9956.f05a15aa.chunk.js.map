{"version":3,"file":"static/js/9956.f05a15aa.chunk.js","mappings":"iKAAA,MCQaA,EAAI,M,iIAGkB,G,aACN,C,CAI3BC,kBAAAA,CAAmBC,GACjB,MAAMC,EAAOD,EAAME,eACbC,EAAcC,KAAKC,GAAGC,WAAWC,cAAc,YAC/CC,EAAeJ,KAAKK,kBACrBR,EAAKS,SAASF,IAAkBP,EAAKS,SAASP,IACjDC,KAAKO,Y,CAKTC,+BAAAA,CAAgCZ,GAC9BI,KAAKS,cAAgBb,EAAMc,OAC3BV,KAAKW,gBAAgBC,KAAKhB,EAAMc,QAChCV,KAAKa,Y,CAGPR,eAAAA,GAEE,OAD4BL,KAAKC,GAAGE,cAAc,oB,CAIpDI,UAAAA,GACE,IAAIO,EAAwBd,KAAKK,kBAC9BS,EAAsBC,QACvBf,KAAKgB,kBAEPF,EAAsBC,QAAS,EAC/Bf,KAAKiB,QAAS,C,CAGhBJ,UAAAA,GACE,IAAIC,EAAwBd,KAAKK,kBACjCS,EAAsBC,QAAUD,EAAsBC,OACtDf,KAAKiB,OAASH,EAAsBC,OACpCf,KAAKgB,iB,CAGPA,eAAAA,GAC2BhB,KAAKC,GAAGC,WAAWC,cAAc,yBACzCe,UAAUC,OAAO,O,CAGpCC,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,wDAAiBtB,KAAKS,cAAa,aAAa,4BAA4Bc,MAAM,uBAChFF,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAK,WAAAC,OAAaxB,KAAKiB,OAAS,SAAW,GAAE,KAAAO,OAA2B,KAAvBxB,KAAKS,cAAuB,WAAa,IAAMgB,QAASA,IAAMzB,KAAKa,aAAca,SAAU,IAC/IL,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,iBACRvB,KAAKS,cAAgBT,KAAKS,cAAgBT,KAAK2B,cAElDN,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,yBACTF,EAAAA,EAAAA,GAAA,YAAAC,IAAA,2CAAUM,KAAK,qBAGnBP,EAAAA,EAAAA,GAAA,QAAAC,IAAA,2CAAMO,KAAK,S,wCDrEH,m4C","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chips/chip.scss?tag=ifx-chip&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chips/chip.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n:host {\n  display: inline-block;\n}\n\n.container {\n  //display: inline-block;\n  position: relative;\n  font-family: var(--ifx-font-family);\n\n  & .wrapper {\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n    padding: 8px 16px;\n    gap: tokens.$ifxSpace100;\n\n    background: tokens.$ifxColorBaseWhite;\n\n    border: 1px solid  tokens.$ifxColorEngineering300;\n    border-radius: 100px;\n\n    &:hover {\n      cursor: pointer;\n      border: 1px solid tokens.$ifxColorEngineering500;\n    }\n\n    &.active {\n      border: 1px solid tokens.$ifxColorOcean500;\n      outline: none;\n    }\n\n    & .wrapper-label {\n      font-style: normal;\n      font-weight: 400;\n      font-size: tokens.$ifxFontSizeS;\n      line-height: tokens.$ifxLineHeightS;\n      display: flex;\n      align-items: center;\n      color: tokens.$ifxColorBaseBlack;\n      flex: none;\n      order: 0;\n      flex-grow: 0;\n    }\n\n    & .wrapper-close-button {\n      display: flex;\n      align-items: center;\n      \n      & ifx-icon {\n        transition: .3s;\n        width: 12px;\n        height: 12px;\n      }\n\n      &.show {\n        & ifx-icon {\n          transition: transform .3s;\n          transform: rotate(-180deg);\n        }\n      }\n    }\n\n    &.selected {\n      border: 1px solid tokens.$ifxColorOcean500;\n      outline: 2px solid tokens.$ifxColorOcean500;\n      outline-offset: -3px;\n\n      & .wrapper-label {\n        font-style: normal;\n        font-weight: 600;\n        font-size: tokens.$ifxFontSizeS;\n        line-height: tokens.$ifxLineHeightS;\n        color: tokens.$ifxColorOcean500;\n      }\n\n      & ifx-icon {\n        color: tokens.$ifxColorOcean500;\n      }\n\n      &:hover {\n        border: 1px solid tokens.$ifxColorOcean600;\n        outline: 2px solid tokens.$ifxColorOcean600;\n\n        & ifx-icon,\n        & .wrapper-label {\n          color: tokens.$ifxColorOcean600;\n        }\n      }\n    }\n  }\n}","import { Component, h, Element, Prop, Listen, State, Event, EventEmitter } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-chip',\n  styleUrl: 'chip.scss',\n  shadow: true\n})\n\nexport class Chip {\n  @Element() el;\n  @Prop() placeholder: string;\n  @State() selectedValue: string = \"\";\n  @State() active: boolean = false;\n  @Event() ifxDropdownMenu: EventEmitter<CustomEvent>;\n\n  @Listen('mousedown', { target: 'document' })\n  handleOutsideClick(event: MouseEvent) {\n    const path = event.composedPath();\n    const chipWrapper = this.el.shadowRoot.querySelector('.wrapper');\n    const dropdownMenu = this.getDropdownMenu();\n    if (!path.includes(dropdownMenu) && !path.includes(chipWrapper)) {\n      this.closedMenu();\n    }\n  }\n\n  @Listen('ifxDropdownItem')\n  handleDropdownItemValueEmission(event: CustomEvent) {\n    this.selectedValue = event.detail;\n    this.ifxDropdownMenu.emit(event.detail);\n    this.toggleMenu()\n  }\n\n  getDropdownMenu() { \n    let dropdownMenuComponent = this.el.querySelector('ifx-dropdown-menu');\n    return dropdownMenuComponent\n  }\n\n  closedMenu() {\n    let dropdownMenuComponent = this.getDropdownMenu()\n    if(dropdownMenuComponent.isOpen) {\n      this.toggleCloseIcon();\n    }\n    dropdownMenuComponent.isOpen = false;\n    this.active = false;\n  }\n\n  toggleMenu() { \n    let dropdownMenuComponent = this.getDropdownMenu()\n    dropdownMenuComponent.isOpen = !dropdownMenuComponent.isOpen;\n    this.active = dropdownMenuComponent.isOpen;\n    this.toggleCloseIcon()\n  }\n\n  toggleCloseIcon() { \n    const closeIconWrapper = this.el.shadowRoot.querySelector('.wrapper-close-button')\n    closeIconWrapper.classList.toggle('show')\n  }\n\n  render() {\n    return (\n      <div aria-value={this.selectedValue} aria-label='chip with a dropdown menu' class=\"dropdown container\">\n        <div class={`wrapper ${this.active ? 'active' : ''} ${this.selectedValue !== '' ? 'selected' : ''}`} onClick={() => this.toggleMenu()} tabIndex={0}>\n          <div class=\"wrapper-label\">\n            {this.selectedValue ? this.selectedValue : this.placeholder}\n          </div>\n          <div class=\"wrapper-close-button\">\n            <ifx-icon icon=\"chevrondown12\"></ifx-icon>\n          </div>\n        </div>\n        <slot name=\"menu\" />\n      </div>\n    );\n  }\n}"],"names":["Chip","handleOutsideClick","event","path","composedPath","chipWrapper","this","el","shadowRoot","querySelector","dropdownMenu","getDropdownMenu","includes","closedMenu","handleDropdownItemValueEmission","selectedValue","detail","ifxDropdownMenu","emit","toggleMenu","dropdownMenuComponent","isOpen","toggleCloseIcon","active","classList","toggle","render","h","key","class","concat","onClick","tabIndex","placeholder","icon","name"],"sourceRoot":""}