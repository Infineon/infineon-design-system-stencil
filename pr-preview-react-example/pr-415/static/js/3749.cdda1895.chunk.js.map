{"version":3,"file":"static/js/3749.cdda1895.chunk.js","mappings":"gNAQaA,EAAS,W,wGAGU,c,WACW,G,YAChB,E,kBACM,G,cACJ,E,eACC,E,eACA,E,WACJ,C,4CAKxB,SAAaC,GACPA,IAAaC,KAAKC,aAAaC,QACjCF,KAAKC,aAAaC,MAAQH,E,GAE7B,CAAAI,IAAA,cAAAD,MAGD,WACE,IAAME,EAAQJ,KAAKC,aAAaC,MAChCF,KAAKE,MAAQE,EACbJ,KAAKK,SAASC,KAAKN,KAAKE,M,GACzB,CAAAC,IAAA,SAAAD,MAED,WAAM,IAAAK,EAAA,KACJ,OACEC,EAAAA,EAAAA,GAAA,OAAKC,MAAK,wBAAAC,OAA0BV,KAAKW,SAAW,WAAa,MAC/DH,EAAAA,EAAAA,GAAA,OAAKC,MAAM,2BACTD,EAAAA,EAAAA,GAAA,SAAOI,QAAQ,eACbJ,EAAAA,EAAAA,GAAA,gBAGJA,EAAAA,EAAAA,GAAA,OAAKC,MAAM,8BACTD,EAAAA,EAAAA,GAAA,SACEK,IAAK,SAACC,GAAE,OAAMP,EAAKN,aAAea,CAAE,EACpCC,SAAUf,KAAKe,SACfJ,SAAUX,KAAKW,SACfK,KAAK,OACLC,GAAG,aACHf,MAAOF,KAAKE,MACZgB,QAAS,kBAAMX,EAAKY,aAAa,EACjCC,YAAapB,KAAKoB,YAClBX,MAAK,GAAAC,OAAKV,KAAKqB,MAAQ,QAAU,GAAE,KAAAX,OAAIV,KAAKsB,QAAU,UAAY,MACnEtB,KAAKqB,QACJb,EAAAA,EAAAA,GAAA,OAAKC,MAAM,mCACRT,KAAKuB,cAGTvB,KAAKwB,OAAQhB,EAAAA,EAAAA,GAAA,YAAUgB,KAAK,qB,GAKpC,CAAArB,IAAA,KAAAsB,IAAA,W,4FAzDmB,G,QCRD,m8E","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/text-field/text-field.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/text-field/text-field.scss?tag=ifx-text-field&encapsulation=shadow"],"sourcesContent":["import { Component, h, Event, Element, Prop, EventEmitter, Watch } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-text-field',\n  styleUrl: 'text-field.scss',\n  shadow: true\n})\n\nexport class TextField {\n  private inputElement: HTMLInputElement;\n  @Element() el;\n  @Prop() placeholder: string = \"Placeholder\"\n  @Prop({ mutable: true }) value: string = '';\n  @Prop() error: boolean = false;\n  @Prop() errorMessage: string = \"\"\n  @Prop() success: boolean = false;\n  @Prop() disabled: boolean = false;\n  @Prop() readonly: boolean = false;\n  @Prop() icon: boolean = false;\n  @Event() ifxInput: EventEmitter<String>;\n\n\n  @Watch('value')\n  valueWatcher(newValue: string) {\n    if (newValue !== this.inputElement.value) {\n      this.inputElement.value = newValue;\n    }\n  }\n\n\n  handleInput() {\n    const query = this.inputElement.value;\n    this.value = query; // update the value property when input changes\n    this.ifxInput.emit(this.value);\n  }\n\n  render() {\n    return (\n      <div class={`textInput__container ${this.disabled ? 'disabled' : \"\"}`}>\n        <div class=\"textInput__top-wrapper\">\n          <label htmlFor=\"text-field\">\n            <slot />\n          </label>\n        </div>\n        <div class=\"textInput__bottom-wrapper\">\n          <input\n            ref={(el) => (this.inputElement = el)}\n            readonly={this.readonly}\n            disabled={this.disabled}\n            type=\"text\"\n            id='text-field'\n            value={this.value}\n            onInput={() => this.handleInput()}\n            placeholder={this.placeholder}\n            class={`${this.error ? 'error' : \"\"} ${this.success ? \"success\" : \"\"}`} />\n          {this.error &&\n            <div class=\"textInput__bottom-wrapper-error\">\n              {this.errorMessage}\n            </div>}\n\n          {this.icon && <ifx-icon icon='chevron-down-16'></ifx-icon>}\n\n        </div>\n      </div>\n    );\n  }\n}\n","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n.textInput__container {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 0px;\n  width: 100%;\n  flex: none;\n  order: 0;\n  align-self: stretch;\n  flex-grow: 0;\n\n  &.disabled {\n    & .textInput__top-wrapper {\n      & label {\n        color: #BFBBBB;\n      }\n    }\n\n    & .textInput__bottom-wrapper {\n      input {\n        border: 1px solid #BFBBBB;\n\n        &::placeholder {\n          color: #BFBBBB;\n        }\n      }\n    }\n  }\n\n  & .textInput__top-wrapper {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    padding: 0px;\n    gap: 4px;\n    flex: none;\n    order: 0;\n    align-self: stretch;\n    flex-grow: 0;\n\n    & label {\n      font-style: normal;\n      font-weight: 400;\n      font-size: tokens.$ifxFontSizeM;\n      line-height: tokens.$ifxLineHeightM;\n      display: flex;\n      align-items: center;\n      color: tokens.$ifxColorBaseBlack;\n      flex: none;\n      order: 0;\n      flex-grow: 0;\n    }\n  }\n\n  & .textInput__bottom-wrapper {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    padding: 0px;\n    gap: 4px;\n    flex: none;\n    order: 1;\n    align-self: stretch;\n    flex-grow: 0;\n\n    & input {\n      box-sizing: border-box;\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      padding: 8px 16px;\n      gap: 6px;\n      height: tokens.$ifxSize500;\n      background-color: tokens.$ifxColorBaseWhite;\n      color: tokens.$ifxColorBaseBlack;\n      border: 1px solid #8D8786;\n      border-radius: tokens.$ifxBorderRadius12;\n      flex: none;\n      order: 0;\n      align-self: stretch;\n      flex-grow: 0;\n\n      &.error {\n        border: 1px solid #CD002F;\n\n        &:focus {\n          outline: none;\n        }\n      }\n\n      &.success {\n        border: 1px solid #4CA460;\n\n        &:focus {\n          outline: none;\n        }\n      }\n\n\n      &:focus:not(.error, .success) {\n        outline: none;\n        border: 1px solid #0A8276;\n      }\n\n      &:hover:not(:disabled, .error, .success) {\n        border: 1px solid #3C3A39;\n      }\n\n      &::placeholder {\n        font-style: normal;\n        font-weight: 400;\n        font-size: tokens.$ifxFontSizeM;\n        line-height: tokens.$ifxLineHeightM;\n        color: #8D8786;\n        flex: none;\n        order: 1;\n        flex-grow: 1;\n      }\n    }\n\n    & ifx-icon {\n      position: absolute;\n      top: 12px;\n      right: 17px;\n      transition: .3s;\n    }\n\n    &.show {\n      & ifx-icon {\n        transition: .3s;\n        transform: rotate(180deg);\n      }\n    }\n\n    & .textInput__bottom-wrapper-error {\n      font-style: normal;\n      font-weight: 400;\n      font-size: tokens.$ifxFontSizeXs;\n      line-height: tokens.$ifxLineHeightXs;\n      letter-spacing: 0.2px;\n      color: #CD002F;\n      flex: none;\n      order: 1;\n      align-self: stretch;\n      flex-grow: 0;\n    }\n  }\n}"],"names":["TextField","newValue","this","inputElement","value","key","query","ifxInput","emit","_this","h","class","concat","disabled","htmlFor","ref","el","readonly","type","id","onInput","handleInput","placeholder","error","success","errorMessage","icon","get"],"sourceRoot":""}