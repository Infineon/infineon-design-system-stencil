{"version":3,"file":"static/js/968.ecd00c0b.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/card/card.scss?tag=ifx-card&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/card/card.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/global/utils/tracking.ts"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n:host {\n  display: inline-flex;\n}\n\n.card {\n  position: relative;\n  display: inline-flex;\n  flex-direction: column;\n  word-wrap: break-word;\n  background-color: tokens.$ifxColorBaseWhite;\n  background-clip: border-box;\n  border: 1px solid tokens.$ifxColorEngineering200;\n  border-radius: 1px;\n  //width: 22rem;\n  width: 350px;\n  height: auto;\n  font-family: var(--ifx-font-family);\n\n\n  &.linkHovered {\n    border-color: tokens.$ifxColorEngineering200;\n  }\n\n  &.cardHovered {\n    border-color: tokens.$ifxColorOcean500;\n  }\n\n  &.noBtns {\n    & .vertical {\n      & .lower__body-wrapper {\n        padding-bottom: 24px;\n      }\n    }\n\n    & .horizontal {\n      & .lower__body-wrapper {\n        padding-bottom: 24px;\n      }\n    }\n  }\n\n  & .horizontal {\n    display: flex;\n    flex-direction: row;\n    min-height: 218px;\n\n    & .card-img {\n      flex: 1;\n      text-decoration: none;\n\n      &.noImage {\n        display: none;\n      }\n\n      & ::slotted([slot=img]) {\n        width: 100%;\n        vertical-align: bottom;\n      }\n    }\n\n    & .lower__body-wrapper {\n      flex: 1;\n      display: grid;\n      grid-template-rows: 1fr auto;\n\n      & .upper-body {\n        display: flex;\n        flex-direction: column;\n        text-decoration: none;\n        color: tokens.$ifxColorBaseBlack;\n        padding: 24px 24px 0px 24px;\n      }\n    }\n  }\n\n  & .vertical {\n    & .upper__body-wrapper {\n      text-decoration: none;\n      color: tokens.$ifxColorBaseBlack;\n\n      & .card-img {\n        height: 190px;\n\n        &.noImage {\n          display: none;\n        }\n      }\n\n      & .upper-body {\n        padding: 24px 24px 0px 24px;\n      }\n    }\n\n    & .lower__body-wrapper {\n      &:hover {\n        border-color: tokens.$ifxColorEngineering200;\n      }\n    }\n  }\n\n  &.horizontal {\n    flex-direction: row;\n    width: 538px;\n\n    & .card-img {\n      flex: 1;\n      order: 2;\n\n      & ::slotted([slot=img]) {\n        width: 100%;\n        height: 100%;\n        vertical-align: bottom;\n        object-fit: cover;\n      }\n    }\n\n    &.left {\n      & .horizontal {\n        & .card-img {\n          order: 1;\n        }\n\n        & .lower__body-wrapper {\n          order: 2;\n        }\n      }\n    }\n  }\n}\n\n.card:focus,\n.card:focus-visible,\n.focus {\n  outline: none;\n  border-color: tokens.$ifxColorOcean500 !important;\n}","import { Component, h, Host, Element, Prop, State, Listen } from '@stencil/core';\nimport { trackComponentView } from '../../global/utils/tracking';\n\n@Component({\n  tag: 'ifx-card',\n  styleUrl: 'card.scss',\n  shadow: true,\n})\n\nexport class Card {\n  @Element() el;\n  @State() noBtns: boolean;\n  @Prop() direction: 'horizontal' | 'vertical' = 'vertical';\n  @State() alignment: string;\n  @State() noImg: boolean;\n  @Prop() href: string = \"\";\n  @State() internalHref: string = \"\"\n  @Prop() target: string = \"_self\";\n\n  @Listen('imgPosition')\n  setImgPosition(event) {\n    this.alignment = event.detail\n  }\n\n  handleComponentAdjustment() {\n    const image = this.el.querySelector('ifx-card-image')\n    const links = this.el.querySelector('ifx-card-links')\n\n    if (!image) {\n      this.noImg = true;\n    } else this.noImg = false;\n\n    if (!links) {\n      this.noBtns = true;\n    } else this.noBtns = false;\n\n    if (this.href.trim() === \"\") {\n      this.internalHref = undefined;\n    } else this.internalHref = this.href;\n  }\n\n  handleClassList(el, type, className) {\n    el.classList[type](className)\n  }\n\n  handleHovering() {\n    const card = this.el.shadowRoot.querySelector('.card')\n    let cardHeadline = this.el.querySelector('ifx-card-headline');\n\n    if(this.href) { \n      card.addEventListener('mouseover', (ev) => {\n  \n        // const target = ev.target;\n        // const relatedTarget = ev.relatedTarget;\n  \n        // if (relatedTarget && relatedTarget !== target && !target.contains(relatedTarget)) {\n        //   this.handleClassList(card, 'add', 'borderHovered')\n        // }\n  \n        if (ev.target.nodeName === 'IFX-CARD-LINKS' || ev.target.nodeName === 'IFX-BUTTON') {\n          this.handleClassList(card, 'add', 'linkHovered')\n        } else {\n          this.handleClassList(card, 'add', 'cardHovered')\n          if (cardHeadline) {\n            cardHeadline.isHovered = true;\n          }\n        }\n      })\n\n      card.addEventListener('mouseout', () => {\n        if (cardHeadline) {\n          cardHeadline.isHovered = false;\n        }\n        //this.handleClassList(card, 'remove', 'borderHovered')\n        this.handleClassList(card, 'remove', 'cardHovered')\n        this.handleClassList(card, 'add', 'linkHovered')\n      })\n    }\n  }\n\n  componentWillLoad() {\n    this.handleComponentAdjustment()\n  }\n\n  componentDidLoad() {\n    this.handleHovering();\n    this.addEventListenersToHandleCustomFocusState();\n    trackComponentView('Card');\n\n  }\n\n\n  private addEventListenersToHandleCustomFocusState() {\n    const element = this.el.shadowRoot;\n    if (!element) {\n      console.error('element not found');\n      return;\n    }\n    const upperBodyWrapper = element.querySelector('.upper__body-wrapper');\n    if (!upperBodyWrapper) {\n      console.error('upper body wrapper not found');\n      return;\n    }\n\n    element.tabIndex = -1;\n    upperBodyWrapper.tabIndex = -1;\n\n  }\n\n\n  componentWillUpdate() {\n    this.handleComponentAdjustment()\n  }\n\n  render() {\n    return (\n      <Host>\n        <div aria-labelledby=\"label\" class={\n          `card \n          ${this.noBtns ? 'noBtns' : \"\"}\n          ${this.direction} \n          ${this.alignment}`\n        }>\n\n          {this.direction === 'horizontal' &&\n            <div class=\"horizontal\">\n              <a class={`card-img ${this.noImg ? 'noImage' : \"\"}`} href={this.internalHref}>\n                <slot name=\"img\" />\n              </a>\n\n              <div class='lower__body-wrapper'>\n                <a class='upper-body' href={this.internalHref}>\n                  <slot />\n                </a>\n                <div>\n                  <slot name='buttons' />\n                </div>\n              </div>\n            </div>}\n\n          {this.direction === 'vertical' &&\n            <div class=\"vertical\">\n              <a class='upper__body-wrapper' href={this.internalHref} target={this.target}>\n                <div class={`card-img ${this.noImg ? 'noImage' : \"\"}`}>\n                  <slot name=\"img\" />\n                </div>\n\n                <div class='upper-body'>\n                  <slot />\n                </div>\n              </a>\n\n              <div class='lower__body-wrapper'>\n                <slot name='buttons' />\n              </div>\n            </div>}\n        </div>\n      </Host>\n    );\n  }\n}","// global/utils/tracking.ts\nconst componentQueue: string[] = [];\nconst BATCH_INTERVAL = 5000; // 5 seconds\n\nfunction sendBatch() {\n  if (componentQueue.length > 0) {\n    const componentsToSend = [...componentQueue];\n    componentQueue.length = 0; // Clear the queue\n\n    if (window._paq) {\n      window._paq.push(['trackEvent', 'Component', 'View', componentsToSend.join(', ')]);\n    } else {\n      console.error(\"Matomo _paq array is not defined\");\n    }\n  }\n}\n\nexport function trackComponentView(componentName: string) {\n  if (!componentQueue.includes(componentName)) {\n    componentQueue.push(componentName);\n  }\n}\n\n\n// Set an interval to send the batch every BATCH_INTERVAL milliseconds\nsetInterval(sendBatch, BATCH_INTERVAL);"],"names":["Card","setImgPosition","event","this","alignment","detail","handleComponentAdjustment","image","el","querySelector","links","noImg","noBtns","href","trim","internalHref","undefined","handleClassList","type","className","classList","handleHovering","card","shadowRoot","cardHeadline","addEventListener","ev","target","nodeName","isHovered","componentWillLoad","componentDidLoad","addEventListenersToHandleCustomFocusState","trackComponentView","element","console","error","upperBodyWrapper","tabIndex","componentWillUpdate","render","h","Host","key","class","direction","name","componentQueue","componentName","includes","push","setInterval","length","componentsToSend","window","_paq","join"],"sourceRoot":""}