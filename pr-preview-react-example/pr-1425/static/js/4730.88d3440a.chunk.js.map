{"version":3,"file":"static/js/4730.88d3440a.chunk.js","mappings":"iNAAA,MCUaA,EAAmB,M,0FACU,G,oBAIxCC,mBAAAA,CAAoBC,GAClB,MAAMC,EAAMC,SAASC,cAAc,OAEnC,OADAF,EAAIG,UAAYJ,EACTC,EAAII,U,CAGbC,mBAAAA,CAAoBC,GAQlB,OAPmBC,MAChBC,KAAKF,EAAYG,YAAYC,IAAA,IAAC,KAAEC,EAAI,MAAEC,GAAOF,EAAA,MAAM,CAAEC,OAAMC,QAAO,IAClEC,QAAO,CAACC,EAAKC,KACZD,EAAIC,EAAQJ,MAAQI,EAAQH,MACrBE,IACN,CAAC,E,CAKRE,mBAAAA,CAAoBC,GAClB,IAAIC,EAAW,GACf,MAAMC,EAAaC,KAAKf,oBAAoBY,GACtCI,GAAoBC,EAAAA,EAAAA,GAAE,OAAQH,GAEpC,GADAD,EAASK,KAAKF,GACXJ,EAASb,WAAY,CACtB,MAAMoB,EAAQP,EAASQ,iBAAiB,QAClCC,EAAaT,EAASQ,iBAAiB,QAAQE,OACrD,IAAI,IAAIC,EAAI,EAAGA,EAAIF,EAAYE,IAAK,CAClC,IAAIC,EAAeT,KAAKf,oBAAoBmB,EAAMI,IAC9CE,GAAaR,EAAAA,EAAAA,GAAE,OAAQO,GAC3BX,EAASK,KAAKO,E,EAGlB,OAAOZ,C,CAGTa,MAAAA,CAAOC,GACL,OAAOV,EAAAA,EAAAA,GAAA,OAAKW,MAAM,aAAaC,MAAOd,KAAKe,QAAQD,MAAOE,OAAQhB,KAAKe,QAAQC,OAAQC,MAAM,6BAA6BC,KAAMlB,KAAKe,QAAQG,KAAMC,QAASnB,KAAKe,QAAQI,YAAaP,E,CAGxLQ,aAAAA,GACE,GAAGpB,KAAKe,QAAS,CACf,MAAMlB,EAAWG,KAAKtB,oBAAoBsB,KAAKe,QAAQM,YACjDT,EAAUZ,KAAKJ,oBAAoBC,GACnCyB,EAAMtB,KAAKW,OAAOC,GAExB,OADAZ,KAAKuB,aAAaC,MAAK,GAChBF,C,CACF,MAAiB,KAAdtB,KAAKyB,MACbC,QAAQC,MAAM,wBACd3B,KAAKuB,aAAaC,MAAK,SAGvB,C,CAIJI,iBAAAA,GAEE5B,KAAKe,SAAUc,EAAAA,EAAAA,GAAqB7B,KAAKyB,KADPK,cAAcC,QAAQ,qBAAqB,CAACC,EAAIC,IAAQA,I,CAI5FC,gBAAAA,IACEC,EAAAA,EAAAA,GAAmB,sB,CAIrBC,MAAAA,GACE,OACElC,EAAAA,EAAAA,GAACmC,EAAAA,EAAI,CAAAC,IAAA,4CACJtC,KAAKoB,gB,WDlFmB,mFEA/B,MCUamB,EAAgB,M,gDAIzBH,MAAAA,GACI,OACIlC,EAAAA,EAAAA,GAAA,OAAAoC,IAAA,2CAAKzB,MAAM,UAAU2B,SAAU,IAC3BtC,EAAAA,EAAAA,GAAA,YAAAoC,IAAA,2CAAUb,KAAMzB,KAAKyB,OAAiB,KAACvB,EAAAA,EAAAA,GAAA,QAAAoC,IAAA,6C,WDjB3B,ijB,kCEC5B,MAAMG,EAA2B,G,SAgBjBN,EAAmBO,GAC5BD,EAAeE,SAASD,IAC3BD,EAAetC,KAAKuC,EAExB,CAIAE,aArBA,WACE,GAAIH,EAAelC,OAAS,EAAG,CAC7B,MAAMsC,EAAmB,IAAIJ,GAC7BA,EAAelC,OAAS,EAEpBuC,OAAOC,KACTD,OAAOC,KAAK5C,KAAK,CAAC,aAAc,YAAa,OAAQ0C,EAAiBG,KAAK,QAE3EtB,QAAQC,MAAM,mC,CAGpB,GAbuB,I","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/icon/infineonIconStencil.scss?tag=ifx-icon","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/icon/infineonIconStencil.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/segmented-controls/segmented-control/segmented-control.scss?tag=ifx-segmented-control&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/segmented-controls/segmented-control/segmented-control.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/global/utils/tracking.ts"],"sourcesContent":["ifx-icon {\n  display: inline-flex;\n  justify-content: center;\n\n  &:empty {\n    display: none;\n  }\n}","import { Component, Prop, h, Host, Event, EventEmitter } from '@stencil/core';\nimport { getIcon } from '@infineon/infineon-icons'\nimport { trackComponentView } from '../../global/utils/tracking';\n\n\n@Component({\n  tag: 'ifx-icon',\n  styleUrl: './infineonIconStencil.scss'\n})\n\nexport class InfineonIconStencil {\n  @Prop({ mutable: true }) icon: string = \"\"\n  @Prop({ mutable: true }) ifxIcon: any;\n  @Event() consoleError: EventEmitter<boolean>;\n \n  convertStringToHtml(htmlString) { \n    const div = document.createElement('div')\n    div.innerHTML = htmlString\n    return div.firstChild\n  }\n\n  convertHtmlToObject(htmlElement) { \n    let pathToObject = Array\n      .from(htmlElement.attributes, ({ name, value }) => ({ name, value }))\n      .reduce((acc, current) => {\n        acc[current.name] = current.value\n        return acc\n      }, {})\n\n    return pathToObject\n  }\n\n  convertPathsToVnode(htmlPath) { \n    let svgPaths = []\n    const parentPath = this.convertHtmlToObject(htmlPath);\n    const parentPathToVnode = h(\"path\", parentPath);\n    svgPaths.push(parentPathToVnode)\n    if(htmlPath.firstChild) { \n      const paths = htmlPath.querySelectorAll('path');\n      const pathLength = htmlPath.querySelectorAll('path').length;\n      for(let i = 0; i < pathLength; i++) { \n        let pathToObject = this.convertHtmlToObject(paths[i])\n        let objToVnode = h(\"path\", pathToObject)\n        svgPaths.push(objToVnode)\n      }      \n    }\n    return svgPaths\n  }\n\n  getSVG(svgPath) {\n    return <svg class=\"inline-svg\" width={this.ifxIcon.width} height={this.ifxIcon.height} xmlns=\"http://www.w3.org/2000/svg\" fill={this.ifxIcon.fill} viewBox={this.ifxIcon.viewBox}>{...svgPath}</svg>\n  }\n\n  constructIcon() {\n    if(this.ifxIcon) {\n      const htmlPath = this.convertStringToHtml(this.ifxIcon.svgContent)\n      const svgPath = this.convertPathsToVnode(htmlPath)\n      const SVG = this.getSVG(svgPath)\n      this.consoleError.emit(false)\n      return SVG;\n    } else if(this.icon !== \"\") {\n      console.error('Icon not found!')\n      this.consoleError.emit(true)\n      return;\n    }  else { \n      return;\n    }\n  }\n\n  componentWillLoad() {\n    const removeHyphen = (str) => str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (_m, chr) => chr);\n    this.ifxIcon = getIcon(removeHyphen(this.icon));\n  }\n\n  componentDidLoad() {\n    trackComponentView('InfineonIconStencil');\n  }\n\n\n  render() {\n    return (\n      <Host>\n      {this.constructIcon()}\n      </Host>\n    );\n  }\n}","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../../global/font.scss\";\n\n.control {\n    display: flex;\n    align-items: center;\n    gap: tokens.$ifxSize100;\n\n    outline: tokens.$ifxSpace12 solid tokens.$ifxColorEngineering300;\n    border-radius: tokens.$ifxBorderRadius12;\n    padding: 0 tokens.$ifxSize100 0 tokens.$ifxSize100;\n\n    height: 34px;\n    width: fit-content;\n\n    background-color: tokens.$ifxColorBaseWhite;\n\n    transition: all 150ms ease;\n    transition-property: color, background;\n    \n    font: tokens.$ifxBodyBodySemibold04;\n\n    &:hover { \n        color: tokens.$ifxColorBaseWhite;\n        background-color: tokens.$ifxColorOcean600;\n        \n        cursor: pointer;\n    }\n\n    &:active {\n        background-color: tokens.$ifxColorOcean700;\n    }\n\n    &.control--selected {\n        background-color: tokens.$ifxColorOcean500;\n    }\n\n    &.control--small {\n        height: 30px;\n    }\n}","import { h, \n    Component, \n    Prop } from \"@stencil/core\";\n\n@Component ({\ntag     : 'ifx-segmented-control',\nstyleUrl: 'segmented-control.scss',\nshadow  : true\n})\n\nexport class SegmentedControl {\n\n    @Prop() icon: string;\n\n    render() {\n        return (\n            <div class='control' tabIndex={0}>\n                <ifx-icon icon={this.icon}></ifx-icon> <slot />\n            </div>\n        );\n    }\n}","// global/utils/tracking.ts\nconst componentQueue: string[] = [];\nconst BATCH_INTERVAL = 5000; // 5 seconds\n\nfunction sendBatch() {\n  if (componentQueue.length > 0) {\n    const componentsToSend = [...componentQueue];\n    componentQueue.length = 0; // Clear the queue\n\n    if (window._paq) {\n      window._paq.push(['trackEvent', 'Component', 'View', componentsToSend.join(', ')]);\n    } else {\n      console.error(\"Matomo _paq array is not defined\");\n    }\n  }\n}\n\nexport function trackComponentView(componentName: string) {\n  if (!componentQueue.includes(componentName)) {\n    componentQueue.push(componentName);\n  }\n}\n\n\n// Set an interval to send the batch every BATCH_INTERVAL milliseconds\nsetInterval(sendBatch, BATCH_INTERVAL);"],"names":["InfineonIconStencil","convertStringToHtml","htmlString","div","document","createElement","innerHTML","firstChild","convertHtmlToObject","htmlElement","Array","from","attributes","_ref","name","value","reduce","acc","current","convertPathsToVnode","htmlPath","svgPaths","parentPath","this","parentPathToVnode","h","push","paths","querySelectorAll","pathLength","length","i","pathToObject","objToVnode","getSVG","svgPath","class","width","ifxIcon","height","xmlns","fill","viewBox","constructIcon","svgContent","SVG","consoleError","emit","icon","console","error","componentWillLoad","getIcon","toLowerCase","replace","_m","chr","componentDidLoad","trackComponentView","render","Host","key","SegmentedControl","tabIndex","componentQueue","componentName","includes","setInterval","componentsToSend","window","_paq","join"],"sourceRoot":""}