{"version":3,"file":"static/js/3367.cc6fa47a.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/select-input/select-input.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/select-input/select-input.scss?tag=ifx-select-input&encapsulation=shadow"],"sourcesContent":["import { Component, h, Element, Listen } from \"@stencil/core\";\n\n@Component({\n  tag: 'ifx-select-input',\n  styleUrl: 'select-input.scss',\n  shadow: true\n})\n\nexport class SelectInput {\n\n  @Element() el;\n\n  @Listen('mousedown', { target: 'document' })\n  handleOutsideClick(event: MouseEvent) {\n    const path = event.composedPath();\n    if (!path.includes(this.el)) {\n      this.closeDropdownMenu();\n    }\n  }\n\n  getDropdownMenu() {\n    let dropdownMenuComponent = this.el.querySelector('ifx-dropdown-menu');\n    if (dropdownMenuComponent) {\n      dropdownMenuComponent = this.el.querySelector('ifx-dropdown-menu').shadowRoot;\n      const dropdownMenuElement = dropdownMenuComponent.querySelector('.dropdown-menu');\n      return dropdownMenuElement\n    }\n  }\n\n  getDropdownWrapper() {\n    const dropdownWrapper = this.el.shadowRoot.querySelector('.dropdown');\n    return dropdownWrapper\n  }\n\n  getDropdownItems() {\n    const dropdownMenuItems = this.el.querySelectorAll('ifx-dropdown-item')\n    return dropdownMenuItems\n  }\n\n  handleClassList(el, type, className) {\n    el?.classList[type](className)\n  }\n\n  toggleDropdownMenu() {\n    const textField = this.getTextField()\n    const textFieldElement = textField.shadowRoot.querySelector('.textInput__bottom-wrapper')\n    const dropdownMenu = this.getDropdownMenu();\n    const dropdownWrapper = this.getDropdownWrapper()\n    this.handleClassList(dropdownMenu, 'toggle', 'show')\n    this.handleClassList(dropdownWrapper, 'toggle', 'show')\n    this.handleClassList(textFieldElement, 'toggle', 'show')\n\n  }\n\n  closeDropdownMenu() {\n    const dropdownMenu = this.getDropdownMenu()\n    const dropdownWrapper = this.getDropdownWrapper()\n    const textField = this.getTextField()\n    const textFieldElement = textField.shadowRoot.querySelector('.textInput__bottom-wrapper')\n    this.handleClassList(dropdownMenu, 'remove', 'show')\n    this.handleClassList(dropdownWrapper, 'remove', 'show')\n    this.handleClassList(textFieldElement, 'remove', 'show')\n  }\n\n  removeActiveMenuItem() {\n    const dropdownMenuItems = this.getDropdownItems()\n    for (let i = 0; i < dropdownMenuItems.length; i++) {\n      this.handleClassList(dropdownMenuItems[i].shadowRoot.querySelector('a'), 'remove', 'active')\n    }\n  }\n\n  toggleCheckbox(target) {\n    target.querySelector('ifx-checkbox').checked = !target.querySelector('ifx-checkbox').checked\n  }\n\n\n  getClickedElement(target) {\n    if (target instanceof SVGElement) {\n      return target.closest('.dropdown-item')\n    } else if (target.className.includes('dropdown-menu')\n      || target.className.includes('form-check-input')) {\n      return false\n    } else {\n      return target.closest('.dropdown-item');\n\n    }\n  }\n\n  addActiveMenuItem = (e) => {\n    const target = this.getClickedElement(e.composedPath()[0])\n    const isCheckable = e.target.checkable;\n    if (!target) return;\n    if (isCheckable) {\n      this.toggleCheckbox(target)\n\n      return;\n    }\n\n    this.removeActiveMenuItem()\n    this.handleClassList(target, 'add', 'active')\n    this.toggleDropdownMenu()\n  }\n\n  getTextField() {\n    let textField = this.el.querySelector('ifx-text-input');\n    return textField\n  }\n\n  addItemValueToTextField(value) {\n    const textField = this.getTextField()\n    textField.value = value.value\n  }\n\n  addEventListeners() {\n    const dropdownMenu = this.getDropdownMenu();\n    document.addEventListener('click', this.handleOutsideClick.bind(this))\n    dropdownMenu.addEventListener('click', this.addActiveMenuItem)\n    let dropdownMenuComponent = this.el.querySelector('ifx-dropdown-menu');\n    dropdownMenuComponent.addEventListener('selectValues', (event) => {\n      this.addItemValueToTextField(event.detail)\n    })\n  }\n\n  componentDidRender() {\n    let textInput = this.el.querySelector('ifx-text-input');\n    if (textInput) {\n      const textInputElement = textInput.shadowRoot.querySelector('input');\n      if (!textInputElement.classList.contains('disabled')) {\n        textInputElement.addEventListener('click', this.toggleDropdownMenu.bind(this))\n        this.addEventListeners()\n      }\n    }\n  }\n\n\n  render() {\n    return (\n      <div class='dropdown selectInput'>\n        <slot name=\"text-input\" />\n        <slot name=\"menu\" />\n      </div>\n    )\n  }\n}",":host { \n  //width: 100%;\n}\n\n.selectInput  { \n  &.dropdown { \n    width: 235px;\n  }\n}"],"names":["SelectInput","hostRef","_this","_classCallCheck","addActiveMenuItem","e","target","getClickedElement","composedPath","isCheckable","checkable","toggleCheckbox","removeActiveMenuItem","handleClassList","toggleDropdownMenu","_createClass","key","value","event","includes","this","el","closeDropdownMenu","dropdownMenuComponent","querySelector","shadowRoot","querySelectorAll","type","className","classList","textFieldElement","getTextField","dropdownMenu","getDropdownMenu","dropdownWrapper","getDropdownWrapper","dropdownMenuItems","getDropdownItems","i","length","checked","SVGElement","closest","_this2","document","addEventListener","handleOutsideClick","bind","addItemValueToTextField","detail","textInput","textInputElement","contains","addEventListeners","h","class","name","get"],"sourceRoot":""}