{"version":3,"file":"static/js/9956.d4c7ea7b.chunk.js","mappings":"iKAAA,MCgBaA,EAAI,M,2FAciB,G,UAOI,Q,gBAOuBC,E,aAOnB,S,aAMX,E,qBAKsB,E,CAMjDC,2BAAAA,CAA4BC,GACxB,MAAMC,EAAOD,EAAME,eACbC,EAA2BC,KAAKC,KAAKC,WAAWC,cAAc,kBAC9DC,EAA4BJ,KAAKC,KAAKC,WAAWC,cAAc,mBAChEN,EAAKQ,SAASD,IAAkBP,EAAKQ,SAASN,KAAgBC,KAAKM,QACpEN,KAAKO,oB,CAQbC,qBAAAA,CAAsBZ,GAClB,MAAMa,EAA6Bb,EAAMc,OACnCC,EAA0CX,KAAKY,gBAGrD,GAAqB,UAAjBZ,KAAKa,QAAqB,CAC1B,GAAIJ,EAAYK,SAAU,CAEtBd,KAAKM,QAAS,EAEcN,KAAKe,eACvBC,SAASC,IACXA,EAASH,UAAYG,IAAarB,EAAMsB,SACxCD,EAASE,UAASC,OAAAC,OAAAD,OAAAC,OAAA,GACXJ,EAASE,WAAS,CACrBG,iBAAiB,IAErBL,EAASH,UAAW,E,IAG5Bd,KAAKY,gBAAkB,CAAEH,E,MAEzBT,KAAKY,gBAAkB,GAE3BZ,KAAKuB,MAAQvB,KAAKY,gBAAgB,GAAKZ,KAAKY,gBAAgB,GAAGW,WAAQ7B,C,MAEnEe,EAAYK,SACZd,KAAKY,gBAAkB,IAAIZ,KAAKY,gBAAiBH,GAEjDT,KAAKY,gBAAkBZ,KAAKY,gBAAgBY,QAAQC,GAAWA,EAAOC,MAAQjB,EAAYiB,MAE9F1B,KAAKuB,MAAQvB,KAAKY,gBAAgBe,KAAKF,GAAoBA,EAAOF,QAIlEd,EAAYmB,eACZ5B,KAAK6B,UAAUC,KAAK,CAAEnB,kBAAmBA,EAAmBoB,iBAAkB/B,KAAKY,iB,CAS3FG,YAAAA,GACI,OAAOf,KAAKC,KAAK+B,iBAAiB,gB,CAStCC,kBAAAA,GACI,IAAKjC,KAAKY,gBAAgBsB,OAAQ,MAAO,GACzC,GAAqB,UAAjBlC,KAAKa,QACL,OAAOb,KAAKY,gBAAgB,GAAGuB,MAC5B,CACH,IAAIC,EAAe,GACfC,EAAQ,EACZ,KAAMA,EAAQ,IACNA,EAAQrC,KAAKY,gBAAgBsB,SAC7BE,GAAgBpC,KAAKY,gBAAgByB,GAAOF,MAC5CE,KAEAA,EAAQ,GAAKA,EAAQrC,KAAKY,gBAAgBsB,SAC1CE,GAAgB,KAKxB,OAAOA,C,EAOf7B,kBAAAA,GACIP,KAAKM,QAAUN,KAAKM,M,CAOxBgC,yBAAAA,CAA0B1C,GACtBA,EAAM2C,kBACNvC,KAAKM,QAAS,EAEd,IAAIkC,GAAoB,EAcxB,GAb4BxC,KAAKe,eACvBC,SAASC,IACXA,EAASH,WACT0B,GAAoB,EACpBvB,EAASE,UAASC,OAAAC,OAAAD,OAAAC,OAAA,GACXJ,EAASE,WAAS,CACrBG,iBAAiB,IAErBL,EAASH,UAAW,E,IAKxB0B,EAAmB,CACnB,MAAM7B,EAA0CX,KAAKY,gBACrDZ,KAAKY,gBAAkB,GACvBZ,KAAK6B,UAAUC,KAAK,CAAEnB,kBAAmBA,EAAmBoB,iBAAkB,I,EAItFU,kBAAAA,GACIzC,KAAKO,oB,CAGTmC,oBAAAA,CAAqB9C,GACE,UAAfA,EAAM+C,MAAmC,UAAf/C,EAAM+C,MAChC3C,KAAKO,oB,CAIbqC,aAAAA,GACI,MAAMC,EAAsB7C,KAAKe,eACjC,IAAIW,EAAc,EAClBmB,EAAU7B,SAASC,IACfA,EAASE,UAAY,CAAEG,iBAAiB,EACjBwB,KAAqB,UAAd9C,KAAK8C,KAAmB,QAAU,QACzCjC,QAA2B,UAAjBb,KAAKa,QAAsB,QAAU,SAC/Ca,IAAKA,IAAO,G,CAQ3CqB,iBAAAA,GAEI/C,KAAK4C,e,CAGTI,MAAAA,GACI,OACIC,EAAAA,EAAAA,GAAA,OAAAvB,IAAA,wDAAiB1B,KAAKiC,qBAAoB,aAAa,4BAA4BiB,MAAM,SAGrFD,EAAAA,EAAAA,GAAA,OAAAvB,IAAA,2CAAKwB,MAAO,gCAA8C,UAAdlD,KAAK8C,KAAmB,QAAU,iDACvC,UAAjB9C,KAAKa,QAAsB,QAAU,kCACpDb,KAAKM,OAAS,wBAAyB,4BACvCN,KAAKY,gBAAgBsB,OAAS,0BAA2B,KAChEiB,SAAU,EACVC,QAASA,KAAOpD,KAAKyC,oBAAoB,EACzCY,UAAYC,IAAOtD,KAAK0C,qBAAqBY,EAAE,IAE3CL,EAAAA,EAAAA,GAAA,OAAAvB,IAAA,2CAAKwB,MAAM,kBAE8B,IAAhClD,KAAKY,gBAAgBsB,QAAiB,GAAGlC,KAAKuD,cAId,IAAhCvD,KAAKY,gBAAgBsB,QAAiC,UAAjBlC,KAAKa,SAC3C,GAAGb,KAAKuD,eAIyB,IAAhCvD,KAAKY,gBAAgBsB,SACtBe,EAAAA,EAAAA,GAAA,OAAKC,MAAM,2BACNlD,KAAKiC,sBAMTjC,KAAKY,gBAAgBsB,OAAS,IAC/Be,EAAAA,EAAAA,GAAA,iCAAyB,KAAIjD,KAAKY,gBAAgBsB,OAAS,GAAG,OAMhD,UAAjBlC,KAAKa,SAAyC,UAAjBb,KAAKa,SAAuD,IAAhCb,KAAKY,gBAAgBsB,UAC/Ee,EAAAA,EAAAA,GAAA,OAAKC,MAAM,wBAAsB,KAAED,EAAAA,EAAAA,GAAA,YAAUvB,IAAK,EAAG8B,KAAM,kBAAkB,KAK3ExD,KAAKY,gBAAgBsB,QAAU,GAAuB,UAAjBlC,KAAKa,UAC5CoC,EAAAA,EAAAA,GAAA,OAAKC,MAAM,2BAA2BE,QAAUE,IAAOtD,KAAKsC,0BAA0BgB,EAAE,IACpFL,EAAAA,EAAAA,GAAA,YAAUvB,IAAK,EAAG8B,KAAM,cAQhCxD,KAAKM,SACL2C,EAAAA,EAAAA,GAAA,OAAKC,MAAM,mBACPD,EAAAA,EAAAA,GAAA,c,0CDzRR,89C","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chip/chip.scss?tag=ifx-chip&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chip/chip.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n:host {\n    display: inline-block;\n}\n\n.chip {\n    position: relative;\n}\n\n.chip__wrapper {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: tokens.$ifxSpace100;\n\n    box-sizing: border-box;\n    border: 1px solid tokens.$ifxColorEngineering300;\n    border-radius: tokens.$ifxBorderRadiusRound;\n    \n    background: tokens.$ifxColorBaseWhite;\n    \n    cursor: pointer;  \n    \n    transition: border 100ms ease;\n\n    font: tokens.$ifxBodyBody04;\n    \n    &:hover, &:focus-visible {\n        outline: none;\n        border: 1px solid tokens.$ifxColorEngineering500;\n    }\n    \n    &.chip__wrapper--small {\n        padding: tokens.$ifxSpace50 tokens.$ifxSpace150;\n    }\n    \n    &.chip__wrapper--large {\n        padding: tokens.$ifxSpace100 tokens.$ifxSpace200;\n    }\n    \n    &.chip__wrapper--opened {\n        border: 1px solid tokens.$ifxColorOcean500;\n        \n        .wrapper__open-button {\n            transform: rotate(-180deg);\n        }\n    }\n    \n    &.chip__wrapper--selected {\n        outline: 3px solid tokens.$ifxColorOcean500;\n        outline-offset: -3px;\n        \n        color: tokens.$ifxColorOcean500;\n        \n        &:hover, &:focus-visible {\n            outline: 3px solid tokens.$ifxColorOcean600;\n            \n            color: tokens.$ifxColorOcean600;\n        }\n    }\n}\n\n.wrapper__label {\n    display: inline-flex;\n    align-items: center;\n    gap: tokens.$ifxSpace50;\n\n    font: tokens.$ifxBodyBody04;\n    \n    .label__selected-options {\n        font: tokens.$ifxBodyBodySemibold04;\n    }\n}\n\n.wrapper__open-button {\n    display:flex;\n    align-items: center;\n    \n    transition: all 300ms ease;\n}\n\n.wrapper__unselect-button {\n    display:flex;\n    align-items: center;\n}\n\n.chip__dropdown {\n    position: absolute;\n    z-index: 1;\n\n    box-shadow: 0px 6px 9px 0px #1D1D1D1A;\n    border: 1px solid tokens.$ifxColorEngineering200;\n    border-radius: tokens.$ifxBorderRadius12;\n    padding: tokens.$ifxSpace100 0;\n\n    min-width: 222px;\n    \n    background-color: tokens.$ifxColorBaseWhite;\n}\n","import { h,\n         Component,\n         Element,\n         Event,\n         EventEmitter,\n         Listen,\n         Prop,\n         State} from '@stencil/core';\nimport { ChipItemEvent } from './interfaces';\n\n@Component({\n    tag: 'ifx-chip',\n    styleUrl: 'chip.scss',\n    shadow: true\n})\n\nexport class Chip {\n    /**\n     * Reference to this component.\n     */\n    @Element() chip: HTMLIfxChipElement;\n\n    /**\n     * A global event which is emitted when the selected options are changed.\n     */\n    @Event() ifxChange: EventEmitter<{previousSelection: Array<ChipItemEvent>, currentSelection: Array<ChipItemEvent>}>;\n\n    /**\n     * A label/placeholder string.\n     */\n    @Prop() placeholder: string = '';\n    \n    /**\n     * Allows to change the size of Chip and Chip Item component.\n     * \n     * @Default `'large'`\n     */\n    @Prop() size: 'small' | 'large' = 'large';\n\n    /**\n     * Stores the values of each selected options to allow quick access from outside.\n     * \n     * @Default `undefined`\n     */\n    @Prop({ mutable: true }) value: Array<string> | string = undefined;\n\n    /**\n     * Allows to specify the variant of the Chip.\n     * \n     * @Default `'single'`\n     */\n    @Prop() variant: 'single' | 'multi' = 'single';\n\n    /**\n     * Internal boolean *opened* state to determine whether the dropdown menu is\n     * opened.\n     */\n    @State() opened: boolean = false;\n\n    /**\n     * State to store the selected options of the chip component.\n     */\n    @State() selectedOptions: Array<ChipItemEvent> = [];\n\n    /**\n     * Closing the dropdown menu when clicked outside of it.\n     */\n    @Listen('mousedown', { target: 'document' })\n    closeDropdownOnOutsideClick(event: MouseEvent) {\n        const path = event.composedPath();\n        const chipWrapper: HTMLElement = this.chip.shadowRoot.querySelector('.chip__wrapper');\n        const chipDropdown: HTMLElement = this.chip.shadowRoot.querySelector('.chip__dropdown');\n        if (!path.includes(chipDropdown) && !path.includes(chipWrapper) && this.opened) {\n            this.toggleDropdownMenu();\n        }\n    }\n\n    /**\n     * Listening to ifxChipItem event to update the selected option(s).\n     */\n    @Listen('ifxChipItem') \n    updateSelectedOptions(event: CustomEvent<ChipItemEvent>) {\n        const eventDetail: ChipItemEvent = event.detail;\n        const previousSelection: Array<ChipItemEvent> = this.selectedOptions;\n        \n        /* Handling 'single' variant */\n        if (this.variant !== 'multi') {\n            if (eventDetail.selected) {\n                /* Closing the dropdown menu when the item is selected. */\n                this.opened = false;\n                /* Unselecting the previously selected option by traversing each item. */\n                const chipItems: NodeList = this.getChipItems();\n                chipItems.forEach((chipItem: HTMLIfxChipItemElement) => {\n                    if (chipItem.selected && chipItem !== event.target) {\n                        chipItem.chipState = {\n                            ...chipItem.chipState,\n                            emitIfxChipItem: false,\n                        }\n                        chipItem.selected = false;\n                    }\n                });\n                this.selectedOptions = [ eventDetail ];\n            } else {\n                this.selectedOptions = [];\n            }\n            this.value = this.selectedOptions[0] ? this.selectedOptions[0].value : undefined;\n        } else /* Handling 'multi' variant */ {\n            if (eventDetail.selected) {\n                this.selectedOptions = [...this.selectedOptions, eventDetail];\n            } else {\n                this.selectedOptions = this.selectedOptions.filter((option) => option.key !== eventDetail.key);\n            }\n            this.value = this.selectedOptions.map((option) => { return option.value });\n        }\n\n        /* Emitting ifxChange with the selected options. */\n        if (eventDetail.emitIfxChange){\n            this.ifxChange.emit({ previousSelection: previousSelection, currentSelection: this.selectedOptions});\n        }\n    }\n    \n    /**\n     * Returns the list of reference to the Chip Items.\n     * \n     * @returns `NodeList<HTMLIfxChipItemElement>`\n     */\n    getChipItems(): NodeList {\n        return this.chip.querySelectorAll('ifx-chip-item');\n    }\n\n    /**\n     * Returns the selected option label in *single* variant.\n     * Appends and returns the label of first 2 selected option in *multi* variant.\n     * \n     * @returns `string`\n     */\n    getSelectedOptions(): string {\n        if (!this.selectedOptions.length) return '';\n        if (this.variant !== 'multi') {\n            return this.selectedOptions[0].label;\n        } else {\n            let optionsLabel = '';\n            let index = 0;\n            while(index < 2) {\n                if (index < this.selectedOptions.length) {\n                    optionsLabel += this.selectedOptions[index].label;\n                    index++;\n                }\n                if (index < 2 && index < this.selectedOptions.length) {\n                    optionsLabel += ', ';\n                    continue;\n                }\n                break;\n            }\n            return optionsLabel;\n        }   \n    }\n\n    /**\n     * Opens or Closes the dropdown menu.\n     */\n    toggleDropdownMenu() {\n        this.opened = !this.opened;\n    }\n\n    /**\n     * Helper functions\n     */\n\n    handleUnselectButtonClick(event: MouseEvent) {\n        event.stopPropagation();\n        this.opened = false;\n\n        let itemGotUnselected = false;\n        const chipItems: NodeList = this.getChipItems();\n        chipItems.forEach((chipItem: HTMLIfxChipItemElement) => {\n            if (chipItem.selected) {\n                itemGotUnselected = true;\n                chipItem.chipState = {\n                    ...chipItem.chipState,\n                    emitIfxChipItem: false,\n                }\n                chipItem.selected = false;\n            }\n        });\n\n        /* Emit event only if at least one item was unselected. */\n        if (itemGotUnselected) {\n            const previousSelection: Array<ChipItemEvent> = this.selectedOptions;\n            this.selectedOptions = [];\n            this.ifxChange.emit({ previousSelection: previousSelection, currentSelection: [] });\n        }\n    }\n\n    handleWrapperClick() {\n        this.toggleDropdownMenu();\n    }\n\n    handleWrapperKeyDown(event: KeyboardEvent) {\n        if (event.code === 'Space' || event.code === 'Enter') {\n            this.toggleDropdownMenu();\n        }\n    }\n\n    syncChipState() {\n        const chipItems: NodeList = this.getChipItems();\n        let key: number = 0;\n        chipItems.forEach((chipItem: HTMLIfxChipItemElement) => {\n            chipItem.chipState = { emitIfxChipItem: true,\n                                   size: (this.size === 'small' ? 'small' : 'large'),\n                                   variant: (this.variant === 'multi' ? 'multi' : 'single'), \n                                   key: key++ };\n        });\n    }\n\n    /**\n     * Lifecycle Methods\n     */\n\n    componentWillLoad() {\n        /* Propogating the required Chip State with every Chip Item. */\n        this.syncChipState();\n    }\n\n    render() {\n        return (\n            <div aria-value={this.getSelectedOptions()} aria-label='chip with a dropdown menu' class='chip'>\n            \n                {/* Wrapper */}\n                <div class={`chip__wrapper chip__wrapper--${this.size === 'small' ? 'small' : 'large'} \n                     chip__wrapper--${this.variant === 'multi' ? 'multi' : 'single'}\n                     ${this.opened ? 'chip__wrapper--opened': ''}\n                     ${this.selectedOptions.length ? 'chip__wrapper--selected': ''}`}\n                tabIndex={0}\n                onClick={() => {this.handleWrapperClick()}}\n                onKeyDown={(e) => {this.handleWrapperKeyDown(e)}}>\n\n                    <div class='wrapper__label'>\n                        {\n                            (this.selectedOptions.length === 0) && `${this.placeholder}`\n                        }\n\n                        {\n                            (this.selectedOptions.length !== 0 && this.variant === 'multi') &&\n                            `${this.placeholder}:`\n                        }\n                        \n                        {\n                            (this.selectedOptions.length !== 0) && \n                            <div class='label__selected-options'>\n                                {this.getSelectedOptions()}\n                            </div>\n                        }\n\n                        {/* Number indicator appears only when 2+ options selected in 'multi' variant. */}\n                        {\n                            (this.selectedOptions.length > 2) &&\n                            <ifx-number-indicator>  {`+${this.selectedOptions.length - 2}`} </ifx-number-indicator>\n                        }\n                    </div>\n\n                    {/* Arrow button */}\n                    {   \n                        (this.variant !== 'multi' || (this.variant === 'multi' && this.selectedOptions.length === 0)) &&\n                        <div class='wrapper__open-button'> <ifx-icon key={1} icon={`chevrondown16`}/> </div>\n                    }\n                    \n                    {/* Close button */}\n                    {\n                        ((this.selectedOptions.length >= 1) && this.variant === 'multi') &&\n                        <div class='wrapper__unselect-button' onClick={(e) => {this.handleUnselectButtonClick(e)}}> \n                            <ifx-icon key={2} icon={`cross16`}/> \n                        </div>\n                    }\n\n                </div>\n\n                {/* Dropdown */}\n                {   \n                    this.opened &&\n                    <div class='chip__dropdown'>\n                        <slot />\n                    </div>\n                }\n\n            </div>\n        ); \n    }\n}"],"names":["Chip","undefined","closeDropdownOnOutsideClick","event","path","composedPath","chipWrapper","this","chip","shadowRoot","querySelector","chipDropdown","includes","opened","toggleDropdownMenu","updateSelectedOptions","eventDetail","detail","previousSelection","selectedOptions","variant","selected","getChipItems","forEach","chipItem","target","chipState","Object","assign","emitIfxChipItem","value","filter","option","key","map","emitIfxChange","ifxChange","emit","currentSelection","querySelectorAll","getSelectedOptions","length","label","optionsLabel","index","handleUnselectButtonClick","stopPropagation","itemGotUnselected","handleWrapperClick","handleWrapperKeyDown","code","syncChipState","chipItems","size","componentWillLoad","render","h","class","tabIndex","onClick","onKeyDown","e","placeholder","icon"],"sourceRoot":""}