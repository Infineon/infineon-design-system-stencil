{"version":3,"file":"static/js/9956.bc0979de.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chip/chip.scss?tag=ifx-chip&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chip/chip.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n:host {\n    display: inline-block;\n}\n\n.chip {\n    position: relative;\n}\n\n.chip__wrapper {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: tokens.$ifxSpace100;\n\n    box-sizing: border-box;\n    border: 1px solid tokens.$ifxColorEngineering300;\n    border-radius: tokens.$ifxBorderRadiusRound;\n    \n    background: tokens.$ifxColorBaseWhite;\n    \n    cursor: pointer;  \n    \n    transition: border 100ms ease;\n\n    font: tokens.$ifxBodyBody04;\n    \n    &:hover, &:focus-visible {\n        outline: none;\n        border: 1px solid tokens.$ifxColorEngineering500;\n    }\n    \n    &.chip__wrapper--small {\n        padding: tokens.$ifxSpace50 tokens.$ifxSpace150;\n    }\n    \n    &.chip__wrapper--large {\n        padding: tokens.$ifxSpace100 tokens.$ifxSpace200;\n    }\n    \n    &.chip__wrapper--opened {\n        border: 1px solid tokens.$ifxColorOcean500;\n        \n        .wrapper__open-button {\n            transform: rotate(-180deg);\n        }\n    }\n    \n    &.chip__wrapper--selected {\n        outline: 3px solid tokens.$ifxColorOcean500;\n        outline-offset: -3px;\n        \n        color: tokens.$ifxColorOcean500;\n        \n        &:hover, &:focus-visible {\n            outline: 3px solid tokens.$ifxColorOcean600;\n            \n            color: tokens.$ifxColorOcean600;\n        }\n    }\n}\n\n.wrapper__label {\n    display: inline-flex;\n    align-items: center;\n    gap: tokens.$ifxSpace50;\n\n    font: tokens.$ifxBodyBody04;\n    \n    .label__selected-options {\n        font: tokens.$ifxBodyBodySemibold04;\n    }\n}\n\n.wrapper__open-button {\n    display:flex;\n    align-items: center;\n    \n    transition: all 300ms ease;\n}\n\n.wrapper__unselect-button {\n    display:flex;\n    align-items: center;\n}\n\n.chip__dropdown {\n    position: absolute;\n    z-index: 1;\n\n    box-shadow: 0px 6px 9px 0px #1D1D1D1A;\n    border: 1px solid tokens.$ifxColorEngineering200;\n    border-radius: tokens.$ifxBorderRadius12;\n    padding: tokens.$ifxSpace100 0;\n\n    min-width: 222px;\n    \n    background-color: tokens.$ifxColorBaseWhite;\n}\n","import { h, Component, Element, Event, EventEmitter, Listen, Prop, State, Watch } from '@stencil/core';\nimport { ChipItemSelectEvent } from './interfaces';\n\n@Component({\n  tag: 'ifx-chip',\n  styleUrl: 'chip.scss',\n  shadow: true\n})\nexport class Chip {\n  @Element() chip: HTMLIfxChipElement;\n\n  @Event() ifxChipChange: EventEmitter<{ previousSelection: Array<ChipItemSelectEvent>, currentSelection: Array<ChipItemSelectEvent> }>;\n  @Prop() placeholder: string = '';\n  @Prop() size: 'small' | 'large' = 'large';\n  @Prop({ mutable: true }) value: Array<string> | string = undefined;\n  @Prop() variant: 'single' | 'multi' = 'single';\n  @Prop() readOnly: boolean = false; // New readOnly property\n\n  @State() opened: boolean = false;\n  @State() selectedOptions: Array<ChipItemSelectEvent> = [];\n\n  @Watch('readOnly')\n  handleReadOnlyChange(newValue: boolean) {\n    if (newValue) {\n      this.opened = false; // Close the dropdown if readOnly is true\n    }\n  }\n\n  @Listen('mousedown', { target: 'document' })\n  closeDropdownOnOutsideClick(event: MouseEvent) {\n    const path = event.composedPath();\n    const chipWrapper: HTMLElement = this.chip.shadowRoot.querySelector('.chip__wrapper');\n    const chipDropdown: HTMLElement = this.chip.shadowRoot.querySelector('.chip__dropdown');\n    if (!path.includes(chipDropdown) && !path.includes(chipWrapper) && this.opened) {\n      this.toggleDropdownMenu();\n    }\n  }\n\n  @Listen('ifxChipItemSelect')\n  updateSelectedOptions(event: CustomEvent<ChipItemSelectEvent>) {\n    const eventDetail: ChipItemSelectEvent = event.detail;\n    const previousSelection: Array<ChipItemSelectEvent> = this.selectedOptions;\n\n    if (this.variant !== 'multi') {\n      if (eventDetail.selected) {\n        /* Closing the dropdown menu when the item is selected. */\n        this.opened = false;\n        /* Unselecting the previously selected option by traversing each item. */\n        const chipItems: NodeList = this.getChipItems();\n        chipItems.forEach((chipItem: HTMLIfxChipItemElement) => {\n          if (chipItem.selected && chipItem !== event.target) {\n            chipItem.chipState = {\n              ...chipItem.chipState,\n              emitIfxChipItemSelect: false,\n            }\n            chipItem.selected = false;\n          }\n        });\n        this.selectedOptions = [eventDetail];\n      } else {\n        this.selectedOptions = [];\n      }\n      this.value = this.selectedOptions[0] ? this.selectedOptions[0].value : undefined;\n    } else {\n      if (eventDetail.selected) {\n        this.selectedOptions = [...this.selectedOptions, eventDetail];\n      } else {\n        this.selectedOptions = this.selectedOptions.filter((option) => option.key !== eventDetail.key);\n      }\n      this.value = this.selectedOptions.map((option) => { return option.value });\n    }\n\n    /* Emitting ifxChipChange with the selected options. */\n    if (eventDetail.emitIfxChipChange) {\n      this.ifxChipChange.emit({\n        previousSelection: previousSelection,\n        currentSelection: this.selectedOptions\n      });\n    }\n  }\n\n  getChipItems(): NodeList {\n    return this.chip.querySelectorAll('ifx-chip-item');\n  }\n\n  getSelectedOptions(): string {\n    if (!this.selectedOptions.length) return '';\n    if (this.variant !== 'multi') {\n      return this.selectedOptions[0].label;\n    } else {\n      let optionsLabel = '';\n      let index = 0;\n      while (index < 2) {\n        if (index < this.selectedOptions.length) {\n          optionsLabel += this.selectedOptions[index].label;\n          index++;\n        }\n        if (index < 2 && index < this.selectedOptions.length) {\n          optionsLabel += ', ';\n          continue;\n        }\n        break;\n      }\n      return optionsLabel;\n    }\n  }\n\n  toggleDropdownMenu() {\n    if (this.readOnly) return; // Prevent action if readOnly\n    this.opened = !this.opened;\n  }\n\n  handleUnselectButtonClick(event: MouseEvent) {\n    event.stopPropagation();\n    this.opened = false;\n\n    let itemGotUnselected = false;\n    const chipItems: NodeList = this.getChipItems();\n    chipItems.forEach((chipItem: HTMLIfxChipItemElement) => {\n      if (chipItem.selected) {\n        itemGotUnselected = true;\n        chipItem.chipState = {\n          ...chipItem.chipState,\n          emitIfxChipItemSelect: false,\n        }\n        chipItem.selected = false;\n      }\n    });\n\n    /* Emit event only if at least one item was unselected. */\n    if (itemGotUnselected) {\n      const previousSelection: Array<ChipItemSelectEvent> = this.selectedOptions;\n      this.selectedOptions = [];\n      this.value = [];\n      this.ifxChipChange.emit({\n        previousSelection: previousSelection,\n        currentSelection: []\n      });\n    }\n  }\n\n  handleWrapperClick() {\n    if (!this.readOnly) {\n        this.toggleDropdownMenu();\n     }\n  }\n\n  handleWrapperKeyDown(event: KeyboardEvent) {\n    if (this.readOnly) {\n        if (event.code === 'Space' || event.code === 'Enter') {\n            this.toggleDropdownMenu();\n          }\n    }\n  }\n\n  syncChipState() {\n    const chipItems: NodeList = this.getChipItems();\n    let key: number = 0;\n    chipItems.forEach((chipItem: HTMLIfxChipItemElement) => {\n      chipItem.chipState = {\n        emitIfxChipItemSelect: true,\n        size: (this.size === 'small' ? 'small' : 'large'),\n        variant: (this.variant === 'multi' ? 'multi' : 'single'),\n        key: key++\n      };\n    });\n  }\n\n  componentWillLoad() {\n    /* Propogating the required Chip State with every Chip Item. */\n    this.syncChipState();\n  }\n\n  render() {\n    return (\n      <div aria-value={this.getSelectedOptions()} aria-label='chip with a dropdown menu' class='chip'>\n        <div class={`chip__wrapper chip__wrapper--${this.size === 'small' ? 'small' : 'large'}\n                    chip__wrapper--${this.variant === 'multi' ? 'multi' : 'single'}\n                    ${this.opened && !this.readOnly ? 'chip__wrapper--opened' : ''}\n                    ${this.selectedOptions.length ? 'chip__wrapper--selected' : ''}`}\n          tabIndex={0}\n          onClick={!this.readOnly ? () => { this.handleWrapperClick() } : undefined}\n          onKeyDown={!this.readOnly ? (e) => { this.handleWrapperKeyDown(e) } : undefined}>\n  \n          <div class='wrapper__label'>\n            {\n              (this.selectedOptions.length === 0) && `${this.placeholder}`\n            }\n  \n            {\n              (this.selectedOptions.length !== 0 && this.variant === 'multi') &&\n              `${this.placeholder}:`\n            }\n  \n            {\n              (this.selectedOptions.length !== 0) &&\n              <div class='label__selected-options'>\n                {this.selectedOptions.map(option => option.label).join(', ')}\n              </div>\n            }\n  \n            {/* Number indicator appears only when 2+ options selected in 'multi' variant. */}\n            {\n              (this.selectedOptions.length > 2) &&\n              <ifx-number-indicator>  {`+${this.selectedOptions.length - 2}`} </ifx-number-indicator>\n            }\n          </div>\n  \n          {\n            !this.readOnly && (this.variant !== 'multi' || (this.variant === 'multi' && this.selectedOptions.length === 0)) &&\n            <div class='wrapper__open-button'>\n              <ifx-icon key={1} icon={`chevrondown16`} />\n            </div>\n          }\n  \n          {\n            ((this.selectedOptions.length >= 1) && this.variant === 'multi') &&\n            <div class='wrapper__unselect-button' onClick={(e) => { this.handleUnselectButtonClick(e) }}>\n              <ifx-icon key={2} icon={`cross16`} />\n            </div>\n          }\n  \n        </div>\n  \n        {\n          this.opened && !this.readOnly &&\n          <div class='chip__dropdown'>\n            <slot />\n          </div>\n        }\n      </div>\n    );\n  }\n}"],"names":["Chip","undefined","handleReadOnlyChange","newValue","this","opened","closeDropdownOnOutsideClick","event","path","composedPath","chipWrapper","chip","shadowRoot","querySelector","chipDropdown","includes","toggleDropdownMenu","updateSelectedOptions","eventDetail","detail","previousSelection","selectedOptions","variant","selected","getChipItems","forEach","chipItem","target","chipState","Object","assign","emitIfxChipItemSelect","value","filter","option","key","map","emitIfxChipChange","ifxChipChange","emit","currentSelection","querySelectorAll","getSelectedOptions","length","label","optionsLabel","index","readOnly","handleUnselectButtonClick","stopPropagation","itemGotUnselected","handleWrapperClick","handleWrapperKeyDown","code","syncChipState","chipItems","size","componentWillLoad","render","h","class","tabIndex","onClick","onKeyDown","e","placeholder","join","icon"],"sourceRoot":""}