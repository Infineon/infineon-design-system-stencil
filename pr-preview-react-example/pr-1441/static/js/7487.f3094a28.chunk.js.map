{"version":3,"file":"static/js/7487.f3094a28.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/checkbox/checkbox.scss?tag=ifx-checkbox&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/checkbox/checkbox.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chip/chip.scss?tag=ifx-chip&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chip/chip.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chip/chip-item/chip-item.scss?tag=ifx-chip-item&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chip/chip-item/chip-item.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/icon/infineonIconStencil.scss?tag=ifx-icon","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/icon/infineonIconStencil.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/number-indicator/number-indicator.scss?tag=ifx-number-indicator&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/number-indicator/number-indicator.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n\n:host {\n    display: inline-flex;\n    vertical-align: top;\n}\n\n\n.checkbox__container {\n    box-sizing: border-box;\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n    padding: 0px;\n    gap: tokens.$ifxSpace100;\n    font-family: var(--ifx-font-family);\n\n    & .checkbox__wrapper {\n        box-sizing: border-box;\n        display: flex;\n        position: relative; //needs to be added for the indeterminate state of the checkbox\n        justify-content: center;\n        align-items: center;\n        width: tokens.$ifxSize250;\n        height: tokens.$ifxSize250;\n        background-color: tokens.$ifxColorBaseWhite;\n        border: 1px solid #575352;\n        border-radius: tokens.$ifxBorderRadius12;\n        flex: none;\n        order: 0;\n        flex-grow: 0;\n        align-self: flex-start;\n\n        &.checkbox-m {\n            height: tokens.$ifxSize300;\n            width: tokens.$ifxSize300;\n        }\n\n\n        &.error {\n            border-color: #CD002F;\n        }\n\n        &:focus-visible {\n            border: 1px solid #575352;\n            outline: 2px solid #0A8276;\n            outline-offset: 2px;\n        }\n\n        &:hover {\n            background-color: #EEEDED;\n            border: 1px solid #575352;\n            border-radius: tokens.$ifxBorderRadius12;\n            flex: none;\n            order: 0;\n            flex-grow: 0;\n        }\n\n        &.disabled {\n            background-color: #BFBBBB;\n            border-color: #BFBBBB;\n            border-radius: tokens.$ifxBorderRadius12;\n            flex: none;\n            order: 0;\n            flex-grow: 0;\n        }\n\n        &.checked {\n            background-color: #0A8276;\n            border-radius: tokens.$ifxBorderRadius12;\n            border-color: tokens.$ifxColorBaseTransparent;\n            flex: none;\n            order: 0;\n            flex-grow: 0;\n            color: tokens.$ifxColorBaseWhite;\n\n            &.error {\n                background-color: #CD002F;\n            }\n\n            &:focus-visible {\n                border: 1px solid transparent;\n                outline: 2px solid #0A8276;\n                outline-offset: 2px;\n            }\n\n            &:hover {\n                background-color: #08665C;\n                border-radius: tokens.$ifxBorderRadius12;\n                flex: none;\n                order: 0;\n                flex-grow: 0;\n            }\n\n            &.disabled {\n                background: #BFBBBB;\n                border-radius: tokens.$ifxBorderRadius12;\n                flex: none;\n                order: 0;\n                flex-grow: 0;\n            }\n        }\n\n        &.indeterminate {\n            &:before {\n                content: \"\";\n                display: block;\n                width: 70%; // Adjust as needed for the width of the minus sign\n                height: 2px; // Adjust for thickness of the minus sign\n                background-color: #08665C; // Color of the minus sign\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n        }\n\n    }\n\n    & .label {\n        font-style: normal;\n        font-weight: 400;\n        font-size: tokens.$ifxFontSizeS;\n        line-height: tokens.$ifxLineHeightS;\n        color: tokens.$ifxColorBaseBlack;\n        overflow-wrap: break-word;\n        word-wrap: break-word;\n        word-break: break-all;\n        max-width: 100%;\n\n        &.label-m {\n            font-size: tokens.$ifxFontSizeM;\n            line-height: tokens.$ifxLineHeightM;\n        }\n\n        &.disabled {\n            color: #BFBBBB;\n        }\n    }\n\n    & .checkbox__wrapper,\n    & .label {\n        &:hover {\n            cursor: pointer;\n        }\n    }\n\n}","import { Component, h, Prop, Element, State, Event, EventEmitter, Watch, Method, AttachInternals } from '@stencil/core';\n \n\n@Component({\n  tag: 'ifx-checkbox',\n  styleUrl: 'checkbox.scss',\n  shadow: true,\n  formAssociated: true\n})\n\nexport class Checkbox {\n  private inputElement: HTMLInputElement;\n\n  @Element() el;\n  @Prop() disabled: boolean = false;\n  @Prop() value: boolean = false;\n  @Prop() error: boolean = false;\n  @Prop() size: string = 'm';\n  @State() internalValue: boolean;\n  @Prop() indeterminate: boolean = false;\n  @State() internalIndeterminate: boolean;\n\n  @AttachInternals() internals: ElementInternals;\n\n  @Event({ bubbles: true, composed: true }) ifxChange: EventEmitter;\n\n  handleCheckbox() {\n    if (!this.disabled) {\n      if (this.inputElement.indeterminate) {\n        this.internalValue = true;\n        this.internalIndeterminate = false;\n      } else {\n        this.internalValue = !this.internalValue;\n      }\n      this.internals.setFormValue(this.internalValue ? 'on' : null);\n      \n      this.ifxChange.emit(this.internalValue);\n    }\n  }\n\n\n  @Method()\n  async toggleCheckedState(newVal: boolean) {\n    this.internalValue = newVal;\n  }\n\n  @Watch('value')\n  valueChanged(newValue: boolean, oldValue: boolean) {\n    if (newValue !== oldValue) {\n      this.internalValue = newValue;\n      this.inputElement.checked = this.internalValue; // update the checkbox's checked property\n    }\n  }\n\n\n  @Watch('indeterminate')\n  indeterminateChanged(newValue: boolean, oldValue: boolean) {\n    if (newValue !== oldValue) {\n      this.internalIndeterminate = newValue;\n      this.inputElement.indeterminate = this.internalIndeterminate; // update the checkbox's indeterminate property\n    }\n  }\n\n  handleKeydown(event) {\n    // Keycode 32 corresponds to the Space key, 13 corresponds to the Enter key\n    if (event.keyCode === 32 || event.keyCode === 13) {\n      this.handleCheckbox();\n      event.preventDefault();  // prevent the default action when space or enter is pressed\n    }\n  }\n\n  componentWillLoad() {\n    this.internalValue = this.value;\n    this.internalIndeterminate = this.indeterminate;\n  }\n\n  componentDidRender() {\n    this.inputElement.indeterminate = this.internalIndeterminate;\n  }\n\n\n  /**\n   * Callback for form association.\n   * Called whenever the form is reset.\n   */\n  formResetCallback() {\n    this.internals.setFormValue(null);\n  }\n\n  getCheckedClassName() {\n    if (this.error) {\n      if (this.internalValue) {\n        return \"checked error\"\n      } else {\n        return \"error\"\n      }\n    } else if (this.internalValue) {\n      return \"checked\";\n    } else return \"\"\n  }\n\n\n  render() {\n    const slot = this.el.innerHTML;\n    let hasSlot = false;\n\n    if (slot) {\n      hasSlot = true;\n    }\n\n    return (\n      <div class=\"checkbox__container\">\n        <input\n          type=\"checkbox\"\n          hidden\n          ref={(el) => (this.inputElement = el)}\n          checked={this.internalValue}\n          onChange={this.handleCheckbox.bind(this)} // Listen for changes here\n          id='checkbox'\n          value={`${this.internalValue}`}\n        />\n\n        <div\n          tabindex=\"0\"\n          onClick={this.handleCheckbox.bind(this)}\n          onKeyDown={this.handleKeydown.bind(this)}\n          role=\"checkbox\"  // role attribute\n          aria-value={this.internalValue}\n          aria-disabled={this.disabled}\n          aria-labelledby=\"label\"\n          class={`checkbox__wrapper \n          ${this.getCheckedClassName()}\n        ${this.size === \"m\" ? \"checkbox-m\" : \"\"}\n        ${this.indeterminate ? 'indeterminate' : \"\"}\n        ${this.disabled ? 'disabled' : \"\"}`}\n        >\n          {this.internalValue && <ifx-icon icon=\"check-12\"></ifx-icon>}\n        </div>\n        {hasSlot &&\n          <div id=\"label\" class={`label ${this.size === \"m\" ? \"label-m\" : \"\"} ${this.disabled ? 'disabled' : \"\"} `} onClick={this.handleCheckbox.bind(this)}>\n            <slot />\n          </div>}\n      </div>\n    );\n  }\n}\n","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n:host {\n    display: inline-block;\n}\n\n.chip {\n    position: relative;\n}\n\n.chip__wrapper {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: tokens.$ifxSpace100;\n\n    box-sizing: border-box;\n    border: 1px solid tokens.$ifxColorEngineering300;\n    border-radius: tokens.$ifxBorderRadiusRound;\n    \n    background: tokens.$ifxColorBaseWhite;\n    \n    cursor: pointer;  \n    \n    transition: border 100ms ease;\n\n    font: tokens.$ifxBodyBody04;\n    \n    &:hover, &:focus-visible {\n        outline: none;\n        border: 1px solid tokens.$ifxColorEngineering500;\n    }\n    \n    &.chip__wrapper--small {\n        padding: tokens.$ifxSpace50 tokens.$ifxSpace150;\n    }\n    \n    &.chip__wrapper--large {\n        padding: tokens.$ifxSpace100 tokens.$ifxSpace200;\n    }\n    \n    &.chip__wrapper--opened {\n        border: 1px solid tokens.$ifxColorOcean500;\n        \n        .wrapper__open-button {\n            transform: rotate(-180deg);\n        }\n    }\n    \n    &.chip__wrapper--selected {\n        outline: 3px solid tokens.$ifxColorOcean500;\n        outline-offset: -3px;\n        \n        color: tokens.$ifxColorOcean500;\n        \n        &:hover, &:focus-visible {\n            outline: 3px solid tokens.$ifxColorOcean600;\n            \n            color: tokens.$ifxColorOcean600;\n        }\n    }\n}\n\n.wrapper__label {\n    display: inline-flex;\n    align-items: center;\n    gap: tokens.$ifxSpace50;\n\n    font: tokens.$ifxBodyBody04;\n    \n    .label__selected-options {\n        font: tokens.$ifxBodyBodySemibold04;\n    }\n}\n\n.wrapper__open-button {\n    display:flex;\n    align-items: center;\n\n    transition: all 300ms ease;\n}\n\n.chip__dropdown {\n    position: absolute;\n    z-index: 1;\n\n    box-shadow: 0px 6px 9px 0px #1D1D1D1A;\n    border: 1px solid tokens.$ifxColorEngineering200;\n    border-radius: tokens.$ifxBorderRadius12;\n    padding: tokens.$ifxSpace100 0;\n\n    background-color: tokens.$ifxColorBaseWhite;\n\n    min-width: 222px;\n}\n\n\n// .container {\n//   //display: inline-block;\n//   position: relative;\n//   font-family: var(--ifx-font-family);\n\n//   & .wrapper {\n//     display: inline-flex;\n//     flex-direction: row;\n//     align-items: center;\n//     padding: 8px 16px;\n//     gap: tokens.$ifxSpace100;\n\n//     background: tokens.$ifxColorBaseWhite;\n\n//     border: 1px solid  tokens.$ifxColorEngineering300;\n//     border-radius: 100px;\n\n//     &:hover {\n//       cursor: pointer;\n//       border: 1px solid tokens.$ifxColorEngineering500;\n//     }\n\n//     &.active {\n//       border: 1px solid tokens.$ifxColorOcean500;\n//       outline: none;\n//     }\n\n//     & .wrapper-label {\n//       font-style: normal;\n//       font-weight: 400;\n//       font-size: tokens.$ifxFontSizeS;\n//       line-height: tokens.$ifxLineHeightS;\n//       display: flex;\n//       align-items: center;\n//       color: tokens.$ifxColorBaseBlack;\n//       flex: none;\n//       order: 0;\n//       flex-grow: 0;\n//     }\n\n//     & .wrapper-close-button {\n//       display: flex;\n//       align-items: center;\n      \n//       & ifx-icon {\n//         transition: .3s;\n//         width: 12px;\n//         height: 12px;\n//       }\n\n//       &.show {\n//         & ifx-icon {\n//           transition: transform .3s;\n//           transform: rotate(-180deg);\n//         }\n//       }\n//     }\n\n//     &.selected {\n//       border: 1px solid tokens.$ifxColorOcean500;\n//       outline: 2px solid tokens.$ifxColorOcean500;\n//       outline-offset: -3px;\n\n//       & .wrapper-label {\n//         font-style: normal;\n//         font-weight: 600;\n//         font-size: tokens.$ifxFontSizeS;\n//         line-height: tokens.$ifxLineHeightS;\n//         color: tokens.$ifxColorOcean500;\n//       }\n\n//       & ifx-icon {\n//         color: tokens.$ifxColorOcean500;\n//       }\n\n//       &:hover {\n//         border: 1px solid tokens.$ifxColorOcean600;\n//         outline: 2px solid tokens.$ifxColorOcean600;\n\n//         & ifx-icon,\n//         & .wrapper-label {\n//           color: tokens.$ifxColorOcean600;\n//         }\n//       }\n//     }\n//   }\n// }","import { h,\n         Element,\n         Component,\n         Listen,\n         Prop,\n         State } from '@stencil/core';\n\nimport { ChipItemEvent } from './interfaces';\n\n@Component({\n    tag: 'ifx-chip',\n    styleUrl: 'chip.scss',\n    shadow: true\n})\n\n\nexport class Chip {\n    @Element() chip: HTMLIfxChipElement;\n\n    @Prop() placeholder: string = '';\n    @Prop() size: 'small' | 'large' = 'large';\n    @Prop() variant: 'single' | 'multi' = 'single';\n\n    @State() opened: boolean = false;\n    @State() selectedOptions: Array<ChipItemEvent> = [];\n\n    @Listen('mousedown', { target: 'document' })\n    handleOutsideClick(event: MouseEvent) {\n        const path = event.composedPath();\n        const chipWrapper = this.chip.shadowRoot.querySelector('.chip__wrapper');\n        const chipDropdown = this.chip.shadowRoot.querySelector('.chip__dropdown');\n        if (!path.includes(chipDropdown) && !path.includes(chipWrapper) && this.opened) {\n            this.toggleDropdownMenu();\n        }\n    }\n\n    @Listen('ifxChipItem') \n    updateSelectedOptions(event: CustomEvent<ChipItemEvent>) {\n        const eventDetail: ChipItemEvent = event.detail;\n        if (this.variant === 'single') {\n            if (eventDetail.selected) {\n                this.selectedOptions = [ eventDetail ];\n                this.opened = false;\n            } else {\n                this.selectedOptions = [];\n            }\n        } else {\n            if (eventDetail.selected) {\n                this.selectedOptions = [...this.selectedOptions, eventDetail];\n            } else {\n                this.selectedOptions = this.selectedOptions.filter((option) => option.key !== eventDetail.key);\n            }\n        }\n    }\n\n  // @Listen('ifxDropdownItem')\n  // handleDropdownItemValueEmission(event: CustomEvent) {\n  //   this.selectedValue = event.detail;\n  //   this.ifxDropdownMenu.emit(event.detail);\n  //   this.toggleMenu()\n  // }\n\n  // getDropdownMenu() { \n  //   let dropdownMenuComponent = this.el.querySelector('ifx-dropdown-menu');\n  //   return dropdownMenuComponent\n  // }\n\n  // closedMenu() {\n  //   let dropdownMenuComponent = this.getDropdownMenu()\n  //   if(dropdownMenuComponent.isOpen) {\n  //     this.toggleCloseIcon();\n  //   }\n  //   dropdownMenuComponent.isOpen = false;\n  //   this.active = false;\n  // }\n\n  // toggleMenu() { \n  //   let dropdownMenuComponent = this.getDropdownMenu()\n  //   dropdownMenuComponent.isOpen = !dropdownMenuComponent.isOpen;\n  //   this.active = dropdownMenuComponent.isOpen;\n  //   this.toggleCloseIcon()\n  // }\n\n  // toggleCloseIcon() { \n  //   const closeIconWrapper = this.el.shadowRoot.querySelector('.wrapper-close-button')\n  //   closeIconWrapper.classList.toggle('show')\n  // }\n\n  // render() {\n  //   return (\n  //     <div aria-value={this.selectedValue} aria-label='chip with a dropdown menu' class=\"dropdown container\">\n  //       <div class={`wrapper ${this.active ? 'active' : ''} ${this.selectedValue !== '' ? 'selected' : ''}`} onClick={() => this.toggleMenu()} tabIndex={0}>\n  //         <div class=\"wrapper-label\">\n  //           {this.selectedValue ? this.selectedValue : this.placeholder}\n  //         </div>\n  //         <div class=\"wrapper-close-button\">\n  //           <ifx-icon icon=\"chevrondown12\"></ifx-icon>\n  //         </div>\n  //       </div>\n  //       <slot name=\"menu\" />\n  //     </div>\n  //   );\n  // }\n\n    toggleDropdownMenu() {\n        this.opened = !this.opened;\n    }\n\n    handleWrapperClick() {\n        this.toggleDropdownMenu();\n    }\n\n    handleWrapperKeyDown(event: KeyboardEvent) {\n        if (event.code === 'Space' || event.code === 'Enter') {\n            this.toggleDropdownMenu();\n        }\n    }\n\n    getChipItems(): NodeList {\n        return this.chip.querySelectorAll('ifx-chip-item');\n    }\n\n    syncChipState() {\n        const chipItems: NodeList = this.getChipItems();\n        let key: number = 0;\n        chipItems.forEach((chipItem: HTMLIfxChipItemElement) => {\n            chipItem.chipState = { size: this.size,\n                                   variant: this.variant, \n                                   key: key++ };\n        });\n    }\n\n    getSelectedOptions(): string {\n        console.log(this.selectedOptions)\n        if (this.variant === 'single') {\n            return this.selectedOptions[0].label;\n        } else {\n            let optionsLabel = '';\n            let index = 0;\n            while(index < 2) {\n                if (index < this.selectedOptions.length) {\n                    optionsLabel += this.selectedOptions[index].label;\n                    index++;\n                }\n\n                if (index < 2 && index < this.selectedOptions.length) {\n                    optionsLabel += ', ';\n                    continue;\n                }\n\n                break;\n            }\n            return optionsLabel;\n        }   \n    }\n\n    componentWillLoad() {\n        this.syncChipState();\n    }\n\n    render() {\n        return (\n            <div aria-value={'TBD'} aria-label='chip with a dropdown menu' class='chip'>\n            \n                {/* Wrapper */}\n                <div class={`chip__wrapper chip__wrapper--${this.size} \n                     chip__wrapper--${this.variant}\n                     ${this.opened ? 'chip__wrapper--opened': ''}\n                     ${this.selectedOptions.length ? 'chip__wrapper--selected': ''}`}\n                tabIndex={0}\n                onClick={() => {this.handleWrapperClick()}}\n                onKeyDown={(e) => {this.handleWrapperKeyDown(e)}}>\n\n                    <div class='wrapper__label'>\n                        {\n                            (this.selectedOptions.length === 0) && `${this.placeholder}`\n                        }\n                        {\n                            (this.selectedOptions.length !== 0 && this.variant === 'multi') &&\n                            `${this.placeholder}:`\n                        }\n                        {\n                            (this.selectedOptions.length !== 0) && \n                            <div class='label__selected-options'>\n                                {this.getSelectedOptions()}\n                            </div>\n                        }\n                        {\n                            (this.selectedOptions.length > 2) &&\n                            <ifx-number-indicator>  {`+${this.selectedOptions.length - 2}`} </ifx-number-indicator>\n                        }\n                    </div>\n\n                    {\n                        (this.variant === 'single' || (this.variant === 'multi' && this.selectedOptions.length === 0)) &&\n                        <div class='wrapper__open-button'> Pr </div>\n                    }\n                    \n                    {\n                        ((this.selectedOptions.length >= 1) && this.variant === 'multi') &&\n                        <div class='wrapper__open-button'> Cr </div>\n                    } \n                </div>\n\n                {/* Dropdown */}\n                {   \n                    this.opened &&\n                    <div class='chip__dropdown'>\n                        <slot />\n                    </div>\n                }\n\n            </div>\n        ); \n    }\n}","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../../global/font.scss\";\n\n.chip-item {\n    display: flex;\n    align-items: center;\n    gap: tokens.$ifxSpace100;\n    \n    padding: tokens.$ifxSpace100 tokens.$ifxSpace200;\n    \n    user-select: none;\n    \n    transition: all 100ms ease;\n    transition-property: background, color;\n    \n    &:hover {\n        cursor: pointer;\n        \n        background-color: tokens.$ifxColorEngineering200;\n    }\n    \n    &:active {\n        background-color: tokens.$ifxColorEngineering300;\n    }\n    \n    &.chip-item--large {\n        font: tokens.$ifxBodyBody03;\n    }\n    \n    &.chip-item--small {\n        font: tokens.$ifxBodyBody04;\n    }\n\n    &.chip-item--selected {\n        color: tokens.$ifxColorOcean500;\n\n        .chip-item__selected-indicator {\n            display: block;\n        }\n    }\n}\n\n.chip-item__selected-indicator {\n    display: none;\n    \n    margin-left: auto;\n}\n\n","import { h,\n         Component,\n         Element,\n         Event,\n         EventEmitter, \n         Listen,\n         Prop, \n         State,\n         Watch } from '@stencil/core';\n\nimport { ChipItemEvent, ChipState } from '../interfaces';\n\n@Component({\n    tag: 'ifx-chip-item',\n    styleUrl: 'chip-item.scss',\n    shadow: true\n})\n\nexport class ChipItem {\n    /**\n     * Reference to the component.\n     */\n    @Element() chipItem: HTMLIfxChipItemElement;\n\n    /**\n     * An event emitted whenever the Chip Item is selected/unselected.\n     */\n    @Event({ composed: false }) ifxChipItem: EventEmitter<ChipItemEvent>;\n\n    /**\n     * Value is used to identify the Chip Item.\n     * \n     * @Default `undefined`\n     */\n    @Prop() value: string = undefined;\n\n    /**\n     * An internal prop to store the state of the parent (Chip Component).\n     */\n    @Prop({ reflect: false }) chipState: ChipState = { variant: 'multi', size: 'large' }; \n\n    /**\n     * The prop allows to set the initial *selected* status of the Chip Item.\n     * \n     * @Default `false`\n     */\n    @Prop() selected?: boolean = false;\n    \n    /**\n     * Internal 'selected' state to update Chip Item design whenever the Chip Item\n     * is selected/unselected.\n     */\n    @State() internalSelected: boolean;\n\n\n    @Listen('ifxChipItem', { target: 'body' })\n    updateItemSelection(event: CustomEvent<ChipItemEvent>) {\n        if (this.chipState.variant === 'single') {\n            const target = event.target as HTMLIfxChipItemElement;\n            if (this.chipItem !== target && this.chipItem.parentElement === target.parentElement) {\n                this.internalSelected = false;\n            }\n        }\n    } \n\n    @Watch('selected')\n    validateSelected(newValue: boolean, oldValue: boolean) {\n        if (newValue !== oldValue) {\n            this.internalSelected = newValue;\n        }\n    } \n\n    \n    /**\n     * Helpers\n     */\n\n    handleItemClick() {\n        this.toggleItemSelection();\n    }\n\n    handleItemKeyDown(event: KeyboardEvent) {\n        if (event.code === 'Enter' || event.code === 'Space') {\n            this.toggleItemSelection();\n        }\n    }\n\n    handleSelectedState() {\n        if (this.selected) {\n            this.internalSelected = this.selected;\n            this.ifxChipItem.emit({ key: this.chipState.key,\n                                    label: this.getItemLabel(), \n                                    selected: true, \n                                    value: this.value } );\n        }\n    }\n    \n    /**\n     * Utilities\n     */\n    \n    getItemLabel(): string {\n        return this.chipItem.innerText as string;\n    }\n\n    toggleItemSelection() {\n        this.internalSelected = !this.internalSelected;\n        this.ifxChipItem.emit({ key: this.chipState.key,\n                                label: this.getItemLabel(), \n                                selected: this.internalSelected, \n                                value: this.value } );\n    }\n\n    /**\n     * Lifecycle Methods\n     */\n\n    componentWillLoad() {\n        this.handleSelectedState();\n    }\n\n    render() {\n        return (\n            <div class={`chip-item chip-item--${this.chipState.size} \n                         chip-item--${(this.internalSelected && this.chipState.variant) === 'single' ? 'selected' : ''}`} \n                tabIndex={0}\n                onClick={() => {this.handleItemClick()}}\n                onKeyDown={(e) => {this.handleItemKeyDown(e)}}>\n                { \n                    this.chipState.variant === 'multi' &&\n                    <ifx-checkbox value={this.internalSelected}\n                        tabIndex={-1} \n                        size='s'>\n                    </ifx-checkbox>\n                }\n                <div class='chip-item__label'> <slot /> </div>\n                <div class='chip-item__selected-indicator'> \n                    <ifx-icon icon={`check${this.chipState.size === 'small' ? '12' : '16'}`}> </ifx-icon> \n                </div>\n            </div>\n        );\n    }\n}\n          ","ifx-icon {\n  display: inline-flex;\n  justify-content: center;\n\n  &:empty {\n    display: none;\n  }\n}","import { Component, Prop, h, Host, Event, EventEmitter } from '@stencil/core';\nimport { getIcon } from '@infineon/infineon-icons'\n \n\n\n@Component({\n  tag: 'ifx-icon',\n  styleUrl: './infineonIconStencil.scss'\n})\n\nexport class InfineonIconStencil {\n  @Prop({ mutable: true }) icon: string = \"\"\n  @Prop({ mutable: true }) ifxIcon: any;\n  @Event() consoleError: EventEmitter<boolean>;\n \n  convertStringToHtml(htmlString) { \n    const div = document.createElement('div')\n    div.innerHTML = htmlString\n    return div.firstChild\n  }\n\n  convertHtmlToObject(htmlElement) { \n    let pathToObject = Array\n      .from(htmlElement.attributes, ({ name, value }) => ({ name, value }))\n      .reduce((acc, current) => {\n        acc[current.name] = current.value\n        return acc\n      }, {})\n\n    return pathToObject\n  }\n\n  convertPathsToVnode(htmlPath) { \n    let svgPaths = []\n    const parentPath = this.convertHtmlToObject(htmlPath);\n    const parentPathToVnode = h(\"path\", parentPath);\n    svgPaths.push(parentPathToVnode)\n    if(htmlPath.firstChild) { \n      const paths = htmlPath.querySelectorAll('path');\n      const pathLength = htmlPath.querySelectorAll('path').length;\n      for(let i = 0; i < pathLength; i++) { \n        let pathToObject = this.convertHtmlToObject(paths[i])\n        let objToVnode = h(\"path\", pathToObject)\n        svgPaths.push(objToVnode)\n      }      \n    }\n    return svgPaths\n  }\n\n  getSVG(svgPath) {\n    return <svg class=\"inline-svg\" width={this.ifxIcon.width} height={this.ifxIcon.height} xmlns=\"http://www.w3.org/2000/svg\" fill={this.ifxIcon.fill} viewBox={this.ifxIcon.viewBox}>{...svgPath}</svg>\n  }\n\n  constructIcon() {\n    if(this.ifxIcon) {\n      const htmlPath = this.convertStringToHtml(this.ifxIcon.svgContent)\n      const svgPath = this.convertPathsToVnode(htmlPath)\n      const SVG = this.getSVG(svgPath)\n      this.consoleError.emit(false)\n      return SVG;\n    } else if(this.icon !== \"\") {\n      console.error('Icon not found!')\n      this.consoleError.emit(true)\n      return;\n    }  else { \n      return;\n    }\n  }\n\n  componentWillLoad() {\n    const removeHyphen = (str) => str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (_m, chr) => chr);\n    this.ifxIcon = getIcon(removeHyphen(this.icon));\n  }\n\n\n\n  render() {\n    return (\n      <Host>\n      {this.constructIcon()}\n      </Host>\n    );\n  }\n}","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n:host {\n  display: inline-flex;\n}\n\n.numberIndicator__container {\n  display: inline-flex;\n  padding: 0px 4px;\n  height: 16px;\n  justify-content: center;\n  align-items: center;\n  border-radius: 100px;\n  background-color: tokens.$ifxColorOcean500;\n  font-family: var(--ifx-font-family);\n\n  & span {\n    color: tokens.$ifxColorBaseWhite;\n    text-align: center;\n    font-size: tokens.$ifxFontSizeS;\n    font-style: normal;\n    font-weight: tokens.$ifxFontWeightSemibold;\n    line-height: 16px;\n  }\n\n  &.inverted {\n    background-color: tokens.$ifxColorBaseWhite;\n\n    & span {\n      color: tokens.$ifxColorOcean500;\n    }\n  }\n}","import { Component, h, Prop } from '@stencil/core';\n \n\n@Component({\n  tag: 'ifx-number-indicator',\n  styleUrl: 'number-indicator.scss',\n  shadow: true\n})\nexport class NumberIndicator {\n  @Prop() inverted: boolean = false;\n\n\n\n  render() {\n    return (\n      <div aria-label='a number indicator' class={`numberIndicator__container ${this.inverted ? 'inverted' : \"\"}`}>\n        <span>\n          <slot />\n        </span>\n      </div>\n    );\n  }\n}"],"names":["Checkbox","handleCheckbox","this","disabled","inputElement","indeterminate","internalValue","internalIndeterminate","internals","setFormValue","ifxChange","emit","toggleCheckedState","newVal","valueChanged","newValue","oldValue","checked","indeterminateChanged","handleKeydown","event","keyCode","preventDefault","componentWillLoad","value","componentDidRender","formResetCallback","getCheckedClassName","error","render","hasSlot","el","innerHTML","h","key","class","type","hidden","ref","onChange","bind","id","tabindex","onClick","onKeyDown","role","size","icon","Chip","handleOutsideClick","path","composedPath","chipWrapper","chip","shadowRoot","querySelector","chipDropdown","includes","opened","toggleDropdownMenu","updateSelectedOptions","eventDetail","detail","variant","selected","selectedOptions","filter","option","handleWrapperClick","handleWrapperKeyDown","code","getChipItems","querySelectorAll","syncChipState","chipItems","forEach","chipItem","chipState","getSelectedOptions","console","log","label","optionsLabel","index","length","tabIndex","e","placeholder","ChipItem","undefined","updateItemSelection","target","parentElement","internalSelected","validateSelected","handleItemClick","toggleItemSelection","handleItemKeyDown","handleSelectedState","ifxChipItem","getItemLabel","innerText","InfineonIconStencil","convertStringToHtml","htmlString","div","document","createElement","firstChild","convertHtmlToObject","htmlElement","Array","from","attributes","_ref","name","reduce","acc","current","convertPathsToVnode","htmlPath","svgPaths","parentPath","parentPathToVnode","push","paths","pathLength","i","pathToObject","objToVnode","getSVG","svgPath","width","ifxIcon","height","xmlns","fill","viewBox","constructIcon","svgContent","SVG","consoleError","getIcon","toLowerCase","replace","_m","chr","Host","NumberIndicator","inverted"],"sourceRoot":""}