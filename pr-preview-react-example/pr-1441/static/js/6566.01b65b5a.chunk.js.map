{"version":3,"file":"static/js/6566.01b65b5a.chunk.js","mappings":"sKAAA,MCgBaA,EAAQ,M,8FAgBOC,E,eAKO,CAAEC,iBAAiB,EAAMC,QAAS,QAASC,KAAM,S,eAOpB,C,CAO5DC,mBAAAA,CAAoBC,GAChB,GAA+B,WAA3BC,KAAKC,UAAUL,QAAsB,CACrC,MAAMM,EAASH,EAAMG,OAEjBF,KAAKG,WAAaD,GAAUF,KAAKG,SAASC,gBAAkBF,EAAOE,gBACnEJ,KAAKK,UAAW,E,EAS5BC,gBAAAA,CAAiBC,EAAmBC,GAC5BD,IAAaC,IAETR,KAAKC,UAAUN,gBACfK,KAAKS,uBAELT,KAAKC,UAAUN,iBAAkB,E,CAU7Ce,YAAAA,GACI,OAAOV,KAAKG,SAASQ,S,CAMzBC,mBAAAA,GACIZ,KAAKK,UAAYL,KAAKK,Q,CAO1BI,oBAAAA,GAAkD,IAA7BI,IAAAC,UAAAC,OAAA,QAAArB,IAAAoB,UAAA,KAAAA,UAAA,GACjBd,KAAKgB,YAAYC,KAAK,CAAEJ,cAAeA,EACfK,IAAKlB,KAAKC,UAAUiB,IACpBC,MAAOnB,KAAKU,eACZL,SAAUL,KAAKK,SACfe,MAAOpB,KAAKoB,O,CAGxCC,eAAAA,GACIrB,KAAKY,qB,CAGTU,iBAAAA,CAAkBvB,GACK,UAAfA,EAAMwB,MAAmC,UAAfxB,EAAMwB,MAChCvB,KAAKY,qB,CAIbY,mBAAAA,GACQxB,KAAKK,UACLL,KAAKS,sBAAqB,E,CAQlCgB,iBAAAA,GAEIzB,KAAKwB,qB,CAGTE,MAAAA,GACI,OACIC,EAAAA,EAAAA,GAAA,OAAAT,IAAA,2CAAKU,MAAO,wBAAwB5B,KAAKC,UAAUJ,8CACqB,YAA7CG,KAAKK,UAAYL,KAAKC,UAAUL,SAAwB,WAAa,KAC5FiC,SAAU,EACVC,QAASA,KAAO9B,KAAKqB,iBAAiB,EACtCU,UAAYC,IAAOhC,KAAKsB,kBAAkBU,EAAE,GAIb,UAA3BhC,KAAKC,UAAUL,UACf+B,EAAAA,EAAAA,GAAA,gBAAcP,MAAOpB,KAAKK,SACtBwB,UAAW,EACXhC,KAAK,OAIb8B,EAAAA,EAAAA,GAAA,OAAAT,IAAA,2CAAKU,MAAM,oBAAkB,KAAED,EAAAA,EAAAA,GAAA,QAAAT,IAAA,6CAAQ,MAGvCS,EAAAA,EAAAA,GAAA,OAAAT,IAAA,2CAAKU,MAAM,kCACPD,EAAAA,EAAAA,GAAA,YAAAT,IAAA,2CAAUe,KAAM,SAAgC,UAAxBjC,KAAKC,UAAUJ,KAAmB,KAAO,OAAM,M,0GDtJvE,+oB","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chip/chip-item/chip-item.scss?tag=ifx-chip-item&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chip/chip-item/chip-item.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../../global/font.scss\";\n\n.chip-item {\n    display: flex;\n    align-items: center;\n    gap: tokens.$ifxSpace100;\n    \n    padding: tokens.$ifxSpace100 tokens.$ifxSpace200;\n    \n    user-select: none;\n    \n    transition: all 100ms ease;\n    transition-property: background, color;\n    \n    &:hover {\n        cursor: pointer;\n        \n        background-color: tokens.$ifxColorEngineering200;\n    }\n    \n    &:active {\n        background-color: tokens.$ifxColorEngineering300;\n    }\n    \n    &.chip-item--large {\n        font: tokens.$ifxBodyBody03;\n    }\n    \n    &.chip-item--small {\n        font: tokens.$ifxBodyBody04;\n    }\n\n    &.chip-item--selected {\n        color: tokens.$ifxColorOcean500;\n\n        .chip-item__selected-indicator {\n            display: block;\n        }\n    }\n}\n\n.chip-item__selected-indicator {\n    display: none;\n    \n    margin-left: auto;\n}\n\n","import { h,\n         Component,\n         Element,\n         Event,\n         EventEmitter, \n         Listen,\n         Prop, \n         Watch } from '@stencil/core';\nimport { ChipItemEvent, ChipState } from '../interfaces';\n\n@Component({\n    tag: 'ifx-chip-item',\n    styleUrl: 'chip-item.scss',\n    shadow: true\n})\n\nexport class ChipItem {\n    /**\n     * Reference to this component.\n     */\n    @Element() chipItem: HTMLIfxChipItemElement;\n\n    /**\n     * An event emitted whenever the Chip Item is selected/unselected.\n     */\n    @Event({ composed: false }) ifxChipItem: EventEmitter<ChipItemEvent>;\n\n    /**\n     * Value is used to uniquely identify the Chip Item.\n     * \n     * @Default `undefined`\n     */\n    @Prop() value: string = undefined;\n\n    /**\n     * An internal prop to store the state of the parent (Chip Component).\n     */\n    @Prop() chipState: ChipState = { emitIfxChipItem: true, variant: 'multi', size: 'large' }; \n\n    /**\n     * The prop allows to set the initial *selected* status of the Chip Item.\n     * \n     * @Default `false`\n     */\n    @Prop({ mutable: true, reflect: true }) selected: boolean = false;\n\n    /**\n     * Listenting for ifxChipItem event to unselect the previously selected Item.\n     * Only used for the *single* variant of Chip.\n     */\n    @Listen('ifxChipItem', { target: 'body' })\n    updateItemSelection(event: CustomEvent<ChipItemEvent>) {\n        if (this.chipState.variant === 'single') {\n            const target = event.target as HTMLIfxChipItemElement;\n            /* Also making sure chip items are from the same group (parent) while unselecting. */\n            if (this.chipItem !== target && this.chipItem.parentElement === target.parentElement) {\n                this.selected = false;\n            }\n        }\n    } \n\n    /**\n     * Keeping internal *selected* state in sync with the selected prop if changed.\n     */\n    @Watch('selected')\n    validateSelected(newValue: boolean, oldValue: boolean) {\n        if (newValue !== oldValue) {\n            /* Do not emit if ChipState does not allow. */\n            if (this.chipState.emitIfxChipItem){\n                this.emitIfxChipItemEvent();\n            } else {\n                this.chipState.emitIfxChipItem = true;\n            }\n        }\n    } \n    \n    /**\n     * A function extracts and returns the Item label.\n     * \n     * @returns string\n     */\n    getItemLabel(): string {\n        return this.chipItem.innerText as string;\n    }\n\n    /**\n     * Toggles the selection of the Chip Item and emits the ifxChipItem event.\n     */\n    toggleItemSelection() {\n        this.selected = !this.selected;\n    }\n        \n    /**\n     * Helper functions\n     */\n\n    emitIfxChipItemEvent(emitIfxChange: boolean = true) {\n        this.ifxChipItem.emit({ emitIfxChange: emitIfxChange,\n                                key: this.chipState.key,\n                                label: this.getItemLabel(), \n                                selected: this.selected, \n                                value: this.value });\n    }\n\n    handleItemClick() {\n        this.toggleItemSelection();\n    }\n\n    handleItemKeyDown(event: KeyboardEvent) {\n        if (event.code === 'Enter' || event.code === 'Space') {\n            this.toggleItemSelection();\n        }\n    }\n\n    handleSelectedState() {\n        if (this.selected) {\n            this.emitIfxChipItemEvent(false);\n        }\n    }\n\n    /**\n     * Lifecycle Methods\n     */\n\n    componentWillLoad() {\n        /* Propogating the selected state to the Chip (Parent) component if it is set. */\n        this.handleSelectedState();\n    }\n\n    render() {\n        return (\n            <div class={`chip-item chip-item--${this.chipState.size} \n                         chip-item--${(this.selected && this.chipState.variant) === 'single' ? 'selected' : ''}`} \n                tabIndex={0}\n                onClick={() => {this.handleItemClick()}}\n                onKeyDown={(e) => {this.handleItemKeyDown(e)}}>\n\n                {/* Checkbox; renders only in 'multi' variant. */}\n                { \n                    this.chipState.variant === 'multi' &&\n                    <ifx-checkbox value={this.selected}\n                        tabIndex={-1} \n                        size='s'>\n                    </ifx-checkbox>\n                }\n\n                <div class='chip-item__label'> <slot /> </div>\n\n                {/* Selected indicator only visible in 'single' variant. */}\n                <div class='chip-item__selected-indicator'> \n                    <ifx-icon icon={`check${this.chipState.size === 'small' ? '12' : '16'}`}> </ifx-icon> \n                </div>\n\n            </div>\n        );\n    }\n}\n          "],"names":["ChipItem","undefined","emitIfxChipItem","variant","size","updateItemSelection","event","this","chipState","target","chipItem","parentElement","selected","validateSelected","newValue","oldValue","emitIfxChipItemEvent","getItemLabel","innerText","toggleItemSelection","emitIfxChange","arguments","length","ifxChipItem","emit","key","label","value","handleItemClick","handleItemKeyDown","code","handleSelectedState","componentWillLoad","render","h","class","tabIndex","onClick","onKeyDown","e","icon"],"sourceRoot":""}