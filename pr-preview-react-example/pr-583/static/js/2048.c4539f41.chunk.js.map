{"version":3,"file":"static/js/2048.c4539f41.chunk.js","mappings":"sNAQaA,EAAqB,W,6DAEJ,G,cACD,E,iHAK3B,SAAeC,EAASC,EAASC,EAAOC,GAClCH,GAAW,GACbI,KAAKC,UAAY,WACRJ,GAAW,GACpBG,KAAKC,UAAY,GAAHC,OAAML,EAAO,aAClBC,GAAS,GAClBE,KAAKC,UAAwB,GAAHC,OAAMJ,EAAfA,EAAQ,EAAY,WAAqB,aACjDC,IACTC,KAAKC,UAAYH,EAAQ,GAAK,YAAH,GAAAI,OAAoBH,EAAI,aAC/CD,EAAQ,MACVE,KAAKC,UAAY,GAAHC,QAAM,IAAIC,MAAOC,SAAQ,KAAAF,QAAI,IAAIC,MAAOE,WAAU,KAAAH,QAAI,IAAIC,MAAOG,gB,GAGpF,CAAAC,IAAA,eAAAC,MAED,SAAaC,GACX,IAAKA,EAAY,OAAO,KACxB,IAAIC,EAAYD,EAAWE,MAAM,KACjC,GAAID,EAAU,IACRA,EAAU,GAAGC,MAAM,KAAK,GAAI,CAC9B,IAAIC,EAAYF,EAAU,GAAGC,MAAM,KAAK,GAAGA,MAAM,KAEjD,OADAD,EAAU,GAAKA,EAAU,GAAGC,MAAM,KAAK,GAChC,IAAIR,MAAMO,EAAU,GAAIA,EAAU,GAAK,GAAIA,EAAU,GAAIE,EAAU,GAAIA,EAAU,GAAIA,EAAU,G,IAG3G,CAAAL,IAAA,iBAAAC,MAED,SAAeK,GACb,IAAIC,EAAOd,KAAKe,aAAaF,GAC7B,GAAIC,EAAM,CACR,IAAIE,EAAcb,KAAKc,MAAQH,EAAKI,UAChCtB,EAAUuB,KAAKC,MAAMJ,EAAc,KACnCnB,EAAUsB,KAAKC,MAAMJ,EAAc,KACnClB,EAAQqB,KAAKC,MAAMvB,EAAU,IAC7BE,EAAOoB,KAAKC,MAAMtB,EAAQ,IAC9BE,KAAKqB,eAAezB,EAASC,EAASC,EAAOC,E,IAEhD,CAAAQ,IAAA,kBAAAC,MAED,SAAgBK,GAAI,IAAAS,EAAA,KAClBtB,KAAKuB,SAAWC,OAAOC,aAAY,WACjCH,EAAKI,eAAeb,E,GACnB,I,GACJ,CAAAN,IAAA,oBAAAC,MAED,WACER,KAAK0B,eAAe1B,KAAK2B,cACzB3B,KAAK4B,gBAAgB5B,KAAK2B,cACL3B,KAAK6B,GAAGC,QAAQ,kBACpBC,MACf/B,KAAKgC,SAAU,EACVhC,KAAKgC,SAAU,C,GACvB,CAAAzB,IAAA,uBAAAC,MAED,WACEgB,OAAOS,cAAcjC,KAAKuB,S,GAC3B,CAAAhB,IAAA,SAAAC,MAED,WACE,OACE0B,EAAAA,EAAAA,GAAA,OAAKC,MAAK,2BAAAjC,OAA6BF,KAAKgC,QAAU,QAAU,MAC9DE,EAAAA,EAAAA,GAAA,OAAKC,MAAM,qBACTD,EAAAA,EAAAA,GAAA,MAAIC,MAAM,0BAA0BnC,KAAKoC,YACzCF,EAAAA,EAAAA,GAAA,OAAKC,MAAM,yBAAyBnC,KAAKC,aAE3CiC,EAAAA,EAAAA,GAAA,OAAKC,MAAM,yBACTD,EAAAA,EAAAA,GAAA,c,GAIP,CAAA3B,IAAA,KAAA8B,IAAA,W,0BA9E+B,G,QCRD,u8B","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/list-group/list-group-notification.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/list-group/list-group-notification.scss?tag=ifx-list-notification&encapsulation=shadow"],"sourcesContent":["import { Component, h, Element, Prop, State } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-list-notification',\n  styleUrl: 'list-group-notification.scss',\n  shadow: true,\n})\n\nexport class ListGroupNotification {\n  @Element() el;\n  @Prop() titleText: string = \"\"\n  @Prop() isFlush: boolean = false;\n  @Prop() creationTime: any;\n  @State() postTime: number;\n  @State() shownTime: string;\n\n  setDisplayTime(seconds, minutes, hours, days) {\n    if (seconds <= 60) {\n      this.shownTime = `Just now`\n    } else if (minutes <= 60) {\n      this.shownTime = `${minutes} min. ago`\n    } else if (hours <= 24) {\n      this.shownTime = hours > 1 ? `${hours} hr. ago` : `${hours} hrs. ago`\n    } else if (days) {\n      this.shownTime = hours < 48 ? `1 day ago` : `${days} days ago`\n      if (hours > 168) {\n        this.shownTime = `${new Date().getDay()}.${new Date().getMonth()}.${new Date().getFullYear()}`\n      }\n    }\n  }\n\n  stringToDate(dataString) {\n    if (!dataString) return null\n    let dateParts = dataString.split(\"/\");\n    if (dateParts[2]) {\n      if (dateParts[2].split(\" \")[1]) {\n        let timeParts = dateParts[2].split(\" \")[1].split(\":\");\n        dateParts[2] = dateParts[2].split(\" \")[0];\n        return new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0], timeParts[0], timeParts[1], timeParts[2]);\n      }\n    }\n  }\n\n  getElapsedTime(time) {\n    let date = this.stringToDate(time)\n    if (date) {\n      let miliseconds = Date.now() - date.getTime()\n      let seconds = Math.floor(miliseconds / 1000);\n      let minutes = Math.floor(miliseconds / 60000);\n      let hours = Math.floor(minutes / 60);\n      let days = Math.floor(hours / 24);\n      this.setDisplayTime(seconds, minutes, hours, days)\n    }\n  }\n\n  setTimeInterval(time) {\n    this.postTime = window.setInterval(() => {\n      this.getElapsedTime(time)\n    }, 1000)\n  };\n\n  componentWillLoad() {\n    this.getElapsedTime(this.creationTime)\n    this.setTimeInterval(this.creationTime) //if time update on refresh, delete this & clear interval\n    const ifxListGroup = this.el.closest('ifx-list-group')\n    if (ifxListGroup.flush) {\n      this.isFlush = true;\n    } else this.isFlush = false;\n  }\n\n  disconnectedCallback() {\n    window.clearInterval(this.postTime);\n  }\n\n  render() {\n    return (\n      <div class={`list-group-notification ${this.isFlush ? 'flush' : \"\"}`}>\n        <div class=\"heading__section\">\n          <h6 class=\"heading__section-title\">{this.titleText}</h6>\n          <div class=\"heading__section-time\">{this.shownTime}</div>\n        </div>\n        <div class=\"description__section\">\n          <slot />\n        </div>\n      </div>\n    );\n  }\n}\n","@use \"~@infineon/design-system-tokens/dist/tokens\";\n\n.list-group-notification {\n  width: 350px;\n  height: 88px;\n  padding: 16px;\n  margin-bottom: 8px;\n  background-color: tokens.$ifxColorBaseWhite;\n  border: 1px solid tokens.$ifxColorEngineering200;\n\n  & .description__section {\n    display: -webkit-box;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  &.flush {\n    border: none;\n    border-bottom: 1px solid tokens.$ifxColorEngineering200;\n  }\n\n  & .heading__section {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 8px;\n    color: tokens.$ifxColorOcean500;\n  }\n\n  & .heading__section-title {\n    flex: 1;\n    margin: 0;\n    font-family: \"Source Sans Pro\";\n    font-weight: tokens.$ifxFontWeightSemibold;\n    line-height: 1.2;\n    font-size: tokens.$ifxFontSizeM;\n\n    display: -webkit-box;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  & .heading__section-time {\n    flex: none;\n    margin-left: 2px;\n    font-size: tokens.$ifxFontSizeS;\n    line-height: tokens.$ifxLineHeightS;\n    font-weight: 400;\n\n    display: -webkit-box;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}"],"names":["ListGroupNotification","seconds","minutes","hours","days","this","shownTime","concat","Date","getDay","getMonth","getFullYear","key","value","dataString","dateParts","split","timeParts","time","date","stringToDate","miliseconds","now","getTime","Math","floor","setDisplayTime","_this","postTime","window","setInterval","getElapsedTime","creationTime","setTimeInterval","el","closest","flush","isFlush","clearInterval","h","class","titleText","get"],"sourceRoot":""}