{"version":3,"file":"static/js/314.20d5565e.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chips/chip.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/chips/chip.scss?tag=ifx-chip&encapsulation=shadow"],"sourcesContent":["import { Component, h, Element, Prop, Listen, State } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-chip',\n  styleUrl: 'chip.scss',\n  shadow: true\n})\n\nexport class Chip {\n  @Element() el;\n  @Prop() placeholder: string;\n  @State() isEmpty: boolean = true;\n\n  @Listen('mousedown', { target: 'document' })\n  handleOutsideClick(event: MouseEvent) {\n    const path = event.composedPath();\n    if (!path.includes(this.el)) {\n      this.closeDropdownMenu();\n    }\n  }\n\n  getDropdownMenu() {\n    let dropdownMenuComponent = this.el.querySelector('ifx-dropdown-menu');\n    if (dropdownMenuComponent) {\n      dropdownMenuComponent = this.el.querySelector('ifx-dropdown-menu').shadowRoot;\n      const dropdownMenuElement = dropdownMenuComponent.querySelector('.dropdown-menu');\n      return dropdownMenuElement\n    }\n  }\n\n  getDropdownWrapper() {\n    const dropdownWrapper = this.el.shadowRoot.querySelector('.dropdown');\n    return dropdownWrapper\n  }\n\n  getDropdownItems() {\n    const dropdownMenuItems = this.el.querySelectorAll('ifx-dropdown-item')\n    return dropdownMenuItems\n  }\n\n  handleClassList(el, type, className) {\n    el?.classList[type](className)\n  }\n\n  toggleDropdownMenu() {\n    const textField = this.getTextField()\n    const textFieldElement = textField.querySelector('.wrapper-close-button')\n    const chipWrapper = textField.closest('.wrapper');\n    const dropdownMenu = this.getDropdownMenu();\n    const dropdownWrapper = this.getDropdownWrapper()\n    this.handleClassList(dropdownMenu, 'toggle', 'show')\n    this.handleClassList(dropdownWrapper, 'toggle', 'show')\n    this.handleClassList(textFieldElement, 'toggle', 'show')\n    this.handleClassList(chipWrapper, 'toggle', 'open')\n  }\n\n  closeDropdownMenu() {\n    const dropdownMenu = this.getDropdownMenu()\n    const dropdownWrapper = this.getDropdownWrapper()\n    const textField = this.getTextField()\n    const chipWrapper = textField.closest('.wrapper');\n    const textFieldElement = textField.querySelector('.wrapper-close-button')\n    this.handleClassList(dropdownMenu, 'remove', 'show')\n    this.handleClassList(dropdownWrapper, 'remove', 'show')\n    this.handleClassList(textFieldElement, 'remove', 'show')\n    this.handleClassList(chipWrapper, 'remove', 'open')\n  }\n\n  removeActiveMenuItem() {\n    const dropdownMenuItems = this.getDropdownItems()\n    for (let i = 0; i < dropdownMenuItems.length; i++) {\n      this.handleClassList(dropdownMenuItems[i].shadowRoot.querySelector('a'), 'remove', 'active')\n    }\n  }\n\n  uncheckCheckboxes(target) {\n    const dropdownMenuItems = this.getDropdownItems()\n    for (let i = 0; i < dropdownMenuItems.length; i++) {\n      if (dropdownMenuItems[i].shadowRoot.querySelector('a') !== target) {\n        dropdownMenuItems[i].shadowRoot.querySelector('a').querySelector('ifx-checkbox').checked = false;\n      }\n    }\n  }\n\n  returnToDefaultLabel() {\n    const textField = this.getTextField()\n    const labelWrapper = textField.querySelector('.wrapper-label');\n    labelWrapper.innerHTML = this.placeholder;\n  }\n\n  toggleCheckbox(target) {\n    this.uncheckCheckboxes(target)\n    target.querySelector('ifx-checkbox').checked = !target.querySelector('ifx-checkbox').checked\n    if (target.querySelector('ifx-checkbox').checked === false) {\n      this.returnToDefaultLabel()\n    }\n  }\n\n  getClickedElement(target) {\n    if (target instanceof SVGElement) {\n      return target.closest('.dropdown-item')\n    } else if (target.className.includes('dropdown-menu')\n      || target.className.includes('form-check-input')) {\n      return false\n    } else {\n      return target.closest('.dropdown-item');\n\n    }\n  }\n\n  addActiveMenuItem = (e) => {\n    const target = this.getClickedElement(e.composedPath()[0])\n    const selectedAnchor = e.target.shadowRoot.querySelector('a');\n    const isCheckable = e.target.checkable;\n    this.uncheckCheckboxes(selectedAnchor)\n\n    if (!target) {\n      if (selectedAnchor.querySelector('ifx-checkbox').checked === false) {\n        this.returnToDefaultLabel()\n      }\n      return;\n    }\n\n    if (isCheckable) {\n      this.toggleCheckbox(target)\n      return;\n    }\n\n    this.removeActiveMenuItem()\n    this.handleClassList(target, 'add', 'active')\n    this.toggleDropdownMenu()\n  }\n\n  getTextField() {\n    let textField = this.el.shadowRoot.querySelector('.wrapper');\n    return textField\n  }\n\n  addItemValueToTextField(value) {\n    const textField = this.getTextField()\n    const labelWrapper = textField.querySelector('.wrapper-label')\n    value.target.setAttribute('target', value.target?.index)\n    labelWrapper.innerHTML = value.value\n  }\n\n  addEventListeners() {\n    const dropdownMenu = this.getDropdownMenu();\n    document.addEventListener('click', this.handleOutsideClick.bind(this))\n    dropdownMenu.addEventListener('click', this.addActiveMenuItem)\n    let dropdownMenuComponent = this.el.querySelector('ifx-dropdown-menu');\n    dropdownMenuComponent.addEventListener('selectValues', (event) => {\n      this.addItemValueToTextField(event.detail)\n    })\n  }\n\n  componentDidRender() {\n    let textInput = this.getTextField()\n    if (textInput) {\n      textInput.addEventListener('click', this.toggleDropdownMenu.bind(this))\n      this.addEventListeners()\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"dropdown container\">\n        <div class=\"wrapper\">\n          <div class=\"wrapper-label\">\n            {this.placeholder}\n          </div>\n          <div class=\"wrapper-close-button\">\n            <ifx-icon icon=\"chevrondown12\"></ifx-icon>\n          </div>\n        </div>\n\n        <slot name=\"menu\" />\n\n      </div>\n    );\n  }\n}","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n.container {\n  //display: inline-block;\n  position: relative;\n\n  & .wrapper {\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n    padding: 8px 16px;\n    gap: tokens.$ifxSpace100;\n\n    background: tokens.$ifxColorBaseWhite;\n\n    border: 1px solid #BFBBBB;\n    border-radius: 100px;\n\n    &:hover {\n      cursor: pointer;\n      border: 1px solid #575352;\n    }\n\n    &:active {\n      border: 1px solid #0A8276;\n    }\n\n    &.open {\n      border: 1px solid #0A8276;\n    }\n\n    & .wrapper-label {\n      font-style: normal;\n      font-weight: 400;\n      font-size: tokens.$ifxFontSizeS;\n      line-height: tokens.$ifxLineHeightS;\n\n      display: flex;\n      align-items: center;\n\n      color: tokens.$ifxColorBaseBlack;\n\n      flex: none;\n      order: 0;\n      flex-grow: 0;\n    }\n\n    & .wrapper-close-button {\n      & ifx-icon {\n        transition: .3s;\n      }\n\n      &.show {\n        & ifx-icon {\n          transition: .3s;\n          transform: rotate(180deg);\n        }\n      }\n\n      & ifx-icon {\n        width: 12px;\n        height: 12px;\n\n        flex: none;\n        order: 1;\n        flex-grow: 0;\n      }\n    }\n  }\n\n  // & .dropdown-menu { \n  //   display: none;\n  // }\n  // &.show  { \n  //   & .dropdown-menu { \n  //     display: block;\n  //   }\n  // }\n}"],"names":["Chip","addActiveMenuItem","e","target","_this","getClickedElement","composedPath","selectedAnchor","shadowRoot","querySelector","isCheckable","checkable","uncheckCheckboxes","toggleCheckbox","removeActiveMenuItem","handleClassList","toggleDropdownMenu","checked","returnToDefaultLabel","event","includes","this","el","closeDropdownMenu","key","value","dropdownMenuComponent","querySelectorAll","type","className","classList","textField","getTextField","textFieldElement","chipWrapper","closest","dropdownMenu","getDropdownMenu","dropdownWrapper","getDropdownWrapper","dropdownMenuItems","getDropdownItems","i","length","innerHTML","placeholder","SVGElement","labelWrapper","setAttribute","_a","index","_this2","document","addEventListener","handleOutsideClick","bind","addItemValueToTextField","detail","textInput","addEventListeners","h","class","icon","name","get"],"sourceRoot":""}