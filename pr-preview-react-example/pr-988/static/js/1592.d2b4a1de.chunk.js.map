{"version":3,"file":"static/js/1592.d2b4a1de.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/filter-bar/filter-bar.scss?tag=ifx-filter-bar&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/filter-bar/filter-bar.tsx"],"sourcesContent":["/* filter-bar.scss */\n@use \"~@infineon/design-system-tokens/dist/tokens\";\n\n:host {\n  display: block;\n  width: 100%;\n}\n\n.search-container {\n  display: flex;\n  width: calc(100% - 48px); /* Adjust width to account for padding */\n  padding-left: 24px;\n  padding-right: 24px;  flex-direction: row;\n  align-items: flex-start;\n  margin-bottom: tokens.$ifxSpace200;\n}\n\n.components-container {\n  display: flex;\n  width: calc(100% - 48px); /* Adjust width to account for padding */\n  padding-left: 24px;\n  padding-right: 24px;  flex-direction: row;\n  align-items: flex-end;\n  align-content:flex-end;\n  flex-wrap: wrap;\n  gap: tokens.$ifxSpace200;\n}\n\n.filter-slot-wrapper {\n    flex-grow: 1;\n    flex-basis: 100%; \n    max-width: 100%; \n  }\n\n@media (max-width: 1024px) { /* Adjust based on your breakpoints for mid/small screens */\n    .more-filters-wrapper {\n        order: 3; /* Keeps the button at the end/new row */\n        width: 100%; /* Takes full width to allow centering */\n        display: flex; /* Enables flexbox properties */\n        justify-content: center; /* Centers the button horizontally */\n        padding-top: tokens.$ifxSpace200; /* Adds space above the button, adjust as needed */\n      }\n  }\n\n\n  @media (min-width: 720px) and (max-width: 1024px) {\n    .filter-slot-wrapper {\n        flex-basis: calc((100% - tokens.$ifxSpace200) / 2);\n        max-width: calc((100% - tokens.$ifxSpace200) / 2);\n      }\n    \n\n}\n\n  @media (min-width: 1025px) {\n    .filter-slot-wrapper {\n        flex-basis: auto; \n        max-width: 200px; \n      }\n\n    ::slotted([slot=\"filter-search\"]) {\n        max-width: 828px;\n      }\n  }\n  \n  ::slotted([slot=\"filter-search\"]) {\n    flex-grow: 1;\n    flex-basis: 100%;\n    width: 100%; \n  }","// FilterBar.tsx\nimport { Component, h, Host, Element, Event, EventEmitter, State, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-filter-bar',\n  styleUrl: 'filter-bar.scss',\n  shadow: true\n})\nexport class FilterBar {\n  @Element() el: HTMLElement;\n  @State() selectedOptions: Array<{ filterName: string, filterValues: [string], type: string }> = [];\n  @Event() ifxTopbarFilterChange: EventEmitter;\n  @State() showAllFilters: boolean = false;\n  @Prop() maxShownFilters: number = 4; // Default to 4, can be overridden by parent component\n  @State() visibleSlots: number;\n@Prop() showMoreFiltersButton: boolean = true;\n\n  /* If the component is ever removed and then reattached to the DOM, \nconnectedCallback ensures that the event listeners are properly set up again */\n  connectedCallback() {\n    this.el.addEventListener('ifxFilterSelect', this.handleTopbarFilterChange);\n    this.el.addEventListener('ifxFilterSearchChange', this.handleSearchChange);\n    window.addEventListener('ifxResetFiltersEvent', this.handleResetEvent);\n  }\n\n  componentWillUnload() {\n    this.el.removeEventListener('ifxFilterSelect', this.handleTopbarFilterChange);\n    this.el.removeEventListener('ifxFilterSearchChange', this.handleSearchChange);\n    window.removeEventListener('ifxResetFiltersEvent', this.handleResetEvent);\n  }\n\n  \n  componentDidLoad() {\n    this.updateVisibleSlots();\n  }\n\n// Modify updateVisibleSlots to use showAllFilters to determine the number of slots\nupdateVisibleSlots() {\n   this.visibleSlots = this.showAllFilters ? Number.MAX_SAFE_INTEGER : this.maxShownFilters;\n }\n\n  handleMoreFiltersClick = () => {\n    this.showAllFilters = true;\n    this.updateVisibleSlots(); // Recalculate visible slots based on the new state\n  }\n\n  handleResetEvent = () => {\n    const filterSearchSlot = this.el.shadowRoot?.querySelector('slot[name=\"filter-search\"]');\n    if (filterSearchSlot instanceof HTMLSlotElement) { // Ensure it's treated as HTMLSlotElement\n      const filterSearchSlottedElements = filterSearchSlot.assignedElements({ flatten: true });\n  \n    filterSearchSlottedElements.forEach((filterSearchWrapper: HTMLElement) => {\n      const filterSearch = filterSearchWrapper.querySelector('ifx-filter-search');\n\n      const searchField = filterSearch.shadowRoot.querySelectorAll('ifx-search-field')\n\n      if (searchField.length > 0) {\n        searchField.forEach((searchFieldElement: any) => {\n          searchFieldElement.value = '';\n        });\n      }\n    });\n  }\n\n    this.selectedOptions = [];\n\n    // Emit the change to inform any parent components that the filters have been reset\n    this.ifxTopbarFilterChange.emit(this.selectedOptions);\n  }\n\n\n  handleSearchChange = (event: CustomEvent) => {\n    this.handleTopbarFilterChange(event);\n  }\n\n  handleFilterSelect = (event: CustomEvent) => {\n    this.handleTopbarFilterChange(event);\n  }\n\n  handleTopbarFilterChange = (event: CustomEvent) => {\n    const newSelectedOptions = [...this.selectedOptions];\n\n    if (event.type === 'ifxFilterSearchChange') {\n      const { filterName, filterValue } = event.detail;\n      const existingOptionIndex = newSelectedOptions.findIndex(option => option.filterName === filterName);\n\n      if (existingOptionIndex !== -1) {\n        // If an existing filter is found, update its value\n        newSelectedOptions[existingOptionIndex].filterValues = [filterValue];\n      } else {\n        newSelectedOptions.push({ filterName: filterName, filterValues: [filterValue], type: 'text' });\n      }\n    } else if (event.type === 'ifxFilterSelect') {\n      const { filterName, filterValues, type } = event.detail;\n      const existingOptionIndex = newSelectedOptions.findIndex(option => option.filterName === filterName);\n\n      if (existingOptionIndex !== -1) {\n        newSelectedOptions[existingOptionIndex].filterValues = filterValues;\n        newSelectedOptions[existingOptionIndex].type = type; // Update type based on the number of selected items\n      } else {\n        newSelectedOptions.push({ filterName: filterName, filterValues: filterValues, type: type });\n      }\n    }\n\n    this.selectedOptions = newSelectedOptions;\n    this.ifxTopbarFilterChange.emit(this.selectedOptions);\n  }\n\n  render() {\n    const safeVisibleSlots = Math.max(0, this.visibleSlots);\n\n    const actualNumberOfComponents = this.el.querySelectorAll('ifx-set-filter').length; \n     // Calculate slotsToShow safely\n    const slotsToShow = Math.min(safeVisibleSlots, actualNumberOfComponents, Number.MAX_SAFE_INTEGER);\n\n    const slots = Array.from({ length: slotsToShow }, (_, i) => (\n      <div class=\"filter-slot-wrapper\">\n        <slot name={`filter-component-${i + 1}`}></slot>\n      </div>\n    ));\n\n    return (\n      <Host>\n        <div class=\"search-container\">\n          <slot name=\"filter-search\"></slot> {/* Directly place the search slot here */}\n        </div>\n        <div class=\"components-container\">\n          {slots.length > 0 ? slots : <slot name=\"filter-component\"></slot>}\n          {this.showMoreFiltersButton && !this.showAllFilters && (\n            <div class=\"more-filters-wrapper\" onClick={this.handleMoreFiltersClick}>\n              <ifx-button type=\"button\" disabled={false} variant=\"tertiary\" size=\"m\" target=\"_blank\" theme=\"default\" full-width=\"false\">\n                <ifx-icon icon=\"filter-16\"></ifx-icon>More filters\n              </ifx-button>\n            </div>\n          )}\n        </div>\n      </Host>\n    );\n  }\n}"],"names":["FilterBar","handleMoreFiltersClick","this","showAllFilters","updateVisibleSlots","handleResetEvent","filterSearchSlot","_a","el","shadowRoot","querySelector","HTMLSlotElement","assignedElements","flatten","forEach","filterSearchWrapper","searchField","querySelectorAll","length","searchFieldElement","value","selectedOptions","ifxTopbarFilterChange","emit","handleSearchChange","event","handleTopbarFilterChange","handleFilterSelect","newSelectedOptions","type","filterName","filterValue","detail","existingOptionIndex","findIndex","option","filterValues","push","connectedCallback","addEventListener","window","componentWillUnload","removeEventListener","componentDidLoad","visibleSlots","Number","MAX_SAFE_INTEGER","maxShownFilters","render","safeVisibleSlots","Math","max","actualNumberOfComponents","slotsToShow","min","slots","Array","from","_","i","h","key","class","name","concat","Host","showMoreFiltersButton","onClick","disabled","variant","size","target","theme","icon"],"sourceRoot":""}