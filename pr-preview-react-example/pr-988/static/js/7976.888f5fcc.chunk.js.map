{"version":3,"file":"static/js/7976.888f5fcc.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/interfaces.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/buttonCellRenderer.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/customNoRowsOverlay.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/customLoadingOverlay.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/table.scss?tag=ifx-table&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/table.tsx"],"sourcesContent":["export interface ButtonInterface {\n  disabled?: boolean;\n  variant?: string,\n  size?: string,\n  target?: string,\n  color?: string,\n  text: string\n}\n\nexport const ButtonKeys: Array<keyof ButtonInterface> = ['disabled', 'variant', 'size', 'target', 'color', 'text'];\n\n\n","import { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport { ButtonInterface, ButtonKeys } from './interfaces';\n\nexport class ButtonCellRenderer implements ICellRendererComp {\n  eGui!: HTMLDivElement;\n  eValue: any;\n  cellValue: any;\n  eventListener!: () => void;\n\n  // gets called once before the renderer is used\n  init(params: ICellRendererParams) {\n\n    const config = params.data.button;\n    this.eGui = document.createElement('div');\n\n    if (this.hasRequiredKeys(config)) {\n      // create the cell\n      this.eGui.innerHTML = `\n        <span>\n          <ifx-button\n          disabled=${config.disabled}\n          variant=${config.variant}\n          size=${config.size}\n          target=${config.target}\n          color=${config.color}>\n          ${config.text}\n        </ifx-button>\n        </span>\n       `;\n\n    }\n    else {\n      this.eGui.innerHTML = `\n      <span>\n        ${config}\n      </span>\n     `;\n    }\n  }\n\n\n  getGui() {\n    return this.eGui;\n  }\n\n  // gets called whenever the cell refreshes\n  refresh(params: ICellRendererParams) {\n    // set value into cell again\n    const config = params.data.button;\n    this.eGui = document.createElement('div');\n    if (this.hasRequiredKeys(config)) {\n      // create the cell\n      this.eGui.innerHTML = `\n        <span>\n          <ifx-button\n          disabled=${config.disabled}\n          variant=${config.variant}\n          size=${config.size}\n          target=${config.target}\n          color=${config.color}>\n          ${config.text}\n        </ifx-button>\n        </span>\n       `;\n\n    }\n\n    else {\n      this.eGui.innerHTML = `\n      <span>\n        ${config}\n      </span>\n     `;\n    }\n    // return true to tell the grid we refreshed successfully\n    return true;\n  }\n\n\n  getFieldValueToDisplay(params: ICellRendererParams) {\n    return params.valueFormatted ? params.valueFormatted : params.value;\n  }\n\n  isObject(value: any): value is Object {\n    return value && typeof value === 'object' && value.constructor === Object;\n  }\n\n  hasRequiredKeys(obj: any): obj is ButtonInterface {\n    if (!this.isObject(obj)) return false;\n    return ButtonKeys.every(key => key in obj);\n  }\n\n\n}","import { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport class CustomNoRowsOverlay implements ICellRendererComp {\n  eGui!: HTMLElement;\n\n  init(params: ICellRendererParams & { noRowsMessageFunc: () => string }) {\n    this.eGui = document.createElement('div');\n    this.eGui.innerHTML = `\n            <div role=\"presentation\" class=\"ag-overlay-loading-center\" >\n               ${params.noRowsMessageFunc()}\n            </div>\n        `;\n  }\n\n  getGui() {\n    return this.eGui;\n  }\n\n  refresh(_params: ICellRendererParams): boolean {\n    return false;\n  }\n}","import { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport class CustomLoadingOverlay implements ICellRendererComp {\n  eGui!: HTMLElement;\n\n  init(_params: ICellRendererParams & { loadingMessage: string }) {\n    this.eGui = document.createElement('div');\n    this.eGui.innerHTML = `<div class=\"ag-overlay-loading-center\" role=\"presentation\">\n<ifx-spinner></ifx-spinner>\n            </div>`;\n  }\n\n  getGui() {\n    return this.eGui;\n  }\n\n  refresh(_params: ICellRendererParams): boolean {\n    return false;\n  }\n}","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n@import \"~ag-grid-community/styles/ag-grid.css\";\n\n\n.table-container {\n  display: block;\n}\n\n.sidebar-btn {\n  margin-bottom: 24px;\n}\n\n.sidebar-container {\n  margin-right: 24px;\n}\n\n.sidebar-layout {\n  display: flex;\n  flex-direction: row;\n}\n\n.topbar-layout {\n  display: flex;\n  flex-direction: column;\n}\n\n.table-pagination-wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch; // stretches items to fill the container horizontally\n  width: 100%; // ensures the wrapper takes up the full width of its parent\n}\n\n#table-wrapper {\n  flex: 1; // allows the table to take up the remaining space\n}\n\n\n.table-wrapper .ag-root-wrapper-body {\n  height: auto !important;\n  min-height: 100px !important;\n  min-width: 100px;\n}\n\n.filter-chips {\n  margin-bottom: 12px;\n}\n\n.set-filter-wrapper-sidebar {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: tokens.$ifxSpace100;\n}\n\n.set-filter-wrapper-topbar {\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: tokens.$ifxSpace100;\n  background: tokens.$ifxColorEngineering100;\n  padding-top: 32px;\n  padding-bottom: 32px;\n  gap: 24px;\n}\n\n\n\n.ifx-ag-grid {\n  display: grid;\n  height: 100%;\n  width: 100%;\n  min-width: 100px;\n  padding-bottom: tokens.$ifxSpace100;\n}\n\n\n.ifx-ag-grid .ag-header-cell::after {\n  outline: none !important;\n  border: none !important;\n  box-shadow: none !important;\n}\n\n.ifx-ag-grid .ag-header-cell:focus {\n  outline: none !important;\n}\n\n.ifx-ag-grid *:not(.ag-header-cell):focus {\n  outline: none;\n}\n\n\n\n.ag-overlay-loading-center {\n  border: none;\n  background: none;\n  border-radius: none;\n  box-shadow: none;\n}\n\n\n.ag-root-wrapper {\n  border: none;\n}\n\n\n\n.ag-header {\n  background-color: tokens.$ifxColorEngineering100;\n  border-bottom: none;\n\n  &.ag-header-active {\n    outline: none !important;\n    border-color: #0A8276 !important;\n  }\n}\n\n.ag-header-cell {\n  padding-left: 16px;\n  padding-right: 16px;\n  gap: 4px;\n}\n\n\n.ag-header-cell-focus {\n  border: none !important;\n  outline: none !important;\n}\n\n.ag-header-cell-text {\n  font-size: 13px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 20px;\n  color: tokens.$ifxColorBaseBlack;\n  font-family: var(--ifx-font-family);\n\n}\n\n.ag-row-focus {\n  background-color: inherit !important;\n  /* Reset the hover color to the row's original color */\n}\n\n.ag-row-hover {\n  background-color: tokens.$ifxColorBaseWhite !important; //inherit !important;\n  /* Reset the hover color to the row's original color */\n}\n\n\n.ag-cell-focus {\n  border: none !important;\n  outline: none !important;\n  background-color: inherit !important;\n}\n\n\n\n.ag-row {\n  background-color: tokens.$ifxColorBaseWhite;\n  border-bottom: 1px solid tokens.$ifxColorEngineering200;\n  font-size: 13px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 20px;\n  z-index: 1; //ensure the stacking order when used inside js frameworks\n}\n\n.ag-row-odd {\n  background-color: tokens.$ifxColorBaseWhite;\n}\n\n.ag-cell {\n  display: flex;\n  padding-left: 16px;\n  padding-right: 16px;\n  align-items: center;\n\n}\n\n.ag-ltr .ag-sort-indicator-icon {\n  padding-left: 0px;\n  vertical-align: bottom;\n  line-height: 12px;\n}\n\n.unsort-icon-custom-color {\n  color: tokens.$ifxColorEngineering400;\n}\n\n\n// Table with set filters in sidebar orientation\n\n\n.filters-title {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n\n.matching-results-container {\n  display: flex;\n  gap: 4px;\n  font-size: 14px;\n}\n\n.matching-results-count {\n  font-weight: 600;\n}\n\n.matching-results-text {\n  font-weight: 400;\n}","import { Component, h, Host, Method, Element, Prop, State } from '@stencil/core';\nimport classNames from 'classnames';\n\nimport { createGrid, FirstDataRenderedEvent, GridApi, GridOptions } from 'ag-grid-community';\nimport { ButtonCellRenderer } from './buttonCellRenderer';\nimport { CustomNoRowsOverlay } from './customNoRowsOverlay';\nimport { CustomLoadingOverlay } from './customLoadingOverlay';\n\n\n@Component({\n  tag: 'ifx-table',\n  styleUrl: 'table.scss',\n  shadow: true\n})\nexport class Table {\n  gridOptions: GridOptions;\n  gridApi: GridApi;\n  @State() currentPage: number = 1;\n  @Prop() cols: any[] | string;\n  @Prop() rows: any[] | string;\n  @State() rowData: any[] = [];\n  @State() colData: any[] = [];\n  @State() filterOptions: { [key: string]: string[] } = {};\n  @State() currentFilters = {};\n\n  allRowData: any[] = [];\n  @Prop() rowHeight: string = 'default';\n  @Prop() tableHeight: string = 'auto';\n  @Prop() pagination: boolean = true;\n  @Prop() paginationPageSize: number = 10;\n  @Prop() filterOrientation: string = 'topbar'; // sidebar\n  @State() showSidebarFilters: boolean = true;\n  @State() matchingResultsCount: number = 0;\n\n  @Prop() enableFiltering: boolean = true;\n  @Prop() showLoading: boolean = false;\n  private container: HTMLDivElement;\n  @Element() host: HTMLElement;\n  originalRowData: any[] = [];\n\n\n  toggleSidebarFilters() {\n    this.showSidebarFilters = !this.showSidebarFilters;\n  }\n\n\n  updateFilterOptions() {\n    const options = {};\n    for (let col of this.colData) {\n      options[col.field] = [...new Set(this.rowData.map(row => row[col.field]))];\n    }\n    this.filterOptions = options;\n  }\n\n\n  handleFilterChange(event: CustomEvent) {\n    const { filterName, filterValues, type } = event.detail;\n    const selectedValues = filterValues.map(option => option?.value || option);\n    if (selectedValues.length === 0 || (selectedValues.length === 1 && type === 'text' && selectedValues[0] === '')) {\n      delete this.currentFilters[filterName];\n    } else {\n      this.currentFilters = {\n        ...this.currentFilters, [filterName]: { filterValues: selectedValues, type: type }\n      }\n    }\n\n    this.allRowData = [...this.originalRowData];\n\n    this.filterData();\n\n    const startIndex = (this.currentPage - 1) * this.paginationPageSize;\n    const endIndex = startIndex + this.paginationPageSize;\n    const visibleRowData = this.allRowData.slice(startIndex, endIndex);\n\n    this.rowData = visibleRowData;\n\n    this.gridApi.setGridOption('rowData', this.rowData);\n\n    // Update matching results count\n    this.matchingResultsCount = this.allRowData.length;\n\n  }\n\n\n  clearAllFilters() {\n    this.currentFilters = {};\n    this.allRowData = [...this.originalRowData];\n    // If necessary, reset the grid/view to its initial state here\n  }\n\n\n\n  filterData() {\n    let filteredData = [...this.allRowData];\n\n    for (let filterName in this.currentFilters) {\n      let selectedValues = this.currentFilters[filterName].filterValues;\n      let filterType = this.currentFilters[filterName].type;\n\n      filteredData = this.filterByType(filteredData, filterName, selectedValues, filterType);\n    }\n\n    this.allRowData = filteredData;\n  }\n\n  filterByType(data, filterName, selectedValues, filterType) {\n    return data.filter(row => {\n      // Fetch the value from the row and convert it to a string for comparison\n      let rowValue = String(row[filterName]).toLowerCase();\n\n      switch (filterType) {\n        case 'multi-select':\n        case 'single-select':\n          // Check if the selectedValues (should be an array) includes the rowValue\n          return selectedValues.some(value => String(value).toLowerCase() === rowValue);\n\n        case 'text':\n          // Check if any of the selectedValues start with the rowValue\n          return selectedValues.some(value => rowValue.startsWith(String(value).toLowerCase()));\n\n        default:\n          // Fallback case\n          return selectedValues.includes(rowValue);\n      }\n    });\n  }\n\n\n\n\n  @Method()\n  async onBtShowLoading() {\n    this.gridApi.showLoadingOverlay();\n  }\n\n  componentWillLoad() {\n    this.rowData = this.getRowData();\n    this.colData = this.getColData();\n    this.updateFilterOptions();\n\n    this.gridOptions = {\n\n      rowHeight: this.rowHeight === 'default' ? 40 : 32,\n      headerHeight: 40,\n      defaultColDef: {\n        resizable: true,\n      },\n      suppressDragLeaveHidesColumns: true,\n      onFirstDataRendered: this.onFirstDataRendered.bind(this),\n      columnDefs: this.colData,\n      rowData: this.rowData,\n      loadingOverlayComponent: CustomLoadingOverlay,\n      noRowsOverlayComponent: CustomNoRowsOverlay,\n      noRowsOverlayComponentParams: {\n        noRowsMessageFunc: () =>\n          'No rows found' //at: ' + new Date().toLocaleTimeString(),\n      },\n      icons: {\n        sortAscending: '<ifx-icon icon=\"arrowtriangleup16\"></ifx-icon>',\n        sortDescending: '<ifx-icon icon=\"arrowtriangledown16\"></ifx-icon>',\n        sortUnSort: '<a class=\"unsort-icon-custom-color\"><ifx-icon icon=\"arrowtrianglevertikal16\"></ifx-icon></a>'\n      },\n      rowDragManaged: this.colData.some(col => col.dndSource === true) ? true : false,\n      animateRows: this.colData.some(col => col.dndSource === true) ? true : false,\n    };\n\n  }\n\n  componentDidRender() {\n    if (this.gridApi) {\n      this.gridApi.setGridOption('columnDefs', this.colData);\n    }\n  }\n\n\n\n  componentDidLoad() {\n    if (this.container) {\n      this.gridApi = createGrid(this.container, this.gridOptions);\n      if (this.gridApi) {\n        this.gridApi.sizeColumnsToFit({\n          defaultMinWidth: 100,\n        });\n        this.gridApi.setGridOption('columnDefs', this.colData);\n        this.gridApi.setGridOption('rowData', this.rowData);\n\n        if (this.pagination) {\n          const paginationElement = this.host.shadowRoot.querySelector('ifx-pagination');\n          if (paginationElement) {\n            paginationElement.addEventListener('ifxPageChange', this.handlePageChange.bind(this));\n          }\n        }\n        const setFilterElements = this.host.querySelectorAll('ifx-set-filter');\n        // Add an event listener to each SetFilter component\n        setFilterElements.forEach(setFilterElement => {\n          setFilterElement.addEventListener('ifxFilterChange', this.handleFilterChange.bind(this));\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.pagination) {\n      const paginationElement = this.host.shadowRoot.querySelector('ifx-pagination');\n      if (paginationElement) {\n        paginationElement.removeEventListener('ifxPageChange', this.handlePageChange.bind(this));\n      }\n    }\n    const setFilterElements = this.host.shadowRoot.querySelectorAll('ifx-set-filter');\n    // Remove the event listener from each SetFilter component\n    setFilterElements.forEach(setFilterElement => {\n      setFilterElement.removeEventListener('ifxFilterChange', this.handleFilterChange.bind(this));\n    });\n  }\n\n  handlePageChange(event) {\n    this.currentPage = event.detail.currentPage;\n    const startIndex = (this.currentPage - 1) * this.paginationPageSize;\n    const endIndex = startIndex + this.paginationPageSize;\n    const visibleRowData = this.allRowData.slice(startIndex, endIndex);\n    // Update the data in the grid\n    if (this.gridApi) {\n      this.gridApi.setGridOption('rowData', visibleRowData);\n    }\n  }\n\n\n  getRowData() {\n    let rows: any[] = [];\n\n    // If this.rows is undefined or null, log a warning and return an empty array\n    if (this.rows === undefined || this.rows === null) {\n      console.warn('rows is undefined or null');\n      return rows;\n    }\n\n    if (typeof this.rows === 'string') {\n      try {\n        rows = JSON.parse(this.rows);\n      } catch (err) {\n        console.error('Failed to parse rows input:', this.rows, err);\n      }\n    } else if (Array.isArray(this.rows) || typeof this.rows === 'object') {\n      rows = this.rows;\n    } else {\n      console.error('Unexpected value for rows: ', this.rows);\n    }\n\n    this.allRowData = rows;\n    this.originalRowData = [...rows]; // Deep copy the original data\n    this.matchingResultsCount = this.allRowData.length;\n\n    return rows.slice(0, this.paginationPageSize);\n  }\n\n\n  getColData() {\n    let cols: any[] = [];\n\n    // If this.cols is undefined or null, log a warning and return an empty array\n    if (this.cols === undefined || this.cols === null) {\n      console.warn('cols is undefined or null');\n      return cols;\n    }\n\n    if (typeof this.cols === 'string') {\n      try {\n        cols = JSON.parse(this.cols);\n      } catch (err) {\n        console.error('Failed to parse cols input:', this.cols, err);\n      }\n    } else if (Array.isArray(this.cols) || typeof this.cols === 'object') {\n      cols = this.cols;\n    } else {\n      console.error('Unexpected value for cols: ', this.cols);\n    }\n\n    let buttonColumn = cols.find(column => column.field === 'button');\n    if (buttonColumn) {\n      buttonColumn.cellRenderer = ButtonCellRenderer;\n    }\n\n    return cols;\n  }\n\n\n\n  onFirstDataRendered(params: FirstDataRenderedEvent) {\n    params.api.sizeColumnsToFit();\n  }\n\n\n\n  disconnectedCallback() {\n    if (this.pagination) {\n      const paginationElement = this.host.shadowRoot.querySelector('ifx-pagination');\n      if (paginationElement) {\n        paginationElement.removeEventListener('ifxPageChange', this.handlePageChange);\n      }\n    }\n  }\n\n\n\n  getTableClassNames() {\n    return classNames(\n      this.tableHeight === 'auto' && 'table-wrapper ag-root-wrapper-body',\n      'table-wrapper',\n    );\n  }\n\n\n  render() {\n    // if (this.gridOptions.rowDragManaged) {\n    //   // console.log(\"draggable table render\")\n    // }\n    let style = {};\n    if (this.tableHeight !== 'auto') {\n      style = {\n        'height': this.tableHeight\n      };\n    }\n    const filterClass = this.filterOrientation === 'topbar' ? 'topbar-layout' : 'sidebar-layout';\n    return (\n      <Host >\n        <div class=\"table-container\">\n          {this.enableFiltering && this.filterOrientation !== 'topbar' && (\n            <div class=\"sidebar-btn\">\n              <ifx-button\n                type=\"button\"\n                disabled={false}\n                variant=\"secondary\"\n                size=\"m\"\n                target=\"_blank\"\n                theme=\"default\"\n                full-width=\"false\"\n                onClick={() => this.toggleSidebarFilters()}\n              >\n                <ifx-icon icon=\"cross-12\"></ifx-icon>{this.showSidebarFilters ? 'Hide Filters' : 'Show Filters'}\n              </ifx-button>\n            </div>\n          )}\n\n          <div class={filterClass}>\n            {this.enableFiltering && this.showSidebarFilters && this.filterOrientation !== 'topbar' && (\n              <div class=\"sidebar-container\">\n\n                <div class=\"filters-title-container\">\n                  <span class=\"filters-title\">Filters</span>\n                </div>\n                <div class=\"set-filter-wrapper-sidebar\">\n                  {(this.filterOrientation !== 'sidebar' || this.showSidebarFilters) && (\n                    <slot name=\"set-filter\"></slot>\n                  )}\n                </div>\n              </div>\n            )}\n\n\n\n            {this.enableFiltering && this.filterOrientation !== 'sidebar' && (\n              <div class=\"set-filter-wrapper-topbar\">\n                {(this.filterOrientation !== 'sidebar' || this.showSidebarFilters) && (\n                  <slot name=\"set-filter\"></slot>\n                )}\n              </div>\n            )}\n\n            <div class=\"table-pagination-wrapper\">\n              <div class=\"filter-chips\">\n                {this.enableFiltering && this.filterOrientation !== 'topbar' && this.showSidebarFilters && (\n                  Object.keys(this.currentFilters).map(filterName => (\n                    <ifx-chip placeholder={filterName}>\n                      <ifx-dropdown-menu size=\"m\" slot=\"menu\">\n                        {this.currentFilters[filterName].filterValues.map(filterValue => (\n                          <ifx-dropdown-item icon=\"\" target=\"_self\" href=\"\">\n                            {filterValue}\n                          </ifx-dropdown-item>\n                        ))}\n                      </ifx-dropdown-menu>\n                    </ifx-chip>\n                  ))\n                )}\n              </div>\n\n              {((this.enableFiltering && this.filterOrientation === 'sidebar') || this.filterOrientation === 'topbar') && (\n                <div class=\"matching-results-container\">\n                  <span class=\"matching-results-count\">\n                    {this.matchingResultsCount}\n                  </span>\n                  <span class=\"matching-results-text\">\n                    matching results\n                  </span>\n                </div>\n              )}\n\n              <div id=\"table-wrapper\" class={this.getTableClassNames()}>\n                <div class='ifx-ag-grid' style={style} ref={(el) => this.container = el}>\n                </div>\n              </div>\n              {this.pagination ? <ifx-pagination total={this.allRowData.length} current-page={this.currentPage}></ifx-pagination> : null}\n            </div>\n          </div>\n        </div>\n      </Host>\n\n    )\n  }\n\n\n  hasButtonCol(): boolean {\n    return this.getColData().some(column => column.field === 'button');\n  }\n\n\n  // setIconButtonRenderer() {\n  //   const iconButtonColumn = this.getColData().find(column => column.field === 'iconButton');\n  //   if (iconButtonColumn) {\n  //     iconButtonColumn.cellRenderer = IconButtonCellRenderer;\n  //   }\n  // }\n\n  // setLinkRenderer() {\n  //   const linkColumn = this.getColData().find(column => column.field === 'link');\n  //   if (linkColumn) {\n  //     linkColumn.cellRenderer = LinkCellRenderer;\n  //   }\n  // }\n\n\n\n  onDragOver(event) {\n    var dragSupported = event.dataTransfer.length;\n\n    if (dragSupported) {\n      event.dataTransfer.dropEffect = 'move';\n    }\n\n    event.preventDefault();\n  }\n\n  onDrop(event) {\n    var jsonData = event.dataTransfer.getData('application/json');\n\n    var eJsonRow = document.createElement('div');\n    eJsonRow.classList.add('json-row');\n    eJsonRow.innerText = jsonData;\n\n    var eJsonDisplay = document.querySelector('#eJsonDisplay');\n\n    eJsonDisplay.appendChild(eJsonRow);\n    event.preventDefault();\n  }\n\n}\n"],"names":["ButtonKeys","ButtonCellRenderer","init","params","config","data","button","this","eGui","document","createElement","hasRequiredKeys","innerHTML","concat","disabled","variant","size","target","color","text","getGui","refresh","getFieldValueToDisplay","valueFormatted","value","isObject","constructor","Object","obj","every","key","CustomNoRowsOverlay","noRowsMessageFunc","_params","CustomLoadingOverlay","Table","allRowData","originalRowData","toggleSidebarFilters","showSidebarFilters","updateFilterOptions","options","col","colData","field","Set","rowData","map","row","filterOptions","handleFilterChange","event","filterName","filterValues","type","detail","selectedValues","option","length","currentFilters","assign","filterData","startIndex","currentPage","paginationPageSize","endIndex","visibleRowData","slice","gridApi","setGridOption","matchingResultsCount","clearAllFilters","filteredData","filterType","filterByType","filter","rowValue","String","toLowerCase","some","startsWith","includes","onBtShowLoading","showLoadingOverlay","componentWillLoad","getRowData","getColData","gridOptions","rowHeight","headerHeight","defaultColDef","resizable","suppressDragLeaveHidesColumns","onFirstDataRendered","bind","columnDefs","loadingOverlayComponent","noRowsOverlayComponent","noRowsOverlayComponentParams","icons","sortAscending","sortDescending","sortUnSort","rowDragManaged","dndSource","animateRows","componentDidRender","componentDidLoad","container","createGrid","sizeColumnsToFit","defaultMinWidth","pagination","paginationElement","host","shadowRoot","querySelector","addEventListener","handlePageChange","querySelectorAll","forEach","setFilterElement","componentWillUnmount","removeEventListener","rows","undefined","console","warn","JSON","parse","err","error","Array","isArray","cols","buttonColumn","find","column","cellRenderer","api","disconnectedCallback","getTableClassNames","classNames","tableHeight","render","style","filterClass","filterOrientation","h","Host","class","enableFiltering","theme","onClick","icon","name","keys","placeholder","slot","filterValue","href","id","ref","el","total","hasButtonCol","onDragOver","dataTransfer","dropEffect","preventDefault","onDrop","jsonData","getData","eJsonRow","classList","add","innerText","appendChild"],"sourceRoot":""}