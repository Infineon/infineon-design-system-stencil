{"version":3,"file":"static/js/8718.3fd65368.chunk.js","mappings":"iKAAA,MCOaA,EAAI,M,kFAuCf,KAAAC,WAAcC,IACZA,EAAMC,kBACNC,KAAKC,UAAYD,KAAKC,QAAQ,EAGhC,KAAAC,eAAkBJ,IAChBA,EAAMC,kBACNC,KAAKG,UAAYH,KAAKG,QAAQ,EAahC,KAAAC,oBAAuBN,IAErB,GAAIA,GAA+B,iBAAtBA,EAAMO,OAAOC,MAA2BR,EAAMO,OAAOE,MAAO,CAC7CC,MAAMC,KAAKT,KAAKU,GAAGC,iBAAiB,mBAC3DC,QAAOC,GAAwC,iBAA/BA,EAAMC,aAAa,SAA8BD,IAAUf,EAAMiB,SAClEC,SAAQC,GAAeA,EAAYC,aAAa,QAAS,U,CAG7E,MAAMC,EAAgBnB,KAAKoB,iBAAiBpB,KAAKU,IACjDV,KAAKqB,cAAgBF,EAAcG,OAEnCtB,KAAKuB,cAAcC,KAAK,CAAEC,KAAMzB,KAAKyB,KAAMN,iBAAgB,E,eApEhC,E,eACT,E,mBACa,E,gBACX,E,UACP,G,qBACW,C,CAM1BO,iBAAAA,GACE1B,KAAKU,GAAGiB,iBAAiB,qBAAsB3B,KAAKI,qBACpDJ,KAAKqB,cAAgBrB,KAAKoB,iBAAiBpB,KAAKU,IAAIY,OACpDtB,KAAK4B,WAAa5B,KAAK6B,gBAEvB7B,KAAK8B,SAAW,IAAIC,kBAAiB,KACnC,MAAMC,EAAgBhC,KAAK6B,gBACvBG,IAAkBhC,KAAK4B,aACzB5B,KAAK4B,WAAaI,EAClBhC,KAAKI,sB,IAITJ,KAAK8B,SAASG,QAAQjC,KAAKU,GAAI,CAAEwB,WAAW,G,CAG9CC,mBAAAA,GACEnC,KAAKU,GAAG0B,oBAAoB,qBAAsBpC,KAAKI,qBACvDJ,KAAK8B,SAASO,Y,CAGhBR,aAAAA,GACE,OAAO7B,KAAKU,GAAGC,iBAAiB,kBAAkBW,M,CAcpDF,gBAAAA,CAAiBV,GACf,OAAOF,MAAMC,KAAKC,EAAGC,iBAAiB,mBACnCC,QAAOC,GAAyC,SAAhCA,EAAMC,aAAa,WACnCwB,KAAIzB,IAAS,CACZ0B,MAAO1B,EAAMC,aAAa,SAC1BP,MAAOM,EAAMC,aAAa,Y,CAmBhC0B,MAAAA,GACE,MAAMC,EAAcjC,MAAMC,KAAKT,KAAKU,GAAGC,iBAAiB,mBAClD+B,EAAe1C,KAAKG,SAAWsC,EAAcA,EAAYE,MAAM,EAAG3C,KAAK4C,iBACvEC,EAAiBJ,EAAYnB,OAASoB,EAAapB,OAEzD,OACEwB,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,gBACRN,EAAaJ,KAAIzB,IAASiC,EAAAA,EAAAA,GAAA,QAAMrB,KAAMZ,EAAMC,aAAa,aAC1DgC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,eAAeC,QAASjD,KAAKE,iBACtC4C,EAAAA,EAAAA,GAAA,YAAUC,IAAK/C,KAAKG,SAAS+C,WAAYC,KAAMnD,KAAKG,SAAW,gBAAkB,qBACjF2C,EAAAA,EAAAA,GAAA,YAAAC,IAAA,2CAAUK,KAAK,IAAIC,KAAK,GAAGtC,OAAO,SAASuC,QAAQ,aAAaC,UAAU,GACvEvD,KAAKG,SAAW,YAAc,QAAHqD,OAAWX,EAAc,W,wCD3FjD,uE","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/list/list.scss?tag=ifx-list&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/list/list.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n\n.link-wrapper {\n  display: flex;\n  align-items: center;\n  gap: tokens.$ifxSpace100;\n  margin-top: tokens.$ifxSpace100;\n}","import { Component, h, Prop, State, Event, EventEmitter, Element } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-list',\n  styleUrl: 'list.scss',\n  shadow: true,\n})\nexport class List {\n  @Element() private el: HTMLElement;\n  @State() expanded: boolean = false;\n  @State() showMore = false;\n  @State() selectedCount: number = 0;\n  @State() totalItems = 0;\n  @Prop() name = \"\";\n  @Prop() maxVisibleItems = 6;\n\n  @Event() ifxListUpdate: EventEmitter;\n\n  observer: MutationObserver;\n\n  componentWillLoad() {\n    this.el.addEventListener('ifxListEntryChange', this.handleCheckedChange);\n    this.selectedCount = this.getSelectedItems(this.el).length;\n    this.totalItems = this.getTotalItems();\n\n    this.observer = new MutationObserver(() => {\n      const newTotalItems = this.getTotalItems();\n      if (newTotalItems !== this.totalItems) {\n        this.totalItems = newTotalItems;\n        this.handleCheckedChange();\n      }\n    });\n\n    this.observer.observe(this.el, { childList: true });\n  }\n\n  componentWillUnload() {\n    this.el.removeEventListener('ifxListEntryChange', this.handleCheckedChange);\n    this.observer.disconnect();\n  }\n\n  getTotalItems() {\n    return this.el.querySelectorAll('ifx-list-entry').length;\n  }\n\n\n  toggleList = (event: MouseEvent) => {\n    event.stopPropagation();\n    this.expanded = !this.expanded;\n  }\n\n  toggleShowMore = (event: MouseEvent) => {\n    event.stopPropagation();\n    this.showMore = !this.showMore;\n  }\n\n  getSelectedItems(el: HTMLElement) {\n    return Array.from(el.querySelectorAll('ifx-list-entry'))\n      .filter(entry => entry.getAttribute('value') === 'true')\n      .map(entry => ({\n        label: entry.getAttribute('label'),\n        value: entry.getAttribute('value')\n      }));\n  }\n\n\n  handleCheckedChange = (event?: CustomEvent) => {\n    // If the type of the changed entry is 'radio-button' and its value is true, deselect all other radio buttons\n    if (event && event.detail.type === 'radio-button' && event.detail.value) {\n      const otherRadioButtons = Array.from(this.el.querySelectorAll('ifx-list-entry'))\n        .filter(entry => entry.getAttribute('type') === 'radio-button' && entry !== event.target);\n      otherRadioButtons.forEach(radioButton => radioButton.setAttribute('value', 'false'));\n    }\n\n    const selectedItems = this.getSelectedItems(this.el);\n    this.selectedCount = selectedItems.length;\n\n    this.ifxListUpdate.emit({ name: this.name, selectedItems });\n  }\n\n  render() {\n    const listEntries = Array.from(this.el.querySelectorAll('ifx-list-entry'));\n    const visibleItems = this.showMore ? listEntries : listEntries.slice(0, this.maxVisibleItems);\n    const remainingItems = listEntries.length - visibleItems.length;\n\n    return (\n      <div class=\"list-wrapper\">\n        {visibleItems.map(entry => <slot name={entry.getAttribute('slot')}></slot>)}\n        <div class=\"link-wrapper\" onClick={this.toggleShowMore}>\n          <ifx-icon key={this.showMore.toString()} icon={this.showMore ? 'chevron-up-12' : 'chevron-down-12'} />\n          <ifx-link size=\"s\" href=\"\" target=\"_blank\" variant=\"underlined\" disabled={false} >\n            {this.showMore ? 'Show less' : `Show ${remainingItems} more`}\n          </ifx-link>\n        </div>\n      </div>\n    );\n  }\n}"],"names":["List","toggleList","event","stopPropagation","this","expanded","toggleShowMore","showMore","handleCheckedChange","detail","type","value","Array","from","el","querySelectorAll","filter","entry","getAttribute","target","forEach","radioButton","setAttribute","selectedItems","getSelectedItems","selectedCount","length","ifxListUpdate","emit","name","componentWillLoad","addEventListener","totalItems","getTotalItems","observer","MutationObserver","newTotalItems","observe","childList","componentWillUnload","removeEventListener","disconnect","map","label","render","listEntries","visibleItems","slice","maxVisibleItems","remainingItems","h","key","class","onClick","toString","icon","size","href","variant","disabled","concat"],"sourceRoot":""}