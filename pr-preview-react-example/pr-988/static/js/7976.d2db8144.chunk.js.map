{"version":3,"file":"static/js/7976.d2db8144.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/interfaces.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/buttonCellRenderer.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/customNoRowsOverlay.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/customLoadingOverlay.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/table.scss?tag=ifx-table&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/table.tsx"],"sourcesContent":["export interface ButtonInterface {\n  disabled?: boolean;\n  variant?: string,\n  size?: string,\n  target?: string,\n  color?: string,\n  text: string\n}\n\nexport const ButtonKeys: Array<keyof ButtonInterface> = ['disabled', 'variant', 'size', 'target', 'color', 'text'];\n\n\n","import { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport { ButtonInterface, ButtonKeys } from './interfaces';\n\nexport class ButtonCellRenderer implements ICellRendererComp {\n  eGui!: HTMLDivElement;\n  eValue: any;\n  cellValue: any;\n  eventListener!: () => void;\n\n  // gets called once before the renderer is used\n  init(params: ICellRendererParams) {\n\n    const config = params.data.button;\n    this.eGui = document.createElement('div');\n\n    if (this.hasRequiredKeys(config)) {\n      // create the cell\n      this.eGui.innerHTML = `\n        <span>\n          <ifx-button\n          disabled=${config.disabled}\n          variant=${config.variant}\n          size=${config.size}\n          target=${config.target}\n          color=${config.color}>\n          ${config.text}\n        </ifx-button>\n        </span>\n       `;\n\n    }\n    else {\n      this.eGui.innerHTML = `\n      <span>\n        ${config}\n      </span>\n     `;\n    }\n  }\n\n\n  getGui() {\n    return this.eGui;\n  }\n\n  // gets called whenever the cell refreshes\n  refresh(params: ICellRendererParams) {\n    // set value into cell again\n    const config = params.data.button;\n    this.eGui = document.createElement('div');\n    if (this.hasRequiredKeys(config)) {\n      // create the cell\n      this.eGui.innerHTML = `\n        <span>\n          <ifx-button\n          disabled=${config.disabled}\n          variant=${config.variant}\n          size=${config.size}\n          target=${config.target}\n          color=${config.color}>\n          ${config.text}\n        </ifx-button>\n        </span>\n       `;\n\n    }\n\n    else {\n      this.eGui.innerHTML = `\n      <span>\n        ${config}\n      </span>\n     `;\n    }\n    // return true to tell the grid we refreshed successfully\n    return true;\n  }\n\n\n  getFieldValueToDisplay(params: ICellRendererParams) {\n    return params.valueFormatted ? params.valueFormatted : params.value;\n  }\n\n  isObject(value: any): value is Object {\n    return value && typeof value === 'object' && value.constructor === Object;\n  }\n\n  hasRequiredKeys(obj: any): obj is ButtonInterface {\n    if (!this.isObject(obj)) return false;\n    return ButtonKeys.every(key => key in obj);\n  }\n\n\n}","import { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport class CustomNoRowsOverlay implements ICellRendererComp {\n  eGui!: HTMLElement;\n\n  init(params: ICellRendererParams & { noRowsMessageFunc: () => string }) {\n    this.eGui = document.createElement('div');\n    this.eGui.innerHTML = `\n            <div role=\"presentation\" class=\"ag-overlay-loading-center\" >\n               ${params.noRowsMessageFunc()}\n            </div>\n        `;\n  }\n\n  getGui() {\n    return this.eGui;\n  }\n\n  refresh(_params: ICellRendererParams): boolean {\n    return false;\n  }\n}","import { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport class CustomLoadingOverlay implements ICellRendererComp {\n  eGui!: HTMLElement;\n\n  init(_params: ICellRendererParams & { loadingMessage: string }) {\n    this.eGui = document.createElement('div');\n    this.eGui.innerHTML = `<div class=\"ag-overlay-loading-center\" role=\"presentation\">\n<ifx-spinner></ifx-spinner>\n            </div>`;\n  }\n\n  getGui() {\n    return this.eGui;\n  }\n\n  refresh(_params: ICellRendererParams): boolean {\n    return false;\n  }\n}","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n@import \"~ag-grid-community/styles/ag-grid.css\";\n\n\n.table-container {\n  display: block;\n}\n\n.sidebar-btn {\n  margin-bottom: 24px;\n}\n\n.sidebar-container {\n  margin-right: 24px;\n}\n\n.sidebar-layout {\n  display: flex;\n  flex-direction: row;\n}\n\n.topbar-layout {\n  display: flex;\n  flex-direction: column;\n}\n\n.table-pagination-wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch; // stretches items to fill the container horizontally\n  width: 100%; // ensures the wrapper takes up the full width of its parent\n}\n\n#table-wrapper {\n  flex: 1; // allows the table to take up the remaining space\n}\n\n\n.table-wrapper .ag-root-wrapper-body {\n  height: auto !important;\n  min-height: 100px !important;\n  min-width: 100px;\n}\n\n.filter-chips {\n  margin-bottom: 12px;\n}\n\n.set-filter-wrapper-sidebar {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: tokens.$ifxSpace100;\n}\n\n.set-filter-wrapper-topbar {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  margin-bottom: tokens.$ifxSpace100;\n  background: tokens.$ifxColorEngineering100;\n  padding-top: 32px;\n  padding-bottom: 32px;\n  gap: 24px;\n }\n\n\n.ifx-ag-grid {\n  display: grid;\n  height: 100%;\n  width: 100%;\n  min-width: 100px;\n  padding-bottom: tokens.$ifxSpace100;\n}\n\n\n.ifx-ag-grid .ag-header-cell::after {\n  outline: none !important;\n  border: none !important;\n  box-shadow: none !important;\n}\n\n.ifx-ag-grid .ag-header-cell:focus {\n  outline: none !important;\n}\n\n.ifx-ag-grid *:not(.ag-header-cell):focus {\n  outline: none;\n}\n\n\n\n.ag-overlay-loading-center {\n  border: none;\n  background: none;\n  border-radius: none;\n  box-shadow: none;\n}\n\n\n.ag-root-wrapper {\n  border: none;\n}\n\n\n\n.ag-header {\n  background-color: tokens.$ifxColorEngineering100;\n  border-bottom: none;\n\n  &.ag-header-active {\n    outline: none !important;\n    border-color: #0A8276 !important;\n  }\n}\n\n.ag-header-cell {\n  padding-left: 16px;\n  padding-right: 16px;\n  gap: 4px;\n}\n\n\n.ag-header-cell-focus {\n  border: none !important;\n  outline: none !important;\n}\n\n.ag-header-cell-text {\n  font-size: 13px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 20px;\n  color: tokens.$ifxColorBaseBlack;\n  font-family: var(--ifx-font-family);\n\n}\n\n.ag-row-focus {\n  background-color: inherit !important;\n  /* Reset the hover color to the row's original color */\n}\n\n.ag-row-hover {\n  background-color: tokens.$ifxColorBaseWhite !important; //inherit !important;\n  /* Reset the hover color to the row's original color */\n}\n\n\n.ag-cell-focus {\n  border: none !important;\n  outline: none !important;\n  background-color: inherit !important;\n}\n\n\n\n.ag-row {\n  background-color: tokens.$ifxColorBaseWhite;\n  border-bottom: 1px solid tokens.$ifxColorEngineering200;\n  font-size: 13px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 20px;\n  z-index: 1; //ensure the stacking order when used inside js frameworks\n}\n\n.ag-row-odd {\n  background-color: tokens.$ifxColorBaseWhite;\n}\n\n.ag-cell {\n  display: flex;\n  padding-left: 16px;\n  padding-right: 16px;\n  align-items: center;\n\n}\n\n.ag-ltr .ag-sort-indicator-icon {\n  padding-left: 0px;\n  vertical-align: bottom;\n  line-height: 12px;\n}\n\n.unsort-icon-custom-color {\n  color: tokens.$ifxColorEngineering400;\n}\n\n\n// Table with set filters in sidebar orientation\n\n\n.filters-title {\n  font-size: 24px;\n  font-weight: 600;\n}\n\n\n.matching-results-container {\n  display: flex;\n  gap: 4px;\n  font-size: 14px;\n}\n\n.matching-results-count {\n  font-weight: 600;\n}\n\n.matching-results-text {\n  font-weight: 400;\n}","import { Component, h, Host, Method, Element, Prop, State } from '@stencil/core';\nimport classNames from 'classnames';\n\nimport { createGrid, FirstDataRenderedEvent, GridApi, GridOptions } from 'ag-grid-community';\nimport { ButtonCellRenderer } from './buttonCellRenderer';\nimport { CustomNoRowsOverlay } from './customNoRowsOverlay';\nimport { CustomLoadingOverlay } from './customLoadingOverlay';\n\n\n@Component({\n  tag: 'ifx-table',\n  styleUrl: 'table.scss',\n  shadow: true\n})\nexport class Table {\n  gridOptions: GridOptions;\n  gridApi: GridApi;\n  @State() currentPage: number = 1;\n  @Prop() cols: any;\n  @Prop() rows: any;\n  @State() rowData: any[] = [];\n  @State() colData: any[] = [];\n  @State() filterOptions: { [key: string]: string[] } = {};\n  @State() currentFilters = {};\n\n  allRowData: any[] = [];\n  @Prop() rowHeight: string = 'default';\n  @Prop() tableHeight: string = 'auto';\n  @Prop() pagination: boolean = true;\n  @Prop() paginationPageSize: number = 10;\n  @Prop() filterOrientation: string = 'sidebar'; // topbar / none\n  @State() showSidebarFilters: boolean = true;\n  @State() matchingResultsCount: number = 0;\n\n  @Prop() showLoading: boolean = false;\n  private container: HTMLDivElement;\n  @Element() host: HTMLElement;\n  originalRowData: any[] = [];\n\n\n  toggleSidebarFilters() {\n    this.showSidebarFilters = !this.showSidebarFilters;\n  }\n\n\n  updateFilterOptions() {\n    const options = {};\n    for (let col of this.colData) {\n      options[col.field] = [...new Set(this.rowData.map(row => row[col.field]))];\n    }\n    this.filterOptions = options;\n  }\n\n  handleSidebarFilterChange(event: CustomEvent) {\n\n    // Assuming event.detail is an array of filter groups\n    const filterGroups = event.detail;\n\n    // Start by resetting the filter conditions to a blank object\n    this.currentFilters = {};\n\n    // Loop through each filter group provided in the event detail\n    filterGroups.forEach(filterGroup => {\n      const filterName = filterGroup.filterGroupName;\n      let filterValues;\n      let type;\n\n      // Check if the filterGroup has a selectedItems property\n      if (filterGroup.selectedItems) {\n        // Multi-select filter\n        filterValues = filterGroup.selectedItems.map(item => item.label);\n\n        type = 'multi-select';\n      } else {\n        // Text filter\n        filterValues = [filterGroup.value];\n        type = 'text';\n      }\n\n      // If there are no filter values, or the filter is a text filter with an empty value, remove the filter\n      if (!(filterValues.length === 0 || (filterValues.length === 1 && type === 'text' && filterValues[0] === ''))) {\n        // Add or update the filter in the currentFilters object\n        this.currentFilters[filterName] = { filterValues, type };\n      }\n    });\n\n\n    // Now that the currentFilters object has been updated, apply all filters to the data\n    this.allRowData = this.applyAllFilters(this.originalRowData, this.currentFilters);\n\n    // After filtering, update the table view with the new filtered data\n    this.updateTableView();\n  }\n\n\n  handleTopbarFilterChange(event: CustomEvent) {\n     const filters = event.detail;\n\n    // Start by resetting the filter conditions to a blank object\n    this.currentFilters = {};\n\n    // Loop through each filter group provided in the event detail\n    filters.forEach(filter => {\n      const filterName = filter.filterName;\n      let filterValues;\n\n      let type = filter.type;\n\n      if (type === 'text') {\n        // Search/Text filter\n        filterValues = filter.filterValues\n      } else {\n        // Multi-select/Single-Select\n        filterValues = filter.filterValues.map(item => item.label);\n      }\n\n      // If there are no filter values, or the filter is a text filter with an empty value, remove the filter\n      if (!(filterValues.length === 0 || (filterValues.length === 1 && type === 'text' && filterValues[0] === ''))) {\n        // Add or update the filter in the currentFilters object\n        this.currentFilters[filterName] = { filterValues, type };\n      }\n    });\n\n\n    // Now that the currentFilters object has been updated, apply all filters to the data\n    this.allRowData = this.applyAllFilters(this.originalRowData, this.currentFilters);\n\n    // After filtering, update the table view with the new filtered data\n    this.updateTableView();\n  }\n\n\n  applyAllFilters(data, filters) {\n    return data.filter(row => {\n      for (const filterName in filters) {\n        const filterInfo = filters[filterName];\n        let selectedValues = (filterInfo.filterValues || []).map(value => {\n          if (typeof value === 'string') {\n            return value.toLowerCase();\n          } else if (typeof value === 'number' || typeof value === 'boolean') {\n            return value.toString();\n          }\n          return '';\n        });\n\n        // For text filters, check if row values start with any of the selectedValues\n        if (filterInfo.type === 'text') {\n          let textFilterMatched = false;\n          for (let property in row) {\n            if (row.hasOwnProperty(property)) {\n              let rowValue = row[property] != null ? String(row[property]).toLowerCase() : '';\n              if (selectedValues.some(filterValue => rowValue.startsWith(filterValue))) {\n                textFilterMatched = true;\n                break;\n              }\n            }\n          }\n          if (!textFilterMatched) return false;\n        }\n        // For multi-select filters, this remains unchanged\n        else if (filterInfo.type === 'multi-select') {\n          let rowValue = row[filterName] != null ? String(row[filterName]).toLowerCase() : '';\n          // Check if 'undefined' is a selected value and include rows with empty values in that case\n          let includesUndefined = selectedValues.includes('undefined');\n          if (!selectedValues.includes(rowValue) && !(includesUndefined && rowValue === '')) {\n            return false;\n          }\n        }\n      }\n      return true;\n    });\n  }\n\n\n\n  updateTableView() {\n    // Calculate the slice of data to display based on pagination\n    const startIndex = (this.currentPage - 1) * this.paginationPageSize;\n    const endIndex = startIndex + this.paginationPageSize;\n    const visibleRowData = this.allRowData.slice(startIndex, endIndex);\n\n    // Update the row data in the table\n    this.rowData = visibleRowData;\n    this.gridApi.setGridOption('rowData', this.rowData);\n\n    // Update matching results count\n    this.matchingResultsCount = this.allRowData.length;\n  }\n\n\n  clearAllFilters() {\n    this.currentFilters = {};\n    this.allRowData = [...this.originalRowData];\n  }\n\n\n\n\n  @Method()\n  async onBtShowLoading() {\n    this.gridApi.showLoadingOverlay();\n  }\n\n  componentWillLoad() {\n    this.rowData = this.getRowData();\n    this.colData = this.getColData();\n    this.updateFilterOptions();\n\n    this.gridOptions = {\n\n      rowHeight: this.rowHeight === 'default' ? 40 : 32,\n      headerHeight: 40,\n      defaultColDef: {\n        resizable: true,\n      },\n      suppressDragLeaveHidesColumns: true,\n      onFirstDataRendered: this.onFirstDataRendered.bind(this),\n      columnDefs: this.colData,\n      rowData: this.rowData,\n      loadingOverlayComponent: CustomLoadingOverlay,\n      noRowsOverlayComponent: CustomNoRowsOverlay,\n      noRowsOverlayComponentParams: {\n        noRowsMessageFunc: () =>\n          'No rows found' //at: ' + new Date().toLocaleTimeString(),\n      },\n      icons: {\n        sortAscending: '<ifx-icon icon=\"arrowtriangleup16\"></ifx-icon>',\n        sortDescending: '<ifx-icon icon=\"arrowtriangledown16\"></ifx-icon>',\n        sortUnSort: '<a class=\"unsort-icon-custom-color\"><ifx-icon icon=\"arrowtrianglevertikal16\"></ifx-icon></a>'\n      },\n      rowDragManaged: this.colData.some(col => col.dndSource === true) ? true : false,\n      animateRows: this.colData.some(col => col.dndSource === true) ? true : false,\n    };\n\n  }\n\n  componentDidRender() {\n    if (this.gridApi) {\n      this.gridApi.setGridOption('columnDefs', this.colData);\n    }\n  }\n\n\n\n  componentDidLoad() {\n    if (this.container) {\n      this.gridApi = createGrid(this.container, this.gridOptions);\n      if (this.gridApi) {\n        this.gridApi.sizeColumnsToFit({\n          defaultMinWidth: 100,\n        });\n        this.gridApi.setGridOption('columnDefs', this.colData);\n        this.gridApi.setGridOption('rowData', this.rowData);\n\n        if (this.pagination) {\n          const paginationElement = this.host.shadowRoot.querySelector('ifx-pagination');\n          if (paginationElement) {\n            paginationElement.addEventListener('ifxPageChange', this.handlePageChange.bind(this));\n          }\n        }\n        const sidebarFilterElements = this.host.querySelectorAll('ifx-filter-type-group');\n        // Add an event listener to each SetFilter component\n        sidebarFilterElements.forEach(sidebarFilterElement => {\n          sidebarFilterElement.addEventListener('ifxSidebarFilterChange', this.handleSidebarFilterChange.bind(this));\n        });\n        const topbarFilterElements = this.host.querySelectorAll('ifx-filter-bar');\n        // Add an event listener to each SetFilter component\n        topbarFilterElements.forEach(topbarFilterElement => {\n          topbarFilterElement.addEventListener('ifxTopbarFilterChange', this.handleTopbarFilterChange.bind(this));\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.pagination) {\n      const paginationElement = this.host.shadowRoot.querySelector('ifx-pagination');\n      if (paginationElement) {\n        paginationElement.removeEventListener('ifxPageChange', this.handlePageChange.bind(this));\n      }\n    }\n    const sidebarFilters = this.host.shadowRoot.querySelectorAll('ifx-filter-type-group');\n    // Remove the event listener from each SetFilter component\n    sidebarFilters.forEach(sidebarFilter => {\n      sidebarFilter.removeEventListener('ifxSidebarFilterChange', this.handleSidebarFilterChange.bind(this));\n    });\n    const topbarFilters = this.host.shadowRoot.querySelectorAll('ifx-filter-type-group');\n    // Remove the event listener from each SetFilter component\n    topbarFilters.forEach(topbarFilter => {\n      topbarFilter.removeEventListener('ifxTopbarFilterChange', this.handleTopbarFilterChange.bind(this));\n    });\n  }\n\n  handlePageChange(event) {\n    this.currentPage = event.detail.currentPage;\n    const startIndex = (this.currentPage - 1) * this.paginationPageSize;\n    const endIndex = startIndex + this.paginationPageSize;\n    const visibleRowData = this.allRowData.slice(startIndex, endIndex);\n    // Update the data in the grid\n    if (this.gridApi) {\n      this.gridApi.setGridOption('rowData', visibleRowData);\n    }\n  }\n\n  isJSONParseable(str) {\n    try {\n      JSON.parse(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n\n  getRowData() {\n    let rows: any[] = [];\n    if (this.rows === undefined || this.rows === null) {\n      console.warn('rows is undefined or null');\n      return rows;\n    }\n\n    if (this.isJSONParseable(this.rows)) {\n      rows = [...JSON.parse(this.rows)];\n    }\n    else if (Array.isArray(this.rows) || typeof this.rows === 'object') {\n      rows = [...this.rows];\n    }\n    else {\n      console.error('Unexpected value for rows: ', this.rows);\n    }\n\n    this.allRowData = rows;\n    this.originalRowData = [...rows]; // Deep copy the original data\n    this.matchingResultsCount = this.allRowData.length;\n\n    return rows.slice(0, this.paginationPageSize);\n  }\n\n\n  getColData() {\n    let cols: any[] = [];\n    if (this.cols === undefined || this.cols === null) {\n      console.warn('cols is undefined or null');\n      return cols;\n    }\n\n    if (this.isJSONParseable(this.cols)) {\n      cols = [...JSON.parse(this.cols)];\n    } else if (Array.isArray(this.cols) || typeof this.cols === 'object') {\n      cols = [...this.cols];\n    } else {\n      console.error('Unexpected value for cols: ', this.cols);\n    }\n\n    let buttonColumn = cols.find(column => column.field === 'button');\n    if (buttonColumn) {\n      buttonColumn.cellRenderer = ButtonCellRenderer;\n    }\n\n    return cols;\n  }\n\n  onFirstDataRendered(params: FirstDataRenderedEvent) {\n    params.api.sizeColumnsToFit();\n  }\n\n  handleResetButtonClick() {\n     const resetEvent = new CustomEvent('ifxResetFiltersEvent', { bubbles: true, composed: true });\n    window.dispatchEvent(resetEvent); // Dispatch from the window object\n\n    this.clearAllFilters();\n    this.updateTableView();  // Update table view with the original data\n  }\n\n\n  disconnectedCallback() {\n    if (this.pagination) {\n      const paginationElement = this.host.shadowRoot.querySelector('ifx-pagination');\n      if (paginationElement) {\n        paginationElement.removeEventListener('ifxPageChange', this.handlePageChange);\n      }\n    }\n\n    const resetButton = this.host.shadowRoot.querySelector('#reset-filters-button');\n    if (resetButton) {\n      resetButton.removeEventListener('click', this.handleResetButtonClick.bind(this));\n    }\n  }\n\n\n\n  getTableClassNames() {\n    return classNames(\n      this.tableHeight === 'auto' && 'table-wrapper ag-root-wrapper-body',\n      'table-wrapper',\n    );\n  }\n\n\n  render() {\n    let style = {};\n    if (this.tableHeight !== 'auto') {\n      style = {\n        'height': this.tableHeight\n      };\n    }\n    const filterClass = this.filterOrientation === 'topbar' ? 'topbar-layout' : 'sidebar-layout';\n    return (\n      <Host>\n        <div class=\"table-container\">\n          {this.filterOrientation === 'sidebar' && (\n            <div class=\"sidebar-btn\">\n              <ifx-button\n                type=\"button\"\n                disabled={false}\n                variant=\"secondary\"\n                size=\"m\"\n                target=\"_blank\"\n                theme=\"default\"\n                full-width=\"false\"\n                onClick={() => this.toggleSidebarFilters()}\n              >\n                <ifx-icon icon=\"cross-12\"></ifx-icon>{this.showSidebarFilters ? 'Hide Filters' : 'Show Filters'}\n              </ifx-button>\n            </div>\n          )}\n  \n          <div class={filterClass}>\n            {this.filterOrientation === 'sidebar' && this.showSidebarFilters && (\n              <div class=\"sidebar-container\">\n                <div class=\"filters-title-container\">\n                  <span class=\"filters-title\">Filters</span>\n                </div>\n                <div class=\"set-filter-wrapper-sidebar\">\n                  {(this.filterOrientation !== 'sidebar' || this.showSidebarFilters) && (\n                    <slot name=\"sidebar-filter\"></slot>\n                  )}\n                </div>\n              </div>\n            )}\n  \n            {this.filterOrientation !== 'none' && this.filterOrientation !== 'sidebar' && (\n              <div class=\"set-filter-wrapper-topbar\">\n                {(this.filterOrientation !== 'sidebar' || this.showSidebarFilters) && (\n                  <slot name=\"topbar-filter\"></slot>\n                )}\n              </div>\n            )}\n  \n            <div class=\"table-pagination-wrapper\">\n              <div class=\"filter-chips\">\n                {this.filterOrientation !== 'none' && this.filterOrientation !== 'topbar' && this.showSidebarFilters && (\n                  Object.keys(this.currentFilters).map(filterName => (\n                    <ifx-chip placeholder={filterName}>\n                      <ifx-dropdown-menu size=\"m\" slot=\"menu\">\n                        {this.currentFilters[filterName].filterValues.map(filterValue => (\n                          <ifx-dropdown-item icon=\"\" target=\"_self\" href=\"\">\n                            {filterValue}\n                          </ifx-dropdown-item>\n                        ))}\n                      </ifx-dropdown-menu>\n                    </ifx-chip>\n                  ))\n                )}\n                {this.filterOrientation !== 'none' && this.filterOrientation === 'sidebar' && this.showSidebarFilters && Object.keys(this.currentFilters).length > 0 && (\n                  <ifx-button type=\"button\" disabled={false} variant=\"tertiary\" size=\"m\" target=\"_blank\" theme=\"default\" full-width=\"false\" onClick={() => this.handleResetButtonClick()}\n                  >\n                    <ifx-icon icon=\"curved-arrow-left-16\"></ifx-icon>Reset all\n                  </ifx-button>\n                )}\n              </div>\n  \n              {this.filterOrientation !== 'none' && (\n                <div class=\"matching-results-container\">\n                  <span class=\"matching-results-count\">\n                    {this.matchingResultsCount}\n                  </span>\n                  <span class=\"matching-results-text\">\n                    matching results\n                  </span>\n                </div>\n              )}\n  \n              <div id=\"table-wrapper\" class={this.getTableClassNames()}>\n                <div class='ifx-ag-grid' style={style} ref={(el) => this.container = el}>\n                </div>\n              </div>\n              {this.pagination ? <ifx-pagination total={this.allRowData.length} current-page={this.currentPage}></ifx-pagination> : null}\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n\n  hasButtonCol(): boolean {\n    return this.getColData().some(column => column.field === 'button');\n  }\n\n\n\n\n  // setIconButtonRenderer() {\n  //   const iconButtonColumn = this.getColData().find(column => column.field === 'iconButton');\n  //   if (iconButtonColumn) {\n  //     iconButtonColumn.cellRenderer = IconButtonCellRenderer;\n  //   }\n  // }\n\n  // setLinkRenderer() {\n  //   const linkColumn = this.getColData().find(column => column.field === 'link');\n  //   if (linkColumn) {\n  //     linkColumn.cellRenderer = LinkCellRenderer;\n  //   }\n  // }\n\n\n\n  onDragOver(event) {\n    var dragSupported = event.dataTransfer.length;\n\n    if (dragSupported) {\n      event.dataTransfer.dropEffect = 'move';\n    }\n\n    event.preventDefault();\n  }\n\n  onDrop(event) {\n    var jsonData = event.dataTransfer.getData('application/json');\n\n    var eJsonRow = document.createElement('div');\n    eJsonRow.classList.add('json-row');\n    eJsonRow.innerText = jsonData;\n\n    var eJsonDisplay = document.querySelector('#eJsonDisplay');\n\n    eJsonDisplay.appendChild(eJsonRow);\n    event.preventDefault();\n  }\n\n}\n"],"names":["ButtonKeys","ButtonCellRenderer","init","params","config","data","button","this","eGui","document","createElement","hasRequiredKeys","innerHTML","disabled","variant","size","target","color","text","getGui","refresh","getFieldValueToDisplay","valueFormatted","value","isObject","constructor","Object","obj","every","key","CustomNoRowsOverlay","noRowsMessageFunc","_params","CustomLoadingOverlay","Table","allRowData","originalRowData","toggleSidebarFilters","showSidebarFilters","updateFilterOptions","options","col","colData","field","Set","rowData","map","row","filterOptions","handleSidebarFilterChange","event","filterGroups","detail","currentFilters","forEach","filterGroup","filterName","filterGroupName","filterValues","type","selectedItems","item","label","length","applyAllFilters","updateTableView","handleTopbarFilterChange","filters","filter","filterInfo","selectedValues","toLowerCase","toString","textFilterMatched","property","hasOwnProperty","rowValue","String","some","filterValue","startsWith","includesUndefined","includes","startIndex","currentPage","paginationPageSize","endIndex","visibleRowData","slice","gridApi","setGridOption","matchingResultsCount","clearAllFilters","onBtShowLoading","showLoadingOverlay","componentWillLoad","getRowData","getColData","gridOptions","rowHeight","headerHeight","defaultColDef","resizable","suppressDragLeaveHidesColumns","onFirstDataRendered","bind","columnDefs","loadingOverlayComponent","noRowsOverlayComponent","noRowsOverlayComponentParams","icons","sortAscending","sortDescending","sortUnSort","rowDragManaged","dndSource","animateRows","componentDidRender","componentDidLoad","container","createGrid","sizeColumnsToFit","defaultMinWidth","pagination","paginationElement","host","shadowRoot","querySelector","addEventListener","handlePageChange","querySelectorAll","sidebarFilterElement","topbarFilterElement","componentWillUnmount","removeEventListener","sidebarFilter","topbarFilter","isJSONParseable","str","JSON","parse","e","rows","undefined","console","warn","Array","isArray","error","cols","buttonColumn","find","column","cellRenderer","api","handleResetButtonClick","resetEvent","CustomEvent","bubbles","composed","window","dispatchEvent","disconnectedCallback","resetButton","getTableClassNames","classNames","tableHeight","render","style","filterClass","filterOrientation","h","Host","class","theme","onClick","icon","name","keys","placeholder","slot","href","id","ref","el","total","hasButtonCol","onDragOver","dataTransfer","dropEffect","preventDefault","onDrop","jsonData","getData","eJsonRow","classList","add","innerText","appendChild"],"sourceRoot":""}