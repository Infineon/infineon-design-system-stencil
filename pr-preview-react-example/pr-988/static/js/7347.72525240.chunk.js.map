{"version":3,"file":"static/js/7347.72525240.chunk.js","mappings":"6LAAA,MCQaA,EAAS,M,kDAEY,C,CAIhC,gBAAMC,CAAWC,GACf,GAAIC,KAAKC,aAAc,CACrB,MAAMC,EAAQC,MAAMC,KAAKJ,KAAKK,GAAGC,iBAAiB,uBAClD,IAAK,MAAMC,KAAQL,EAAO,CACxB,MAAMM,EAAcD,EAChBC,IAAgBT,EAAMU,cAAiBD,EAAYE,OACrDF,EAAYE,MAAO,E,GAM3BC,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,sBACTF,EAAAA,EAAAA,GAAA,QAAAC,IAAA,6C,wCD7Ba,+MEArB,MCQaE,EAAgB,M,8JAIR,E,sBACgB,E,mBACF,C,CAMjCC,iBAAAA,GACEhB,KAAKiB,aAAejB,KAAKU,KACpBV,KAAKkB,kBACRlB,KAAKiB,cAAe,E,CAIxBE,gBAAAA,GACEnB,KAAKoB,mB,CAGPC,kBAAAA,GACErB,KAAKoB,mB,CAMPE,WAAAA,CAAYC,GACVvB,KAAKiB,aAAeM,C,CAGtBC,UAAAA,GACExB,KAAKiB,cAAgBjB,KAAKiB,aAC1BjB,KAAKU,KAAOV,KAAKiB,aAEbjB,KAAKiB,aACPjB,KAAKyB,YAAYC,KAAK,CAAEC,OAAQ3B,KAAKiB,eAErCjB,KAAK4B,aAAaF,KAAK,CAAEG,UAAW7B,KAAKiB,c,CAI7CG,iBAAAA,GACMpB,KAAKiB,aACPjB,KAAK8B,UAAUC,MAAMC,UAAY,GAAGhC,KAAK8B,UAAUG,iBAEnDjC,KAAK8B,UAAUC,MAAMC,UAAY,G,CAIrCE,gBAAAA,CAAiBC,GACf,MACMC,EADcD,EAAE1B,OACI4B,gBAEvBD,EAAME,OAAS,GAChBF,EAAMG,SAAQC,IACK,IAAIC,kBAAiB,CAACC,EAAeC,KACpD,IAAI,IAAIC,KAAYF,EACI,cAAlBE,EAASC,MACP7C,KAAKiB,cACPjB,KAAKoB,mB,IAKJ0B,QAAQN,EAAM,CAAEO,YAAY,EAAMC,WAAW,EAAMC,SAAS,GAAO,IAI5EjD,KAAKiB,cACPjB,KAAKoB,mB,CAITT,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,wDAAiBb,KAAKkD,QAASpC,MAAO,mBAAkBd,KAAKiB,aAAe,OAAS,MACnFL,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,kBAAkBqC,QAASA,IAAMnD,KAAKwB,eAC/CZ,EAAAA,EAAAA,GAAA,QAAAC,IAAA,2CAAMC,MAAM,mBACVF,EAAAA,EAAAA,GAAA,YAAAC,IAAA,2CAAUuC,KAAK,sBAEjBxC,EAAAA,EAAAA,GAAA,QAAAC,IAAA,2CAAMC,MAAM,qBAAqBd,KAAKkD,WAExCtC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,oBAAoBuC,IAAMhD,GAAQL,KAAK8B,UAAYzB,IAC5DO,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,kBACTF,EAAAA,EAAAA,GAAA,QAAAC,IAAA,2CAAMyC,aAAenB,GAAMnC,KAAKkC,iBAAiBC,O,8DDhGpC,w4B","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/accordion/accordion.scss?tag=ifx-accordion&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/accordion/accordion.tsx","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/accordion/accordionItem.scss?tag=ifx-accordion-item&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/accordion/accordionItem.tsx"],"sourcesContent":["// ifxAccordion.scss\n@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n:host {\n  display: block;\n}\n\n.accordion-wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: tokens.$ifxSpace100;\n  font-family: var(--ifx-font-family);\n\n}","//ifxAccordion.tsx\nimport { Component, h, Listen, Element, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-accordion',\n  styleUrl: 'accordion.scss',\n  shadow: true,\n})\nexport class Accordion {\n  @Element() el: HTMLElement;\n  @Prop() autoCollapse: boolean = false;\n\n\n  @Listen('ifxItemOpen')\n  async onItemOpen(event: CustomEvent) {\n    if (this.autoCollapse) {\n      const items = Array.from(this.el.querySelectorAll('ifx-accordion-item'));\n      for (const item of items) {\n        const itemElement = item as HTMLIfxAccordionItemElement;\n        if (itemElement !== event.target && (await itemElement.open)) {\n          itemElement.open = false;\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"accordion-wrapper\">\n        <slot />\n      </div>\n    );\n  }\n}\n","// ifxAccordionItem.scss\n@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n\n.accordion-item {\n  border-radius: 3px;\n  overflow: hidden;\n  transition: all 0.3s;\n  font-family: var(--ifx-font-family);\n\n}\n\n.accordion-title:hover {\n  border: 1px solid tokens.$ifxColorEngineering200;\n  color: tokens.$ifxColorOcean600;\n}\n\n.accordion-title {\n  display: flex;\n  align-items: center;\n  padding: tokens.$ifxSpace150 tokens.$ifxSpace200;\n  gap: tokens.$ifxSpace150;\n  color: tokens.$ifxColorOcean500;\n  background-color: tokens.$ifxColorBaseWhite;\n  border: 1px solid tokens.$ifxColorEngineering200;\n  cursor: pointer;\n}\n\n.accordion-caption {\n  font-weight: tokens.$ifxFontWeightSemibold;\n  font-size: tokens.$ifxFontSizeL;\n}\n\n.accordion-content {\n  gap: tokens.$ifxSpace100;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.3s ease-in-out;\n  line-height: 24px;\n  font-size: tokens.$ifxFontSizeM;\n  font-weight: 400;\n}\n\n.inner-content {\n  background-color: tokens.$ifxColorBaseWhite;\n  padding: tokens.$ifxSpace300;\n  // white-space: pre-wrap;\n  /* wraps text at spaces and within words */\n  word-wrap: break-word;\n  /* breaks text within a word if necessary */\n  overflow-wrap: anywhere;\n  align-self: stretch;\n\n  /* breaks text at arbitrary points when needed */\n}\n\n.accordion-icon {\n  font-weight: bold;\n  display: inline-block;\n  transition: transform 0.3s;\n\n  &:hover {\n    color: tokens.$ifxColorOcean600;\n\n  }\n}\n\n\n\n.accordion-item.open .accordion-icon {\n  transform: rotate(-180deg);\n}","//ifxAccordionItem\nimport { Component, Prop, h, State, Event, EventEmitter, Watch } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-accordion-item',\n  styleUrl: 'accordionItem.scss',\n  shadow: true,\n})\nexport class IfxAccordionItem {\n  @Prop() caption: string;\n  @Prop({\n    mutable: true,\n  }) open: boolean = false;\n  @Prop() initialCollapse: boolean = true;\n  @State() internalOpen: boolean = false;\n  @Event() ifxItemOpen: EventEmitter;\n  @Event() ifxItemClose: EventEmitter;\n  private contentEl!: HTMLElement;\n\n\n  componentWillLoad() {\n    this.internalOpen = this.open;\n    if (!this.initialCollapse) {\n      this.internalOpen = true;\n    }\n  }\n\n  componentDidLoad() {\n    this.openAccordionItem()\n  }\n\n  componentDidUpdate() {\n    this.openAccordionItem()\n  }\n\n\n\n  @Watch('open')\n  openChanged(newValue: boolean) {\n    this.internalOpen = newValue;\n  }\n\n  toggleOpen() {\n    this.internalOpen = !this.internalOpen;\n    this.open = this.internalOpen;\n\n    if (this.internalOpen) {\n      this.ifxItemOpen.emit({ isOpen: this.internalOpen });\n    } else {\n      this.ifxItemClose.emit({ isClosed: !this.internalOpen });\n    }\n  }\n\n  openAccordionItem() {\n    if (this.internalOpen) {\n      this.contentEl.style.maxHeight = `${this.contentEl.scrollHeight}px`;\n    } else {\n      this.contentEl.style.maxHeight = '0';\n    }\n  }\n\n  handleSlotChange(e) {\n    const slotElement = e.target;\n    const nodes = slotElement.assignedNodes();\n    \n    if(nodes.length > 0) {\n      nodes.forEach(node => {\n        const observer = new MutationObserver((mutationsList, _) => {\n          for(let mutation of mutationsList) {\n            if (mutation.type === 'childList') {\n              if (this.internalOpen) {\n                this.openAccordionItem();\n              }\n            }\n          }\n        });\n        observer.observe(node, { attributes: true, childList: true, subtree: true });\n      });\n    }\n\n    if (this.internalOpen) {\n      this.openAccordionItem();\n    }\n  }\n\n  render() {\n    return (\n      <div aria-label={this.caption} class={`accordion-item ${this.internalOpen ? 'open' : ''}`}>\n        <div class=\"accordion-title\" onClick={() => this.toggleOpen()}>\n          <span class=\"accordion-icon\">\n            <ifx-icon icon=\"chevron-down-12\" />\n          </span>\n          <span class=\"accordion-caption\">{this.caption}</span>\n        </div>\n        <div class=\"accordion-content\" ref={(el) => (this.contentEl = el as HTMLElement)}>\n          <div class=\"inner-content\">\n            <slot onSlotchange={(e) => this.handleSlotChange(e)} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"],"names":["Accordion","onItemOpen","event","this","autoCollapse","items","Array","from","el","querySelectorAll","item","itemElement","target","open","render","h","key","class","IfxAccordionItem","componentWillLoad","internalOpen","initialCollapse","componentDidLoad","openAccordionItem","componentDidUpdate","openChanged","newValue","toggleOpen","ifxItemOpen","emit","isOpen","ifxItemClose","isClosed","contentEl","style","maxHeight","scrollHeight","handleSlotChange","e","nodes","assignedNodes","length","forEach","node","MutationObserver","mutationsList","_","mutation","type","observe","attributes","childList","subtree","caption","onClick","icon","ref","onSlotchange"],"sourceRoot":""}