{"version":3,"file":"static/js/2599.1c3c36c0.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-basic-version/customNoRowsOverlay.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-basic-version/customLoadingOverlay.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-basic-version/table.scss?tag=ifx-basic-table","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-basic-version/table.tsx"],"sourcesContent":["import { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport class CustomNoRowsOverlay implements ICellRendererComp {\n  eGui!: HTMLElement;\n\n  init(params: ICellRendererParams & { noRowsMessageFunc: () => string }) {\n    this.eGui = document.createElement('div');\n    this.eGui.innerHTML = `\n            <div role=\"presentation\" class=\"ag-overlay-loading-center\" >\n               ${params.noRowsMessageFunc()}\n            </div>\n        `;\n  }\n\n  getGui() {\n    return this.eGui;\n  }\n\n  refresh(_params: ICellRendererParams): boolean {\n    return false;\n  }\n}","import { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport class CustomLoadingOverlay implements ICellRendererComp {\n  eGui!: HTMLElement;\n\n  init(_params: ICellRendererParams & { loadingMessage: string }) {\n    this.eGui = document.createElement('div');\n    this.eGui.innerHTML = `<div class=\"ag-overlay-loading-center\" role=\"presentation\">\n<ifx-spinner></ifx-spinner>\n            </div>`;\n  }\n\n  getGui() {\n    return this.eGui;\n  }\n\n  refresh(_params: ICellRendererParams): boolean {\n    return false;\n  }\n}","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n@import \"~ag-grid-community/styles/ag-grid.css\";\n// @import \"~ag-grid-community/styles/ag-theme-alpine.css\";\n\n// :host {\n//   --table-height: '200px';\n//   /* Default value */\n// }\n\n.table-wrapper .ag-root-wrapper-body {\n  height: auto !important;\n  min-height: 100px !important;\n  min-width: 100px;\n}\n\n.ifx-ag-grid {\n  display: grid;\n  height: 100%;\n  width: 100%;\n  min-width: 100px;\n  padding-bottom: tokens.$ifxSpace100;\n}\n\n\n.ifx-ag-grid .ag-header-cell::after {\n  outline: none !important;\n  border: none !important;\n  box-shadow: none !important;\n}\n\n.ifx-ag-grid .ag-header-cell:focus {\n  outline: none !important;\n}\n\n.ifx-ag-grid *:not(.ag-header-cell):focus {\n  outline: none;\n}\n\n\n\n.ag-overlay-loading-center {\n  border: none;\n  background: none;\n  border-radius: none;\n  box-shadow: none;\n}\n\n\n.ag-root-wrapper {\n  border: none;\n}\n\n\n\n.ag-header {\n  background-color: tokens.$ifxColorEngineering100;\n  border-bottom: none;\n\n  &.ag-header-active {\n    outline: none !important;\n    border-color: #0A8276 !important;\n  }\n}\n\n.ag-header-cell {\n  padding-left: 16px;\n  padding-right: 16px;\n  gap: 4px;\n}\n\n\n.ag-header-cell-focus {\n  border: none !important;\n  outline: none !important;\n}\n\n.ag-header-cell-text {\n  font-size: 13px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 20px;\n  color: tokens.$ifxColorBaseBlack;\n  font-family: var(--ifx-font-family);\n\n}\n\n.ag-row-focus {\n  background-color: inherit !important;\n  /* Reset the hover color to the row's original color */\n}\n\n.ag-row-hover {\n  background-color: tokens.$ifxColorBaseWhite !important; //inherit !important;\n  /* Reset the hover color to the row's original color */\n}\n\n\n.ag-cell-focus {\n  border: none !important;\n  outline: none !important;\n  background-color: inherit !important;\n}\n\n\n\n.ag-row {\n  background-color: tokens.$ifxColorBaseWhite;\n  border-bottom: 1px solid tokens.$ifxColorEngineering200;\n  font-size: 13px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 20px;\n  z-index: 1; //ensure the stacking order when used inside js frameworks\n}\n\n.ag-row-odd {\n  background-color: tokens.$ifxColorBaseWhite;\n}\n\n.ag-cell {\n  display: flex;\n  padding-left: 16px;\n  padding-right: 16px;\n  align-items: center;\n\n}\n\n.ag-ltr .ag-sort-indicator-icon {\n  padding-left: 0px;\n  vertical-align: bottom;\n  line-height: 12px;\n}\n\n.unsort-icon-custom-color {\n  color: tokens.$ifxColorEngineering400;\n}","import { Component, h, Element, Host, Prop, State } from '@stencil/core';\nimport { createGrid, FirstDataRenderedEvent, GridApi, GridOptions } from 'ag-grid-community';\nimport { CustomNoRowsOverlay } from './customNoRowsOverlay';\nimport { CustomLoadingOverlay } from './customLoadingOverlay';\nimport classNames from 'classnames';\n\n\n@Component({\n  tag: 'ifx-basic-table',\n  styleUrl: 'table.scss',\n  shadow: false // only works with shadowdom off because we are using an external library\n})\nexport class Table {\n  @State() gridOptions: GridOptions;\n  @State() gridApi: GridApi;\n  @Prop() cols: any[] | string;\n  @Prop() rows: any[] | string;\n  @Prop() columnDefs: any[] = [];\n  @Prop() rowData: any[] = [];\n  @Prop() rowHeight: string = 'default'; //default or compact\n  @Prop() tableHeight: string = 'auto';\n  private container: HTMLDivElement;\n  @Element() host: HTMLElement;\n\n\n\n  componentWillLoad() {\n    if (typeof this.rows === 'string' && typeof this.cols === 'string') {\n      try {\n        this.columnDefs = JSON.parse(this.cols);\n        this.rowData = JSON.parse(this.rows);\n      } catch (err) {\n        console.error('Failed to parse input:', err);\n      }\n    } else if ((Array.isArray(this.rows) || typeof this.rows === 'object') && (Array.isArray(this.cols) || typeof this.cols === 'object')) {\n      this.columnDefs = this.cols;\n      this.rowData = this.rows;\n\n    } else {\n      console.error('Unexpected value for cols and rows:', this.rows, this.cols);\n    }\n\n\n    this.gridOptions = {\n      rowHeight: this.rowHeight === 'default' ? 40 : 32,\n      headerHeight: 40,\n      defaultColDef: {\n        resizable: true,\n      },\n      autoSizeStrategy: {\n        type: 'fitGridWidth',\n        defaultMinWidth: 100,\n\n      },\n      suppressCellFocus: true,\n      suppressDragLeaveHidesColumns: true,\n      suppressRowHoverHighlight: true,\n      onFirstDataRendered: this.onFirstDataRendered,\n      columnDefs: this.columnDefs,\n      rowData: this.rowData,\n      loadingOverlayComponent: CustomLoadingOverlay,\n      noRowsOverlayComponent: CustomNoRowsOverlay,\n      noRowsOverlayComponentParams: {\n        noRowsMessageFunc: () =>\n          'No rows found at: ' + new Date().toLocaleTimeString(),\n      },\n\n      icons: {\n        sortAscending: '<ifx-icon icon=\"arrowtriangleup16\"></ifx-icon>',\n        sortDescending: '<ifx-icon icon=\"arrowtriangledown16\"></ifx-icon>',\n        sortUnSort: '<a class=\"unsort-icon-custom-color\"><ifx-icon icon=\"arrowtrianglevertikal16\"></ifx-icon></a>'\n      },\n      rowDragManaged: this.columnDefs.some(col => col.dndSource === true) ? true : false,\n      animateRows: this.columnDefs.some(col => col.dndSource === true) ? true : false,\n    };\n\n  }\n\n\n  getRowData() {\n    let rows: any[] = [];\n    if (typeof this.rows === 'string') {\n      try {\n        rows = JSON.parse(this.rows);\n      } catch (err) {\n        console.error('Failed to parse input:', err);\n      }\n    } else if ((Array.isArray(this.rows) || typeof this.rows === 'object')) {\n      rows = this.rows;\n\n    } else {\n      console.error('Unexpected value for rows: ', this.rows);\n    }\n\n\n    return rows;\n  }\n\n  getColData() {\n    let cols: any[] = [];\n\n    if (typeof this.cols === 'string') {\n      try {\n        cols = JSON.parse(this.cols);\n      } catch (err) {\n        console.error('Failed to parse input:', err);\n      }\n    } else if ((Array.isArray(this.cols) || typeof this.cols === 'object')) {\n      cols = this.cols;\n\n    } else {\n      console.error('Unexpected value for cols: ', this.cols);\n    }\n    return cols;\n  }\n\n  onFirstDataRendered(params: FirstDataRenderedEvent) {\n    params.api.sizeColumnsToFit();\n  }\n\n  componentWillUpdate() {\n    this.gridOptions.columnDefs = this.columnDefs;\n    this.gridOptions.rowData = this.rowData;\n    if (this.gridApi) {\n      this.gridApi.setGridOption('rowData', this.rowData);\n      this.gridApi.setGridOption('columnDefs', this.columnDefs);\n    }\n  }\n\n  componentDidLoad() {\n    if (this.container) {\n      this.gridApi = createGrid(this.container, this.gridOptions);\n      if (this.gridApi) {\n        this.gridApi.sizeColumnsToFit({\n          defaultMinWidth: 100,\n        });\n        this.gridApi.setGridOption('columnDefs', this.getColData());\n        this.gridApi.setGridOption('rowData', this.getRowData());\n\n\n      }\n    }\n  }\n\n  getClassNames() {\n    return classNames(\n      this.tableHeight === 'auto' && 'table-wrapper ag-root-wrapper-body',\n      'table-wrapper',\n    );\n  }\n\n\n  render() {\n    let style = {};\n    if (this.tableHeight !== 'auto') {\n      style = {\n        'height': this.tableHeight\n      };\n    }\n    return (\n      <Host >\n        <div id=\"table-wrapper\" class={this.getClassNames()}>\n          <div class='ifx-ag-grid' style={style} ref={(el) => this.container = el}>\n          </div>\n        </div>\n      </Host>\n    );\n\n\n  }\n}\n"],"names":["CustomNoRowsOverlay","init","params","this","eGui","document","createElement","innerHTML","concat","noRowsMessageFunc","getGui","refresh","_params","CustomLoadingOverlay","Table","componentWillLoad","rows","cols","columnDefs","JSON","parse","rowData","err","console","error","Array","isArray","gridOptions","rowHeight","headerHeight","defaultColDef","resizable","autoSizeStrategy","type","defaultMinWidth","suppressCellFocus","suppressDragLeaveHidesColumns","suppressRowHoverHighlight","onFirstDataRendered","loadingOverlayComponent","noRowsOverlayComponent","noRowsOverlayComponentParams","Date","toLocaleTimeString","icons","sortAscending","sortDescending","sortUnSort","rowDragManaged","some","col","dndSource","animateRows","getRowData","getColData","api","sizeColumnsToFit","componentWillUpdate","gridApi","setGridOption","componentDidLoad","container","createGrid","getClassNames","classNames","tableHeight","render","style","h","Host","key","id","class","ref","el"],"sourceRoot":""}