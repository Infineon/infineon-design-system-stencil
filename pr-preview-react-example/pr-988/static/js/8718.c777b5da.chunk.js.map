{"version":3,"file":"static/js/8718.c777b5da.chunk.js","mappings":"+JAAA,MCOaA,EAAI,M,kFAqFP,KAAAC,eAAiB,KACvB,MAAMC,EAAgBC,KAAKC,gBACvBF,IAAkBC,KAAKE,aACzBF,KAAKE,WAAaH,EAClBC,KAAKG,uBAEPH,KAAKI,sBAAsBJ,KAAKK,KAAK,EAevC,KAAAC,WAAcC,IACZA,EAAMC,kBACNR,KAAKS,UAAYT,KAAKS,QAAQ,EAGhC,KAAAC,eAAkBH,IAChBA,EAAMC,kBACNR,KAAKW,UAAYX,KAAKW,QAAQ,EAehC,KAAAR,oBAAuBI,IAErB,GAAIA,GAA+B,iBAAtBA,EAAMK,OAAOP,MAA2BE,EAAMK,OAAOC,MAAO,CAC7CC,MAAMC,KAAKf,KAAKgB,GAAGC,iBAAiB,mBAC3DC,QAAOC,GAAwC,iBAA/BA,EAAMC,aAAa,SAA8BD,IAAUZ,EAAMc,SAClEC,SAAQC,GAAeA,EAAYC,aAAa,QAAS,U,CAG7E,MAAMC,EAAgBzB,KAAK0B,iBAAiB1B,KAAKgB,IACjDhB,KAAK2B,cAAgBF,EAAcG,OAEnC5B,KAAK6B,cAAcC,KAAK,CAAEC,KAAM/B,KAAK+B,KAAMN,iBAAgB,E,eAzIhC,E,eACT,E,mBACa,E,gBACX,E,UACP,G,qBACW,E,UACH,W,oDAEkB,C,CAOzCO,gBAAAA,CAAiBC,GACfjC,KAAKI,sBAAsB6B,E,CAI7BC,mBAAAA,CAAoBC,GACdA,IACFnC,KAAKoC,QACLpC,KAAKqC,cAAe,E,CAIxBC,iBAAAA,GACEtC,KAAKuC,6BACLvC,KAAKwC,gB,CAGPC,oBAAAA,GACEzC,KAAK0C,8B,CAGPN,KAAAA,GACEpC,KAAK2C,mBACL3C,KAAKS,UAAW,EAChBT,KAAKW,UAAW,EAChBX,KAAK2B,cAAgB,EACrB3B,KAAK6B,cAAcC,KAAK,CAAEC,KAAM/B,KAAK+B,KAAMN,cAAe,I,CAI5DmB,MAAAA,GACE,OAAO5C,KAAK6C,Y,CAKJN,0BAAAA,GACNvC,KAAKgB,GAAG8B,iBAAiB,qBAAsB9C,KAAKG,qBACpDH,KAAK+C,SAAW,IAAIC,iBAAiBhD,KAAKF,gBAC1CE,KAAK+C,SAASE,QAAQjD,KAAKgB,GAAI,CAAEkC,WAAW,G,CAGtCR,4BAAAA,GACN1C,KAAKgB,GAAGmC,oBAAoB,qBAAsBnD,KAAKG,qBACvDH,KAAK+C,SAASK,Y,CAGRZ,cAAAA,GACNxC,KAAK2B,cAAgB3B,KAAK0B,iBAAiB1B,KAAKgB,IAAIY,OACpD5B,KAAKE,WAAaF,KAAKC,gBACvBD,KAAKI,sBAAsBJ,KAAKK,MAChCL,KAAKqD,4B,CAIDjD,qBAAAA,CAAsB6B,GACRnB,MAAMC,KAAKf,KAAKgB,GAAGC,iBAAiB,mBAC5CK,SAAQH,GAASA,EAAMK,aAAa,OAAQS,I,CAGlDU,gBAAAA,GACc7B,MAAMC,KAAKf,KAAKgB,GAAGC,iBAAiB,mBAC5CK,SAAQH,IAClBA,EAAMN,OAAQ,EACdM,EAAMK,aAAa,QAAS,QAAQ,G,CAahC6B,0BAAAA,GACY,iBAAdrD,KAAKK,MAA2BL,KAAK2B,cAAgB,IACvD3B,KAAK2C,mBACL3C,KAAK2B,cAAgB,E,CAIzB1B,aAAAA,GACE,OAAOD,KAAKgB,GAAGC,iBAAiB,kBAAkBW,M,CAcpDF,gBAAAA,CAAiBV,GACf,OAAOF,MAAMC,KAAKC,EAAGC,iBAAiB,mBACnCC,QAAOC,GAAyC,SAAhCA,EAAMC,aAAa,WACnCkC,KAAInC,IAAS,CACZoC,MAAOpC,EAAMC,aAAa,SAC1BP,MAAOM,EAAMC,aAAa,SAC1Bf,KAAMc,EAAMC,aAAa,QACzBoC,QAASrC,K,CAmBP0B,UAAAA,GACN,MAAMY,EAAc3C,MAAMC,KAAKf,KAAKgB,GAAGC,iBAAiB,mBAClDyC,EAAe1D,KAAKW,SAAW8C,EAAcA,EAAYE,MAAM,EAAG3D,KAAK4D,iBACvEC,EAAiBJ,EAAY7B,OAAS8B,EAAa9B,OAEzD,OACEkC,EAAAA,EAAAA,GAAA,OAAKC,MAAM,gBACRL,EAAaJ,KAAInC,IAAS2C,EAAAA,EAAAA,GAAA,QAAM/B,KAAMZ,EAAMC,aAAa,aACxDyC,EAAiB,GAAK7D,KAAKW,YAC3BmD,EAAAA,EAAAA,GAAA,OAAKC,MAAM,eAAeC,QAAShE,KAAKU,iBACtCoD,EAAAA,EAAAA,GAAA,YAAUG,IAAKjE,KAAKW,SAASuD,WAAYC,KAAMnE,KAAKW,SAAW,gBAAkB,qBACjFmD,EAAAA,EAAAA,GAAA,YAAUM,KAAK,IAAIC,KAAK,GAAGhD,OAAO,SAASiD,QAAQ,aAAaC,UAAU,GACvEvE,KAAKW,SAAW,YAAc,QAAQkD,W,qIDjKrC,6F","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/list/list.scss?tag=ifx-list&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/list/list.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n\n.link-wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: tokens.$ifxSpace100;\n  margin-top: tokens.$ifxSpace100;\n}","import { Component, h, Prop, State, Event, EventEmitter, Element, Watch } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-list',\n  styleUrl: 'list.scss',\n  shadow: true,\n})\nexport class List {\n  @Element() private el: HTMLElement;\n  @State() expanded: boolean = false;\n  @State() showMore = false;\n  @State() selectedCount: number = 0;\n  @State() totalItems = 0;\n  @Prop() name = \"\";\n  @Prop() maxVisibleItems = 6;\n  @Prop() type: string = \"checkbox\"; //default value\n  @Prop({ mutable: true }) resetTrigger: boolean;\n  @State() internalResetTrigger: boolean = false;\n\n  @Event() ifxListUpdate: EventEmitter;\n\n  observer: MutationObserver;\n\n  @Watch('type')\n  handleTypeChange(newType: string) {\n    this.updateListEntriesType(newType);\n  }\n\n  @Watch('resetTrigger')\n  resetTriggerChanged(newValue: boolean) {\n    if (newValue) {\n      this.reset();\n      this.resetTrigger = false; // Resetting the trigger after the action is performed\n    }\n  }\n\n  componentWillLoad() {\n    this.setupListenersAndObservers();\n    this.initializeList();\n  }\n\n  disconnectedCallback() {\n    this.cleanupListenersAndObservers();\n  }\n\n  reset() {\n    this.resetListEntries();\n    this.expanded = false;\n    this.showMore = false;\n    this.selectedCount = 0;\n    this.ifxListUpdate.emit({ name: this.name, selectedItems: [] });\n  }\n\n\n  render() {\n    return this.renderList();\n  }\n\n\n    // Refactored methods for clarity and maintainability\n    private setupListenersAndObservers() {\n      this.el.addEventListener('ifxListEntryChange', this.handleCheckedChange);\n      this.observer = new MutationObserver(this.handleMutation);\n      this.observer.observe(this.el, { childList: true });\n    }\n\n    private cleanupListenersAndObservers() {\n      this.el.removeEventListener('ifxListEntryChange', this.handleCheckedChange);\n      this.observer.disconnect();\n    }\n  \n    private initializeList() {\n      this.selectedCount = this.getSelectedItems(this.el).length;\n      this.totalItems = this.getTotalItems();\n      this.updateListEntriesType(this.type);\n      this.checkRadioButtonConstraint();\n    }\n\n    \n  private updateListEntriesType(newType: string) {\n    const listEntries = Array.from(this.el.querySelectorAll('ifx-list-entry'));\n    listEntries.forEach(entry => entry.setAttribute('type', newType));\n  }\n\n  private resetListEntries() {\n    const listEntries = Array.from(this.el.querySelectorAll('ifx-list-entry'));\n    listEntries.forEach(entry => {\n      entry.value = false;\n      entry.setAttribute('value', 'false');\n    });\n  }\n\n  private handleMutation = () => {\n    const newTotalItems = this.getTotalItems();\n    if (newTotalItems !== this.totalItems) {\n      this.totalItems = newTotalItems;\n      this.handleCheckedChange();\n    }\n    this.updateListEntriesType(this.type);\n  }\n\n  private checkRadioButtonConstraint() {\n    if (this.type === 'radio-button' && this.selectedCount > 1) {\n      this.resetListEntries(); // Reset all and let the user select again\n      this.selectedCount = 0;\n    }\n  }\n\n  getTotalItems() {\n    return this.el.querySelectorAll('ifx-list-entry').length;\n  }\n\n\n  toggleList = (event: MouseEvent) => {\n    event.stopPropagation();\n    this.expanded = !this.expanded;\n  }\n\n  toggleShowMore = (event: MouseEvent) => {\n    event.stopPropagation();\n    this.showMore = !this.showMore;\n  }\n\n  getSelectedItems(el: HTMLElement) {\n    return Array.from(el.querySelectorAll('ifx-list-entry'))\n      .filter(entry => entry.getAttribute('value') === 'true')\n      .map(entry => ({\n        label: entry.getAttribute('label'),\n        value: entry.getAttribute('value'),\n        type: entry.getAttribute('type'),\n        element: entry\n      }));\n  }\n\n\n  handleCheckedChange = (event?: CustomEvent) => {\n    // If the type of the changed entry is 'radio-button' and its value is true, deselect all other radio buttons\n    if (event && event.detail.type === 'radio-button' && event.detail.value) {\n      const otherRadioButtons = Array.from(this.el.querySelectorAll('ifx-list-entry'))\n        .filter(entry => entry.getAttribute('type') === 'radio-button' && entry !== event.target);\n      otherRadioButtons.forEach(radioButton => radioButton.setAttribute('value', 'false'));\n    }\n\n    const selectedItems = this.getSelectedItems(this.el);\n    this.selectedCount = selectedItems.length;\n\n    this.ifxListUpdate.emit({ name: this.name, selectedItems });\n  }\n\n  private renderList() {\n    const listEntries = Array.from(this.el.querySelectorAll('ifx-list-entry'));\n    const visibleItems = this.showMore ? listEntries : listEntries.slice(0, this.maxVisibleItems);\n    const remainingItems = listEntries.length - visibleItems.length;\n\n    return (\n      <div class=\"list-wrapper\">\n        {visibleItems.map(entry => <slot name={entry.getAttribute('slot')}></slot>)}\n        {(remainingItems > 0 || this.showMore) && (\n          <div class=\"link-wrapper\" onClick={this.toggleShowMore}>\n            <ifx-icon key={this.showMore.toString()} icon={this.showMore ? 'chevron-up-12' : 'chevron-down-12'} />\n            <ifx-link size=\"s\" href=\"\" target=\"_blank\" variant=\"underlined\" disabled={false} >\n              {this.showMore ? 'Show less' : `Show ${remainingItems} more`}\n            </ifx-link>\n          </div>\n        )}\n      </div>\n    );\n  }\n}"],"names":["List","handleMutation","newTotalItems","this","getTotalItems","totalItems","handleCheckedChange","updateListEntriesType","type","toggleList","event","stopPropagation","expanded","toggleShowMore","showMore","detail","value","Array","from","el","querySelectorAll","filter","entry","getAttribute","target","forEach","radioButton","setAttribute","selectedItems","getSelectedItems","selectedCount","length","ifxListUpdate","emit","name","handleTypeChange","newType","resetTriggerChanged","newValue","reset","resetTrigger","componentWillLoad","setupListenersAndObservers","initializeList","disconnectedCallback","cleanupListenersAndObservers","resetListEntries","render","renderList","addEventListener","observer","MutationObserver","observe","childList","removeEventListener","disconnect","checkRadioButtonConstraint","map","label","element","listEntries","visibleItems","slice","maxVisibleItems","remainingItems","h","class","onClick","key","toString","icon","size","href","variant","disabled"],"sourceRoot":""}