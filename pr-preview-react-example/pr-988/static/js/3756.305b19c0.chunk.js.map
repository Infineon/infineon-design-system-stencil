{"version":3,"file":"static/js/3756.305b19c0.chunk.js","mappings":"iKAAA,MCcaA,EAAI,M,8CAOgB,E,YAOc,E,eAKG,E,YAKrB,E,kBAK8B,CAAEC,WAAY,EACZC,gBAAgB,EAChBC,QAAS,UACTC,kBAAmB,Q,mCAU9C,C,CAG9BC,YAAAA,CAAaC,GACkBA,EAAMC,OAAOC,qBACbC,KAAKC,QAAUD,KAAKE,QAC3CF,KAAKG,WAAY,E,CAKzBC,iBAAAA,CAAkBC,GACdL,KAAKM,OAAUD,EAAgBb,aAAeQ,KAAKC,M,CAIvDM,gBAAAA,GACQP,KAAKM,QAAUN,KAAKE,QACpBF,KAAKE,OAAQ,E,CAKrBM,eAAAA,GACsC,YAA9BR,KAAKS,aAAaf,UAA0BM,KAAKG,WAAaH,KAAKU,WACnEV,KAAKS,aAAaE,cAAcX,KAAKC,O,CAK7CW,iBAAAA,CAAkBf,GACoB,YAA9BG,KAAKS,aAAaf,UAA0BM,KAAKG,WAAaH,KAAKU,WAA2B,UAAdb,EAAMgB,KACtFb,KAAKS,aAAaE,cAAcX,KAAKC,O,CAQ7Ca,MAAAA,GACI,OACIC,EAAAA,EAAAA,GAAA,OAAAF,IAAA,4DAAqBb,KAAKM,QAAS,OAAa,iBAC3BN,KAAKM,SAAUN,KAAKU,SACrCM,MAAS,gBAAgC,IAAhBhB,KAAKC,OAAe,aAAc,gCACjDD,KAAKE,MAAQ,QAAS,+BACtBF,KAAKS,aAAaf,oCAClBM,KAAKU,SAAW,WAAY,+BAC5BV,KAAKiB,SAAW,YAAa,yCACnBjB,KAAKS,aAAad,8CAC5BK,KAAKM,OAAS,SAAW,+BACzBN,KAAKG,UAAY,YAAc,OAEzCY,EAAAA,EAAAA,GAAA,OAAAF,IAAA,2CAAKG,MAAQ,qBAEsB,YAA9BhB,KAAKS,aAAaf,UAAyBqB,EAAAA,EAAAA,GAAA,QAAMC,MAAQ,qBAIvB,YAA9BhB,KAAKS,aAAaf,WAA2BM,KAAKE,OAAUF,KAAKE,OAASF,KAAKM,UAChFS,EAAAA,EAAAA,GAAA,OAAKC,MAAQ,cACPhB,KAAKS,aAAahB,gBAAmBO,KAAKU,UAAaV,KAAKM,OAAwB,GAAdN,KAAKC,OAC3ED,KAAKU,WAAaV,KAAKM,SAAWS,EAAAA,EAAAA,GAAA,YAAUG,KAAK,YAClDlB,KAAKM,SAAUS,EAAAA,EAAAA,GAAA,QAAMC,MAAQ,kBAKP,YAA7BhB,KAAKS,aAAaf,SAAwBM,KAAKE,QAAUF,KAAKM,SAAWS,EAAAA,EAAAA,GAAA,YAAUG,KAAK,eAG3D,YAA9BlB,KAAKS,aAAaf,UAAyBqB,EAAAA,EAAAA,GAAA,QAAMC,MAAS,qBAAoBhB,KAAKM,OAAS,SAAW,QAKzE,YAA9BN,KAAKS,aAAaf,SAAwD,YAA9BM,KAAKS,aAAaf,UAA0BM,KAAKM,QAAUN,KAAKC,SAAWD,KAAKS,aAAajB,WAAW,MACrJuB,EAAAA,EAAAA,GAAA,OAAKI,SAAUnB,KAAKU,WAAaV,KAAKM,OAAS,GAAK,EAChDU,MAAS,eAA4C,YAA9BhB,KAAKS,aAAaf,QAAyBM,KAAKM,OAAS,aAAe,aAAgB,IAC/Gc,QAASA,KAAQpB,KAAKQ,iBAAiB,EACvCa,UAAYC,IAAQtB,KAAKY,kBAAkBU,EAAE,GAGV,YAA9BtB,KAAKS,aAAaf,UACnBqB,EAAAA,EAAAA,GAAA,YAAUrB,QAAQ,eACdqB,EAAAA,EAAAA,GAAA,cAIuB,YAA9Bf,KAAKS,aAAaf,SAA2BM,KAAKM,OAAqB,GAAX,SAC9B,YAA9BN,KAAKS,aAAaf,UAAyBqB,EAAAA,EAAAA,GAAA,c,wGDlJpD,2zE","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/stepper/step/step.scss?tag=ifx-step&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/stepper/step/step.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../../global/font.scss\";\n\n.step-wrapper{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: tokens.$ifxSize100;\n    max-width: tokens.$ifxSize2000;\n    font: tokens.$ifxBodyBody03;\n    \n    &.compact{\n        gap: 0;\n        max-width: 100%;\n        .step-label{\n            max-width: 100%;\n        }\n        \n        &.indicator-left {\n            align-items: flex-end;\n            text-align: right;\n        }\n        \n        &.indicator-right {\n            align-items: flex-start;\n        }\n        \n        .step-label{\n            cursor: auto;\n        }\n    }\n\n    .step-label{\n        max-width: tokens.$ifxSize1800;\n        color: tokens.$ifxColorEngineering400; \n        word-wrap: break-word;\n        &.curr-label{\n            font: tokens.$ifxHeadingHeadingCompact04; \n        }\n        &.next-label{\n            font: tokens.$ifxBodyBody05;\n        }\n    }\n    \n    &.first-step{\n        .step-connector-l{\n            height: 0px;\n        }\n    }\n    \n    &.last-step{\n        .step-connector-r{\n            height: 0px;\n        }\n    }\n    \n    &.complete, &.active{\n        .step-connector-l, .step-connector-r, .step-icon {\n            background: tokens.$ifxColorOcean500;\n            &.active, &.error {\n                background: tokens.$ifxColorEngineering400;\n            }\n        }\n        .step-label{\n            color: tokens.$ifxColorBaseBlack;\n        }\n    } \n    \n    &.complete, &.clickable{\n        .step-label{\n            cursor: pointer;\n        }\n    }\n    \n    &.active{\n        .step-label{\n            cursor: auto;\n        }\n    }\n\n    &.error:not(.active){\n        color: tokens.$ifxColorRed500;\n        .step-label{\n            color: tokens.$ifxColorRed500;\n        }\n    }\n}\n\n.active-indic{\n    width: tokens.$ifxSize200;\n    height: tokens.$ifxSize200;\n    border-radius: tokens.$ifxBorderRadiusRound;\n    background: white;\n}\n\n.step-icon-wrapper{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n}\n\n.step-icon{\n    width: tokens.$ifxSize300;\n    height: tokens.$ifxSize300;\n    background-color: tokens.$ifxColorEngineering400;\n    border-radius: tokens.$ifxBorderRadiusRound;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n}\n\n.step-connector-r, .step-connector-l{\n    height: 2px;\n    width: tokens.$ifxSize800 + tokens.$ifxSize50;\n    background-color: tokens.$ifxColorEngineering400;\n}","import { h, \n         Component, \n         Listen, \n         Prop, \n         State, \n         Watch } from \"@stencil/core\";\nimport { StepperState } from \"../interfaces\";\n\n@Component({\n    tag     : 'ifx-step',\n    styleUrl: 'step.scss',\n    shadow  : true\n})\n\nexport class Step {\n\n    /**\n     * Sets the complete status of the step.\n     * \n     * @Default false\n     */\n    @Prop() complete?: boolean = false;\n\n    /**\n     * Sets the error status of the step.\n     * \n     * @Default false\n     */\n    @Prop({ mutable: true }) error?: boolean = false;\n\n    /**\n     * An internal prop to identify the last step of the stepper.\n     */\n    @Prop({ reflect: false }) lastStep: boolean = false;\n\n    /**\n     * An unique step id assigned to every step in the stepper.\n     */\n    @Prop() stepId: number = 1;\n\n    /**\n     * An internal prop to store the current state of the parent (stepper) components.\n     */\n    @Prop({ reflect: false }) stepperState: StepperState = { activeStep: 1, \n                                                             showStepNumber: false, \n                                                             variant: 'default', \n                                                             indicatorPosition: 'left' };\n\n    /**\n     * Stores the active state of the step.\n     */\n    @State() active: boolean;\n\n    /**\n     * Internal state which sets to true when the step is clickable.\n     */\n    @State() clickable: boolean = false;\n\n    @Listen('ifxChange', { target: 'document' })\n    onStepChange(event: CustomEvent) {\n        const previousActiveStep = event.detail.previousActiveStep;\n        if (previousActiveStep === this.stepId && this.error) {\n            this.clickable = true;\n        }\n    } \n\n    @Watch('stepperState')\n    updateCurrentStep(newStepperState) {\n        this.active = (newStepperState.activeStep === this.stepId)\n    }\n\n    @Watch('active')\n    updateErrorState(){\n        if (this.active && this.error) {\n            this.error = false;\n        }\n    }\n\n    /* Handle the click event on step label. */\n    handleStepClick() {\n        if (this.stepperState.variant === 'default' && (this.clickable || this.complete)) {\n            this.stepperState.setActiveStep(this.stepId)\n        } \n    }\n\n    /* Handle the 'Enter' key press on step label. */\n    handleStepKeyDown(event: KeyboardEvent) {\n        if (this.stepperState.variant === 'default' && (this.clickable || this.complete) && event.key === 'Enter') {\n            this.stepperState.setActiveStep(this.stepId)\n        } \n    }\n    \n    /**\n     * Lifecycle methods\n     */\n\n    render() {\n        return (\n            <div aria-current = {this.active ? 'step': false}\n                aria-disabled = {this.active || this.complete ? false : true}\n                class = {`step-wrapper ${this.stepId === 1 ? 'first-step': ''} \n                        ${this.error ? 'error': ''}\n                        ${this.stepperState.variant}\n                        ${this.complete ? 'complete': ''}\n                        ${this.lastStep ? 'last-step': ''}\n                        indicator-${this.stepperState.indicatorPosition}\n                        ${this.active ? 'active' : ''}\n                        ${this.clickable ? 'clickable' : ''}`}>\n\n                <div class = 'step-icon-wrapper'>\n                    {/* Left connector */}\n                    {this.stepperState.variant === 'default' && <span class = 'step-connector-l'/>}\n\n                    {\n                        /* Active, complete or incomplete */\n                        (this.stepperState.variant === 'default' && (!this.error || (this.error && this.active))) && \n                        <div class = 'step-icon'>\n                            {(this.stepperState.showStepNumber && !this.complete && !this.active) ? this.stepId : ''}\n                            {(this.complete && !this.active) && <ifx-icon icon='check16'></ifx-icon>}\n                            {this.active && <span class = 'active-indic'></span>}\n                        </div>\n                    }\n\n                    {/* Special error state */}\n                    {(this.stepperState.variant ==='default' && this.error && !this.active) && <ifx-icon icon='warningf24'></ifx-icon>}\n                    \n                    {/* Right connector */}\n                    {this.stepperState.variant === 'default' && <span class = {`step-connector-r ${this.active ? 'active' : ''}`}/>}\n                </div>\n\n                {\n                    /* Step labels */\n                    (this.stepperState.variant === 'default' || (this.stepperState.variant === 'compact' && (this.active || this.stepId === this.stepperState.activeStep+1))) && \n                    <div tabIndex={this.complete && !this.active ? 0 : -1} \n                        class = {`step-label ${this.stepperState.variant === 'compact' ? (this.active ? 'curr-label' : 'next-label') : ''}`} \n                        onClick={() => { this.handleStepClick() }} \n                        onKeyDown={(e) => { this.handleStepKeyDown(e) }}>\n\n                        {\n                            (this.stepperState.variant === 'default') &&\n                            <ifx-link variant='underlined'>\n                                <slot/>\n                            </ifx-link>\n                        }\n\n                        {this.stepperState.variant === 'compact' &&  !this.active  ? 'Next: ' : ''}\n                        {this.stepperState.variant === 'compact' && <slot/>}\n                    </div>\n                }\n\n            </div>\n        );\n    };\n}\n"],"names":["Step","activeStep","showStepNumber","variant","indicatorPosition","onStepChange","event","detail","previousActiveStep","this","stepId","error","clickable","updateCurrentStep","newStepperState","active","updateErrorState","handleStepClick","stepperState","complete","setActiveStep","handleStepKeyDown","key","render","h","class","lastStep","icon","tabIndex","onClick","onKeyDown","e"],"sourceRoot":""}