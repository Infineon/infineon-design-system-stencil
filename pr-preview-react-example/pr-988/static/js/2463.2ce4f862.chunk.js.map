{"version":3,"file":"static/js/2463.2ce4f862.chunk.js","mappings":"8KAAA,MCOaA,EAAkB,M,wGAe7B,KAAAC,sBAAyBC,IACvBC,KAAKC,mBAAmBF,EAAM,EAGhC,KAAAG,mBAAsBH,IAEpBC,KAAKC,mBAAmBF,EAAM,EAIhC,KAAAE,mBAAsBF,IAEpB,MAAMI,EAAqB,IAAIH,KAAKI,iBAGpC,GAAmB,0BAAfL,EAAMM,KAAkC,CAE1C,MAAM,WAAEC,EAAU,YAAEC,GAAgBR,EAAMS,OAGpCC,EAAsBN,EAAmBO,WAAUC,GAA4B,kBAAXA,GAAuBA,EAAOC,kBAAoBN,KAE/F,IAAzBG,EAEFN,EAAmBM,GAAqBI,MAAQN,EAGhDJ,EAAmBW,KAAK,CAAEF,gBAAiBN,EAAYO,MAAON,G,MAE3D,GAAmB,6BAAfR,EAAMM,KAAqC,CACpD,MAAM,gBAAEO,EAAe,cAAEG,GAAkBhB,EAAMS,OAG3CC,EAAsBN,EAAmBO,WAAUC,GAAUA,EAAOC,kBAAoBA,KAEjE,IAAzBH,EAEFN,EAAmBM,GAAuB,CAAEG,kBAAiBG,iBAG7DZ,EAAmBW,KAAK,CAAEF,kBAAiBG,iB,CAK/Cf,KAAKI,gBAAkBD,EAGvBH,KAAKgB,yBAAyBC,KAAKjB,KAAKI,gBAAgB,E,qBA7D6F,E,CAGvJc,iBAAAA,GACElB,KAAKmB,GAAGC,iBAAiB,2BAA4BpB,KAAKF,uBAC1DE,KAAKmB,GAAGC,iBAAiB,wBAAyBpB,KAAKE,mB,CAGzDmB,mBAAAA,GACErB,KAAKmB,GAAGG,oBAAoB,2BAA4BtB,KAAKF,uBAC7DE,KAAKmB,GAAGG,oBAAoB,wBAAyBtB,KAAKE,mB,CAsD5DqB,MAAAA,GACE,OACEC,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAM,sBACTF,EAAAA,EAAAA,GAAA,QAAAC,IAAA,2CAAME,KAAK,mBACXH,EAAAA,EAAAA,GAAA,QAAAC,IAAA,2CAAME,KAAK,qB,wCD7EQ,mG","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/filter-type-group/filter-type-group.scss?tag=ifx-filter-type-group&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/filter-type-group/filter-type-group.tsx"],"sourcesContent":["@use \"~@infineon/design-system-tokens/dist/tokens\";\n\n.filter-type-group {\n  display: flex;\n  width: 260px;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: tokens.$ifxSpace100;\n}","import { Component, h, State, Event, EventEmitter, Element } from '@stencil/core';\n\n@Component({\n  tag: 'ifx-filter-type-group',\n  styleUrl: 'filter-type-group.scss',\n  shadow: true,\n})\nexport class IfxFilterTypeGroup {\n  @Element() el: HTMLElement;\n  @State() selectedOptions: Array<{ filterGroupName: string, selectedItems?: Array<{ filterName: string, value: boolean | string }>, value?: string }> = [];\n  @Event() ifxFilterTypeGroupChange: EventEmitter;\n\n  componentWillLoad() {\n    this.el.addEventListener('ifxFilterAccordionChange', this.handleAccordionChange);\n    this.el.addEventListener('ifxFilterSearchChange', this.handleSearchChange);\n  }\n\n  componentWillUnload() {\n    this.el.removeEventListener('ifxFilterAccordionChange', this.handleAccordionChange);\n    this.el.removeEventListener('ifxFilterSearchChange', this.handleSearchChange);\n  }\n\n  handleAccordionChange = (event: CustomEvent) => {\n    this.handleFilterChange(event);\n  }\n\n  handleSearchChange = (event: CustomEvent) => {\n    // Call handleFilterChange with the created CustomEvent object\n    this.handleFilterChange(event);\n  }\n\n\n  handleFilterChange = (event: CustomEvent) => {\n    // Create a new array to hold the new state\n    const newSelectedOptions = [...this.selectedOptions];\n\n    // Check the type of the event\n    if (event.type === 'ifxFilterSearchChange') {\n      // Handle the ifxFilterSearchChange event\n      const { filterName, filterValue } = event.detail;\n\n      // Find the existing filter with the same filterName\n      const existingOptionIndex = newSelectedOptions.findIndex(option => typeof option !== 'string' && option.filterGroupName === filterName);\n\n      if (existingOptionIndex !== -1) {\n        // If an existing filter is found, update its value\n        newSelectedOptions[existingOptionIndex].value = filterValue;\n      } else {\n        // If no existing filter is found, append the new filter\n        newSelectedOptions.push({ filterGroupName: filterName, value: filterValue });\n      }\n    } else if (event.type === 'ifxFilterAccordionChange') {\n      const { filterGroupName, selectedItems } = event.detail;\n\n      // Find the existing filter group with the same filterGroupName\n      const existingOptionIndex = newSelectedOptions.findIndex(option => option.filterGroupName === filterGroupName);\n\n      if (existingOptionIndex !== -1) {\n        // If an existing filter group is found, update its selectedItems\n        newSelectedOptions[existingOptionIndex] = { filterGroupName, selectedItems };\n      } else {\n        // If no existing filter group is found, append the new filter group\n        newSelectedOptions.push({ filterGroupName, selectedItems });\n      }\n    }\n\n    // Update the state with the new selected options\n    this.selectedOptions = newSelectedOptions;\n\n    // Emit the entire selectedOptions array\n    this.ifxFilterTypeGroupChange.emit(this.selectedOptions);\n  }\n\n  render() {\n    return (\n      <div class=\"filter-type-group\">\n        <slot name=\"filter-search\" />\n        <slot name=\"filter-accordion\" />\n      </div>\n    );\n  }\n}"],"names":["IfxFilterTypeGroup","handleAccordionChange","event","this","handleFilterChange","handleSearchChange","newSelectedOptions","selectedOptions","type","filterName","filterValue","detail","existingOptionIndex","findIndex","option","filterGroupName","value","push","selectedItems","ifxFilterTypeGroupChange","emit","componentWillLoad","el","addEventListener","componentWillUnload","removeEventListener","render","h","key","class","name"],"sourceRoot":""}