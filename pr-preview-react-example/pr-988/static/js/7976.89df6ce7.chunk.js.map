{"version":3,"file":"static/js/7976.89df6ce7.chunk.js","mappings":"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","sources":["../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/interfaces.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/buttonCellRenderer.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/customNoRowsOverlay.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/customLoadingOverlay.ts","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/table.scss?tag=ifx-table&encapsulation=shadow","../node_modules/@infineon/infineon-design-system-stencil/dist/esm/src/components/table-advanced-version/table.tsx"],"sourcesContent":["export interface ButtonInterface {\n  disabled?: boolean;\n  variant?: string,\n  size?: string,\n  target?: string,\n  color?: string,\n  text: string\n}\n\nexport const ButtonKeys: Array<keyof ButtonInterface> = ['disabled', 'variant', 'size', 'target', 'color', 'text'];\n\n\n","import { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport { ButtonInterface, ButtonKeys } from './interfaces';\n\nexport class ButtonCellRenderer implements ICellRendererComp {\n  eGui!: HTMLDivElement;\n  eButton: any;\n  eValue: any;\n  cellValue: any;\n  eventListener!: () => void;\n\n  // gets called once before the renderer is used\n  init(params: ICellRendererParams) {\n    console.log(\"render cell\")\n\n    const config = params.data.button;\n    this.eGui = document.createElement('div');\n\n    if (this.hasRequiredKeys(config)) {\n      // create the cell\n      this.eGui.innerHTML = `\n        <span>\n          <ifx-button\n          disabled=${config.disabled}\n          variant=${config.variant}\n          size=${config.size}\n          target=${config.target}\n          color=${config.color}>\n          ${config.text}\n        </ifx-button>\n        </span>\n       `;\n\n      // get references to the elements we want\n      this.eButton = this.eGui.querySelector('ifx-button');\n    }\n    // // add event listener to button\n    // this.eventListener = () => alert('Button clicked!');\n    // this.eButton?.addEventListener('click', this.eventListener);\n    else {\n      this.eGui.innerHTML = `\n      <span>\n        ${config}\n      </span>\n     `;\n    }\n  }\n\n\n  getGui() {\n    return this.eGui;\n  }\n\n  // gets called whenever the cell refreshes\n  refresh(params: ICellRendererParams) {\n    // set value into cell again\n    const config = params.data.button;\n    this.eGui = document.createElement('div');\n    if (this.hasRequiredKeys(config)) {\n      // create the cell\n      this.eGui.innerHTML = `\n        <span>\n          <ifx-button\n          disabled=${config.disabled}\n          variant=${config.variant}\n          size=${config.size}\n          target=${config.target}\n          color=${config.color}>\n          ${config.text}\n        </ifx-button>\n        </span>\n       `;\n\n      // get references to the elements we want\n      this.eButton = this.eGui.querySelector('ifx-button');\n    }\n    // // add event listener to button\n    // this.eventListener = () => alert('Button clicked!');\n    // this.eButton?.addEventListener('click', this.eventListener);\n    else {\n      this.eGui.innerHTML = `\n      <span>\n        ${config}\n      </span>\n     `;\n    }\n    // return true to tell the grid we refreshed successfully\n    return true;\n  }\n\n  // gets called when the cell is removed from the grid\n  destroy() {\n    // do cleanup, remove event listener from button\n    if (this.eButton) {\n      // check that the button element exists as destroy() can be called before getGui()\n      this.eButton.removeEventListener('click', this.eventListener);\n    }\n  }\n\n  getFieldValueToDisplay(params: ICellRendererParams) {\n    return params.valueFormatted ? params.valueFormatted : params.value;\n  }\n\n  isObject(value: any): value is Object {\n    return value && typeof value === 'object' && value.constructor === Object;\n  }\n\n  hasRequiredKeys(obj: any): obj is ButtonInterface {\n    if (!this.isObject(obj)) return false;\n    return ButtonKeys.every(key => key in obj);\n  }\n\n\n}","import { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport class CustomNoRowsOverlay implements ICellRendererComp {\n  eGui!: HTMLElement;\n\n  init(params: ICellRendererParams & { noRowsMessageFunc: () => string }) {\n    this.eGui = document.createElement('div');\n    this.eGui.innerHTML = `\n            <div role=\"presentation\" class=\"ag-overlay-loading-center\" >\n               ${params.noRowsMessageFunc()}\n            </div>\n        `;\n  }\n\n  getGui() {\n    return this.eGui;\n  }\n\n  refresh(_params: ICellRendererParams): boolean {\n    return false;\n  }\n}","import { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport class CustomLoadingOverlay implements ICellRendererComp {\n  eGui!: HTMLElement;\n\n  init(_params: ICellRendererParams & { loadingMessage: string }) {\n    this.eGui = document.createElement('div');\n    this.eGui.innerHTML = `<div class=\"ag-overlay-loading-center\" role=\"presentation\">\n<ifx-spinner></ifx-spinner>\n            </div>`;\n  }\n\n  getGui() {\n    return this.eGui;\n  }\n\n  refresh(_params: ICellRendererParams): boolean {\n    return false;\n  }\n}","@use \"~@infineon/design-system-tokens/dist/tokens\";\n@use \"../../global/font.scss\";\n\n@import \"~ag-grid-community/styles/ag-grid.css\";\n\n\n.ifx-table-wrapper .ag-root-wrapper-body {\n  height: auto !important;\n  min-height: 100px !important;\n  min-width: 100px;\n}\n\n.ifx-ag-grid {\n  display: grid;\n  height: 100%;\n  width: 100%;\n  min-width: 100px;\n  padding-bottom: tokens.$ifxSpace100;\n}\n\n\n.ifx-ag-grid .ag-header-cell::after {\n  outline: none !important;\n  border: none !important;\n  box-shadow: none !important;\n}\n\n.ifx-ag-grid .ag-header-cell:focus {\n  outline: none !important;\n}\n\n.ifx-ag-grid *:not(.ag-header-cell):focus {\n  outline: none;\n}\n\n\n\n.ag-overlay-loading-center {\n  border: none;\n  background: none;\n  border-radius: none;\n  box-shadow: none;\n}\n\n\n.ag-root-wrapper {\n  border: none;\n}\n\n\n\n.ag-header {\n  background-color: tokens.$ifxColorEngineering100;\n  border-bottom: none;\n\n  &.ag-header-active {\n    outline: none !important;\n    border-color: #0A8276 !important;\n  }\n}\n\n.ag-header-cell {\n  padding-left: 16px;\n  padding-right: 16px;\n  gap: 4px;\n}\n\n\n.ag-header-cell-focus {\n  border: none !important;\n  outline: none !important;\n}\n\n.ag-header-cell-text {\n  font-size: 13px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 20px;\n  color: tokens.$ifxColorBaseBlack;\n  font-family: var(--ifx-font-family);\n\n}\n\n.ag-row-focus {\n  background-color: inherit !important;\n  /* Reset the hover color to the row's original color */\n}\n\n.ag-row-hover {\n  background-color: tokens.$ifxColorBaseWhite !important; //inherit !important;\n  /* Reset the hover color to the row's original color */\n}\n\n\n.ag-cell-focus {\n  border: none !important;\n  outline: none !important;\n  background-color: inherit !important;\n}\n\n\n\n.ag-row {\n  background-color: tokens.$ifxColorBaseWhite;\n  border-bottom: 1px solid tokens.$ifxColorEngineering200;\n  font-size: 13px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 20px;\n  z-index: 1; //ensure the stacking order when used inside js frameworks\n}\n\n.ag-row-odd {\n  background-color: tokens.$ifxColorBaseWhite;\n}\n\n.ag-cell {\n  display: flex;\n  padding-left: 16px;\n  padding-right: 16px;\n  align-items: center;\n\n}\n\n.ag-ltr .ag-sort-indicator-icon {\n  padding-left: 0px;\n  vertical-align: bottom;\n  line-height: 12px;\n}\n\n.unsort-icon-custom-color {\n  color: tokens.$ifxColorEngineering400;\n}","import { Component, h, Host, Method, Element, Prop, State } from '@stencil/core';\nimport classNames from 'classnames';\n\nimport { createGrid, FirstDataRenderedEvent, GridApi, GridOptions } from 'ag-grid-community';\nimport { ButtonCellRenderer } from './buttonCellRenderer';\nimport { CustomNoRowsOverlay } from './customNoRowsOverlay';\nimport { CustomLoadingOverlay } from './customLoadingOverlay';\n\n\n@Component({\n  tag: 'ifx-table',\n  styleUrl: 'table.scss',\n  shadow: true\n})\nexport class Table {\n  gridOptions: GridOptions;\n  gridApi: GridApi;\n  @State() currentPage: number = 1;\n  @Prop() cols: any[] | string;\n  @Prop() rows: any[] | string;\n  @State() rowData: any[] = [];\n  @State() colData: any[] = [];\n  @State() filterOptions: { [key: string]: string[] } = {};\n  @State() currentFilters = {};\n\n  allRowData: any[] = [];\n  @Prop() rowHeight: string = 'default';\n  @Prop() tableHeight: string = 'auto';\n  @Prop() pagination: boolean = true;\n  @Prop() paginationPageSize: number = 10;\n  @Prop() showLoading: boolean = false;\n  private container: HTMLDivElement;\n  @Element() host: HTMLElement;\n  originalRowData: any[] = [];\n\n\n  updateFilterOptions() {\n    const options = {};\n    for (let col of this.colData) {\n      options[col.field] = [...new Set(this.rowData.map(row => row[col.field]))];\n      // console.log(`Options for ${col.field}:`, options[col.field]);\n    }\n    this.filterOptions = options;\n  }\n\n\n  handleFilterChange(event: CustomEvent) {\n    console.log(\"filter change\", event.detail);\n    const { filterName, filterValues, type } = event.detail;\n\n    const selectedValues = filterValues.map(option => option?.value || option);\n    if (selectedValues.length === 0) {\n      delete this.currentFilters[filterName];\n    } else {\n      this.currentFilters = {\n        ...this.currentFilters, [filterName]: { filterValues: selectedValues, type: type }\n      }\n    }\n\n    this.allRowData = [...this.originalRowData];\n\n    this.filterData();\n\n    const startIndex = (this.currentPage - 1) * this.paginationPageSize;\n    const endIndex = startIndex + this.paginationPageSize;\n    const visibleRowData = this.allRowData.slice(startIndex, endIndex);\n\n    this.rowData = visibleRowData;\n\n    this.gridApi.setGridOption('rowData', this.rowData);\n  }\n\n  filterData() {\n    let filteredData = [...this.allRowData];\n\n    for (let filterName in this.currentFilters) {\n      let selectedValues = this.currentFilters[filterName].filterValues;\n      let filterType = this.currentFilters[filterName].type;\n\n      filteredData = this.filterByType(filteredData, filterName, selectedValues, filterType);\n    }\n\n    this.allRowData = filteredData;\n  }\n\n  filterByType(data, filterName, selectedValues, filterType) {\n    if (filterType === 'text') {\n      return data.filter(row => selectedValues.some(value =>\n        String(row[filterName]).toLowerCase().startsWith(String(value).toLowerCase())\n      ));\n    } else {\n      return data.filter(row => selectedValues.includes(String(row[filterName])));\n    }\n  }\n\n\n  @Method()\n  async onBtShowLoading() {\n    this.gridApi.showLoadingOverlay();\n  }\n\n  componentWillLoad() {\n    this.rowData = this.getRowData();\n    this.colData = this.getColData();\n    this.updateFilterOptions();\n\n    this.gridOptions = {\n      rowHeight: this.rowHeight === 'default' ? 40 : 32,\n      headerHeight: 40,\n      defaultColDef: {\n        resizable: true,\n      },\n      suppressDragLeaveHidesColumns: true,\n      onFirstDataRendered: this.onFirstDataRendered.bind(this),\n      columnDefs: this.colData,\n      rowData: this.rowData,\n      loadingOverlayComponent: CustomLoadingOverlay,\n      noRowsOverlayComponent: CustomNoRowsOverlay,\n      noRowsOverlayComponentParams: {\n        noRowsMessageFunc: () =>\n          'No rows found' //at: ' + new Date().toLocaleTimeString(),\n      },\n      icons: {\n        sortAscending: '<ifx-icon icon=\"arrowtriangleup16\"></ifx-icon>',\n        sortDescending: '<ifx-icon icon=\"arrowtriangledown16\"></ifx-icon>',\n        sortUnSort: '<a class=\"unsort-icon-custom-color\"><ifx-icon icon=\"arrowtrianglevertikal16\"></ifx-icon></a>'\n      },\n      rowDragManaged: this.colData.some(col => col.dndSource === true) ? true : false,\n      animateRows: this.colData.some(col => col.dndSource === true) ? true : false,\n    };\n  }\n\n  componentDidRender() {\n    if (this.gridApi) {\n      this.gridApi.setGridOption('columnDefs', this.colData);\n    }\n  }\n\n\n\n  componentDidLoad() {\n    if (this.container) {\n      this.gridApi = createGrid(this.container, this.gridOptions);\n      if (this.gridApi) {\n        this.gridApi.sizeColumnsToFit({\n          defaultMinWidth: 100,\n        });\n        this.gridApi.setGridOption('columnDefs', this.colData);\n        this.gridApi.setGridOption('rowData', this.rowData);\n\n        if (this.pagination) {\n          const paginationElement = this.host.shadowRoot.querySelector('ifx-pagination');\n          if (paginationElement) {\n            paginationElement.addEventListener('ifxPageChange', this.handlePageChange.bind(this));\n          }\n        }\n        const setFilterElements = this.host.querySelectorAll('ifx-set-filter');\n        // Add an event listener to each SetFilter component\n        setFilterElements.forEach(setFilterElement => {\n          setFilterElement.addEventListener('ifxFilterChange', this.handleFilterChange.bind(this));\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.pagination) {\n      const paginationElement = this.host.shadowRoot.querySelector('ifx-pagination');\n      if (paginationElement) {\n        paginationElement.removeEventListener('ifxPageChange', this.handlePageChange.bind(this));\n      }\n    }\n    const setFilterElements = this.host.shadowRoot.querySelectorAll('ifx-set-filter');\n    // Remove the event listener from each SetFilter component\n    setFilterElements.forEach(setFilterElement => {\n      setFilterElement.removeEventListener('ifxFilterChange', this.handleFilterChange.bind(this));\n    });\n  }\n\n  handlePageChange(event) {\n    this.currentPage = event.detail.currentPage;\n    const startIndex = (this.currentPage - 1) * this.paginationPageSize;\n    const endIndex = startIndex + this.paginationPageSize;\n    const visibleRowData = this.allRowData.slice(startIndex, endIndex);\n    // Update the data in the grid\n    if (this.gridApi) {\n      this.gridApi.setRowData(visibleRowData);\n    }\n  }\n\n\n  getRowData() {\n    let rows: any[] = [];\n\n    // If this.rows is undefined or null, log a warning and return an empty array\n    if (this.rows === undefined || this.rows === null) {\n      console.warn('rows is undefined or null');\n      return rows;\n    }\n\n    if (typeof this.rows === 'string') {\n      try {\n        rows = JSON.parse(this.rows);\n      } catch (err) {\n        console.error('Failed to parse rows input:', this.rows, err);\n      }\n    } else if (Array.isArray(this.rows) || typeof this.rows === 'object') {\n      rows = this.rows;\n    } else {\n      console.error('Unexpected value for rows: ', this.rows);\n    }\n\n    this.allRowData = rows;\n    this.originalRowData = [...rows]; // Deep copy the original data\n    return rows.slice(0, this.paginationPageSize);\n  }\n\n\n  getColData() {\n    let cols: any[] = [];\n\n    // If this.cols is undefined or null, log a warning and return an empty array\n    if (this.cols === undefined || this.cols === null) {\n      console.warn('cols is undefined or null');\n      return cols;\n    }\n\n    if (typeof this.cols === 'string') {\n      try {\n        cols = JSON.parse(this.cols);\n      } catch (err) {\n        console.error('Failed to parse cols input:', this.cols, err);\n      }\n    } else if (Array.isArray(this.cols) || typeof this.cols === 'object') {\n      cols = this.cols;\n    } else {\n      console.error('Unexpected value for cols: ', this.cols);\n    }\n\n    let buttonColumn = cols.find(column => column.field === 'button');\n    if (buttonColumn) {\n      buttonColumn.cellRenderer = ButtonCellRenderer;\n    }\n\n    return cols;\n  }\n\n\n\n  onFirstDataRendered(params: FirstDataRenderedEvent) {\n    params.api.sizeColumnsToFit();\n  }\n\n\n\n  disconnectedCallback() {\n    if (this.pagination) {\n      const paginationElement = this.host.shadowRoot.querySelector('ifx-pagination');\n      if (paginationElement) {\n        paginationElement.removeEventListener('ifxPageChange', this.handlePageChange);\n      }\n    }\n  }\n\n\n  getClassNames() {\n    return classNames(\n      this.tableHeight === 'auto' && 'ifx-table-wrapper ag-root-wrapper-body',\n      'ifx-table-wrapper',\n    );\n  }\n\n\n  render() {\n    // if (this.gridOptions.rowDragManaged) {\n    //   // console.log(\"draggable table render\")\n    // }\n    let style = {};\n    if (this.tableHeight !== 'auto') {\n      style = {\n        'height': this.tableHeight\n      };\n    }\n\n    return (\n      <Host >\n        <slot name=\"set-filter\"></slot>\n        <div id=\"ifx-table-wrapper\" class={this.getClassNames()}>\n          <div class='ifx-ag-grid' style={style} ref={(el) => this.container = el}>\n          </div>\n        </div>\n        {this.pagination ? <ifx-pagination total={this.allRowData.length} current-page={this.currentPage}></ifx-pagination> : null}\n      </Host>\n    )\n  }\n\n\n  hasButtonCol(): boolean {\n    return this.getColData().some(column => column.field === 'button');\n  }\n\n\n  // setIconButtonRenderer() {\n  //   const iconButtonColumn = this.getColData().find(column => column.field === 'iconButton');\n  //   if (iconButtonColumn) {\n  //     iconButtonColumn.cellRenderer = IconButtonCellRenderer;\n  //   }\n  // }\n\n  // setLinkRenderer() {\n  //   const linkColumn = this.getColData().find(column => column.field === 'link');\n  //   if (linkColumn) {\n  //     linkColumn.cellRenderer = LinkCellRenderer;\n  //   }\n  // }\n\n\n\n  onDragOver(event) {\n    var dragSupported = event.dataTransfer.length;\n\n    if (dragSupported) {\n      event.dataTransfer.dropEffect = 'move';\n    }\n\n    event.preventDefault();\n  }\n\n  onDrop(event) {\n    var jsonData = event.dataTransfer.getData('application/json');\n\n    var eJsonRow = document.createElement('div');\n    eJsonRow.classList.add('json-row');\n    eJsonRow.innerText = jsonData;\n\n    var eJsonDisplay = document.querySelector('#eJsonDisplay');\n\n    eJsonDisplay.appendChild(eJsonRow);\n    event.preventDefault();\n  }\n\n}\n"],"names":["ButtonKeys","ButtonCellRenderer","init","params","console","log","config","data","button","this","eGui","document","createElement","hasRequiredKeys","innerHTML","concat","disabled","variant","size","target","color","text","eButton","querySelector","getGui","refresh","destroy","removeEventListener","eventListener","getFieldValueToDisplay","valueFormatted","value","isObject","constructor","Object","obj","every","key","CustomNoRowsOverlay","noRowsMessageFunc","_params","CustomLoadingOverlay","Table","allRowData","originalRowData","updateFilterOptions","options","col","colData","field","Set","rowData","map","row","filterOptions","handleFilterChange","event","detail","filterName","filterValues","type","selectedValues","option","length","currentFilters","assign","filterData","startIndex","currentPage","paginationPageSize","endIndex","visibleRowData","slice","gridApi","setGridOption","filteredData","filterType","filterByType","filter","some","String","toLowerCase","startsWith","includes","onBtShowLoading","showLoadingOverlay","componentWillLoad","getRowData","getColData","gridOptions","rowHeight","headerHeight","defaultColDef","resizable","suppressDragLeaveHidesColumns","onFirstDataRendered","bind","columnDefs","loadingOverlayComponent","noRowsOverlayComponent","noRowsOverlayComponentParams","icons","sortAscending","sortDescending","sortUnSort","rowDragManaged","dndSource","animateRows","componentDidRender","componentDidLoad","container","createGrid","sizeColumnsToFit","defaultMinWidth","pagination","paginationElement","host","shadowRoot","addEventListener","handlePageChange","querySelectorAll","forEach","setFilterElement","componentWillUnmount","setRowData","rows","undefined","warn","JSON","parse","err","error","Array","isArray","cols","buttonColumn","find","column","cellRenderer","api","disconnectedCallback","getClassNames","classnames","tableHeight","render","style","h","Host","name","id","class","ref","el","total","hasButtonCol","onDragOver","dataTransfer","dropEffect","preventDefault","onDrop","jsonData","getData","eJsonRow","classList","add","innerText","appendChild"],"sourceRoot":""}