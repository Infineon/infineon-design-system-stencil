"use strict";(self.webpackChunk_infineon_infineon_design_system_stencil=self.webpackChunk_infineon_infineon_design_system_stencil||[]).push([[2792],{"./src/components/dropdown/dropdown.stories.ts":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.Separator=exports.SearchField=exports.LabelTrigger=exports.Header=exports.Default=void 0;var _addonActions=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.js"),_infineonIcons=__webpack_require__("../../node_modules/@infineon/infineon-icons/dist/icons.js");exports.default={title:"Components/Dropdown",tags:["autodocs"],args:{label:"Dropdown",disabled:!1,defaultOpen:!1,noCloseOnOutsideClick:!1,noCloseOnMenuClick:!1,noAppendToBody:!1,variant:"primary",placement:"bottom-start",size:"m",href:"",target:"_self",icon:"c-info-16"},argTypes:{placement:{description:"Specifies the position of the dropdown relative to its trigger element.",options:["auto","auto-start","auto-end","top","top-start","top-end","bottom","bottom-start","bottom-end","right","right-start","right-end","left","left-start","left-end"],control:"select",table:{category:"ifx-dropdown props",defaultValue:{summary:"bottom-start"}}},label:{name:"Label of Dropdown Trigger Button",description:"Set the label displayed on the *<ifx-dropdown-trigger-button>*.",table:{category:"story controls",defaultValue:{summary:"Dropdown"}}},size:{description:"Font Size options for menu items: s (14px) and m (16px) - default: m.",options:["s","m"],control:"radio",table:{category:"ifx-dropdown-menu props",defaultValue:{summary:"m"}}},disabled:{description:"Determines if the dropdown button should be disabled.",control:"boolean",table:{category:"ifx-dropdown props",defaultValue:{summary:!1}}},variant:{description:'The visual style of the dropdown button. Accepted values are "primary", "secondary", "tertiary".',options:["primary","secondary","tertiary"],control:"radio",table:{category:"ifx-dropdown-trigger-button props",defaultValue:{summary:"primary"}}},target:{description:"Determines where to open the linked document when the dropdown item is clicked.",options:["_self","_blank"],control:"radio",table:{category:"ifx-dropdown-item props",defaultValue:{summary:"_self"}}},href:{description:"href link to menu item.",table:{category:"ifx-dropdown-item props"}},icon:{description:"The icon to be displayed on the dropdown items.",options:["none",...Object.values(_infineonIcons.icons).map(i=>i.name)],control:"select",table:{category:"ifx-dropdown-item props",defaultValue:{summary:"c-info-16"}}},defaultOpen:{description:"Determines if the dropdown should be open by default.",control:"boolean",table:{category:"ifx-dropdown props",defaultValue:{summary:!1}}},noCloseOnOutsideClick:{description:"Determines if the dropdown should not close when a click outside the dropdown happens.",control:"boolean",table:{category:"ifx-dropdown props",defaultValue:{summary:!1}}},noCloseOnMenuClick:{description:"Determines if the dropdown should not close when a click inside the dropdown menu happens.",control:"boolean",table:{category:"ifx-dropdown props",defaultValue:{summary:!1}}},noAppendToBody:{description:"Determines if the dropdown should not be appended to the body.",control:"boolean",table:{category:"ifx-dropdown props",defaultValue:{summary:!1}}},ifxOpen:{action:"ifxOpen",description:"Custom event that is emitted when the dropdown opens.",table:{category:"custom events",type:{summary:"Framework integration",detail:'React: onIfxOpen={handleChange}\nVue:@ifxOpen="handleChange"\nAngular:(ifxOpen)="handleChange()"\nVanillaJs:.addEventListener("ifxOpen", (event) => {//handle change});'}}},ifxClose:{action:"ifxClose",description:"Custom event emitted when dropdown closes.",table:{category:"custom events",type:{summary:"Framework integration",detail:'React: onIfxClose={handleChange}\nVue:@ifxClose="handleChange"\nAngular:(ifxClose)="handleChange()"\nVanillaJs:.addEventListener("ifxClose", (event) => {//handle change});'}}},ifxDropdownMenuItem:{action:"ifxDropdownMenuItem",description:"Custom event emitted by ifx-dropdown-menu when an item is selected.",table:{category:"custom events",type:{summary:"Framework integration",detail:'React: onIfxDropdownMenuItem={handleChange}\nVue:@ifxDropdownMenuItem="handleChange"\nAngular:(ifxDropdownMenuItem)="handleChange()"\nVanillaJs:.addEventListener("ifxDropdownMenuItem", (event) => {//handle change});'}}}}};exports.Default=(args=>{const wrapper=document.createElement("div");wrapper.innerHTML=`<ifx-dropdown placement="${args.placement}" \n  disabled="${args.disabled}" \n  default-open="${args.defaultOpen}"\n  no-close-on-outside-click="${args.noCloseOnOutsideClick}"\n  no-close-on-menu-click="${args.noCloseOnOutsideClick}"\n  no-append-to-body="${args.noAppendToBody}">\n\n    <ifx-dropdown-trigger-button variant="${args.variant}">\n      ${args.label}\n    </ifx-dropdown-trigger-button>\n\n  <ifx-dropdown-menu size="${args.size}">\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n  </ifx-dropdown-menu>\n</ifx-dropdown>`;const dropdown=wrapper.querySelector("ifx-dropdown"),dropdownMenu=dropdown.querySelector("ifx-dropdown-menu");return dropdown.addEventListener("ifxOpen",(0,_addonActions.action)("ifxOpen")),dropdown.addEventListener("ifxClose",(0,_addonActions.action)("ifxClose")),dropdownMenu.addEventListener("ifxDropdownMenuItem",(0,_addonActions.action)("ifxDropdownMenuItem")),wrapper}).bind({});(exports.LabelTrigger=(args=>{const wrapper=document.createElement("div");wrapper.innerHTML=`<ifx-dropdown\n    placement="${args.placement}"\n    default-open="${args.defaultOpen}"\n    no-close-on-outside-click="${args.noCloseOnOutsideClick}"\n    no-close-on-menu-click="${args.noCloseOnOutsideClick}"\n    disabled="${args.disabled}"\n    no-append-to-body="${args.noAppendToBody}"\n  >\n    Hello World! Click on the text to open the dropdown\n    <ifx-dropdown-trigger>\n      <ifx-icon icon="c-check-16"></ifx-icon>\n    </ifx-dropdown-trigger>\n    Some more text\n  <ifx-dropdown-menu size="${args.size}">\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n  </ifx-dropdown-menu>\n</ifx-dropdown>`;const dropdown=wrapper.querySelector("ifx-dropdown"),dropdownMenu=dropdown.querySelector("ifx-dropdown-menu");return dropdown.addEventListener("ifxOpen",(0,_addonActions.action)("ifxOpen")),dropdown.addEventListener("ifxClose",(0,_addonActions.action)("ifxClose")),dropdownMenu.addEventListener("ifxDropdownMenuItem",(0,_addonActions.action)("ifxDropdownMenuItem")),wrapper}).bind({})).argTypes={label:{table:{disable:!0}},variant:{table:{disable:!0}}};(exports.Header=(args=>{const wrapper=document.createElement("div");wrapper.innerHTML=`<ifx-dropdown\n  placement="${args.placement}"\n  default-open="${args.defaultOpen}"\n  no-close-on-outside-click="${args.noCloseOnOutsideClick}"\n  no-close-on-menu-click="${args.noCloseOnOutsideClick}"\n  no-append-to-body="${args.noAppendToBody}">\n  <ifx-dropdown-header>Dropdown Header</ifx-dropdown-header>\n   <ifx-dropdown-trigger-button variant="${args.variant}">\n      ${args.label}\n    </ifx-dropdown-trigger-button>\n     <ifx-dropdown-menu size="${args.size}">\n    <ifx-dropdown-header>Header Text</ifx-dropdown-header>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n  </ifx-dropdown-menu>\n</ifx-dropdown>`;const dropdown=wrapper.querySelector("ifx-dropdown"),dropdownMenu=dropdown.querySelector("ifx-dropdown-menu");return dropdown.addEventListener("ifxOpen",(0,_addonActions.action)("ifxOpen")),dropdown.addEventListener("ifxClose",(0,_addonActions.action)("ifxClose")),dropdownMenu.addEventListener("ifxDropdownMenuItem",(0,_addonActions.action)("ifxDropdownMenuItem")),wrapper}).bind({})).argTypes={label:{table:{disable:!0}},variant:{table:{disable:!0}}};exports.SearchField=(args=>{const wrapper=document.createElement("div");wrapper.innerHTML=`<ifx-dropdown\n  placement="${args.placement}"\n  default-open="${args.defaultOpen}"\n  no-close-on-outside-click="${args.noCloseOnOutsideClick}"\n  no-close-on-menu-click="${args.noCloseOnOutsideClick}"\n  no-append-to-body="${args.noAppendToBody}">\n   <ifx-dropdown-trigger-button variant="${args.variant}">\n      ${args.label}\n    </ifx-dropdown-trigger-button>\n     <ifx-dropdown-menu size="${args.size}">\n    <ifx-search-field show-delete-icon="false"></ifx-search-field>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n  </ifx-dropdown-menu>\n</ifx-dropdown>`;const dropdown=wrapper.querySelector("ifx-dropdown"),dropdownMenu=dropdown.querySelector("ifx-dropdown-menu");return dropdown.addEventListener("ifxOpen",(0,_addonActions.action)("ifxOpen")),dropdown.addEventListener("ifxClose",(0,_addonActions.action)("ifxClose")),dropdownMenu.addEventListener("ifxDropdownMenuItem",(0,_addonActions.action)("ifxDropdownMenuItem")),wrapper}).bind({}),exports.Separator=(args=>{const wrapper=document.createElement("div");wrapper.innerHTML=`<ifx-dropdown\n  placement="${args.placement}"\n  default-open="${args.defaultOpen}"\n   no-close-on-outside-click="${args.noCloseOnOutsideClick}"\n  no-close-on-menu-click="${args.noCloseOnOutsideClick}"\n  no-append-to-body="${args.noAppendToBody}">\n   <ifx-dropdown-trigger-button variant="${args.variant}">\n      ${args.label}\n    </ifx-dropdown-trigger-button>\n     <ifx-dropdown-menu size="${args.size}">\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n    <ifx-dropdown-separator></ifx-dropdown-separator>\n    <ifx-dropdown-item icon="${"none"===args.icon?"":args.icon}" target="${args.target}" href="${""!==args.href?args.href:""}">Menu Item</ifx-dropdown-item>\n  </ifx-dropdown-menu>\n</ifx-dropdown>`;const dropdown=wrapper.querySelector("ifx-dropdown"),dropdownMenu=dropdown.querySelector("ifx-dropdown-menu");return dropdown.addEventListener("ifxOpen",(0,_addonActions.action)("ifxOpen")),dropdown.addEventListener("ifxClose",(0,_addonActions.action)("ifxClose")),dropdownMenu.addEventListener("ifxDropdownMenuItem",(0,_addonActions.action)("ifxDropdownMenuItem")),wrapper}).bind({});module.exports.__namedExportsOrder=["Separator","SearchField","LabelTrigger","Header","Default"]}}]);