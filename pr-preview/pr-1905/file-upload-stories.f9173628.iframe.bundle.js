"use strict";(self.webpackChunk_infineon_infineon_design_system_stencil=self.webpackChunk_infineon_infineon_design_system_stencil||[]).push([[2792,5889,9977],{"../../node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{XI:()=>action});var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_=__webpack_require__("storybook/internal/preview-errors"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),v4=__webpack_require__("../../node_modules/uuid/dist/esm-browser/v4.js"),__defProp=Object.defineProperty,ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a},generateId=()=>"object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.A)():Date.now().toString(36)+Math.random().toString(36).substring(2);function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find(render=>"playing"===render.phase||"rendering"===render.phase);if(storyRenderer){let deprecated=!globalThis?.FEATURES?.disallowImplicitActionsInRenderV8,error=new external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_.ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id=generateId(),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler.implicit=options.implicit,handler}var preview_exports={};((target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})})(preview_exports,{argsEnhancers:()=>argsEnhancers,loaders:()=>loaders});var isInInitialArgs=(name,initialArgs)=>typeof initialArgs[name]>"u"&&!(name in initialArgs),argsEnhancers=[context=>{let{initialArgs,argTypes,parameters:{actions:actions2}}=context;return actions2?.disable||!argTypes?{}:Object.entries(argTypes).filter(([name,argType])=>!!argType.action).reduce((acc,[name,argType])=>(isInInitialArgs(name,initialArgs)&&(acc[name]=action("string"==typeof argType.action?argType.action:name)),acc),{})},context=>{let{initialArgs,argTypes,id,parameters:{actions:actions2}}=context;if(!actions2||actions2.disable||!actions2.argTypesRegex||!argTypes)return{};let argTypesRegex=new RegExp(actions2.argTypesRegex);return Object.entries(argTypes).filter(([name])=>!!argTypesRegex.test(name)).reduce((acc,[name,argType])=>(isInInitialArgs(name,initialArgs)&&(acc[name]=action(name,{implicit:!0,id})),acc),{})}],subscribed=!1,loaders=[context=>{let{parameters:{actions:actions2}}=context;if(!actions2?.disable&&!subscribed&&"__STORYBOOK_TEST_ON_MOCK_CALL__"in external_STORYBOOK_MODULE_GLOBAL_.global&&"function"==typeof external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_TEST_ON_MOCK_CALL__){(0,external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_TEST_ON_MOCK_CALL__)((mock,args)=>{let name=mock.getMockName();"spy"!==name&&(!/^next\/.*::/.test(name)||["next/router::useRouter()","next/navigation::useRouter()","next/navigation::redirect","next/cache::","next/headers::cookies().set","next/headers::cookies().delete","next/headers::headers().set","next/headers::headers().delete"].some(prefix=>name.startsWith(prefix)))&&action(name)(args)}),subscribed=!0}}]},"./src/components/file-upload/file-upload.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,UploadAreaDragDrop:()=>UploadAreaDragDrop,UploadRequiredError:()=>UploadRequiredError,UploadStatesDemo:()=>UploadStatesDemo,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs");const hideAllControlsExcept=allowedKeys=>{const allProps=["dragAndDrop","label","required","labelRequiredError","disabled","maxFiles","maxFileSizeMB","allowedFileTypes","additionalAllowedFileTypes","labelBrowseFiles","labelDragAndDrop","labelUploadedFilesHeading","labelFileTooLarge","labelUnsupportedFileType","labelUploaded","labelSupportedFormatsTemplate","labelFileSingular","labelFilePlural","labelMaxFilesInfo","labelMaxFilesExceeded","labelUploadFailed","ariaLabelBrowseFiles","ariaLabelDropzone","ariaLabelFileInput","ariaLabelRemoveFile","ariaLabelCancelUpload","ariaLabelRetryUpload","ariaLabelUploadingStatus","ariaLabelUploadedStatus","ariaLabelUploadFailedStatus"],argTypes={};for(const prop of allProps)allowedKeys.includes(prop)||(argTypes[prop]={table:{disable:!0}});return argTypes},disableCustomEventControls={ifxFileUploadAdd:{table:{disable:!0}},ifxFileUploadRemove:{table:{disable:!0}},ifxFileUploadChange:{table:{disable:!0}},ifxFileUploadError:{table:{disable:!0}},ifxFileUploadInvalid:{table:{disable:!0}},ifxFileUploadStart:{table:{disable:!0}},ifxFileUploadComplete:{table:{disable:!0}},ifxFileUploadAllComplete:{table:{disable:!0}},ifxFileUploadAbort:{table:{disable:!0}},ifxFileUploadDrop:{table:{disable:!0}},ifxFileUploadClick:{table:{disable:!0}},ifxFileUploadMaxFilesExceeded:{table:{disable:!0}},ifxFileUploadValidation:{table:{disable:!0}},ifxFileUploadRetry:{table:{disable:!0}}},__WEBPACK_DEFAULT_EXPORT__={title:"Components/File Upload",tags:["autodocs"],parameters:{controls:{expanded:!0},docs:{description:{component:"Upload component with different interaction styles: button or drag-and-drop area."}}},argTypes:{dragAndDrop:{description:"Enables drag-and-drop upload area.",control:"boolean",table:{category:"Function",defaultValue:{summary:"false"}}},required:{description:"Marks the upload as required.",control:"boolean",table:{category:"Function",defaultValue:{summary:"false"}}},disabled:{description:"Disables the upload input.",control:"boolean",table:{category:"Function",defaultValue:{summary:"false"}}},maxFileSizeMB:{description:"Maximum file size in MB.",control:"number",table:{category:"Function",defaultValue:{summary:"7"}}},allowedFileTypes:{control:{type:"check"},options:["jpg","png","pdf","mov","mp3","mp4"],description:"Select one or more allowed file extensions. Internally mapped to MIME types.",table:{category:"Function"}},additionalAllowedFileTypes:{description:"Custom MIME types (comma-separated).",control:"text",table:{category:"Function"}},maxFiles:{description:"Maximum number of allowed files.",control:"number",table:{category:"Function"}},label:{control:"text",description:"Main label shown above input.",table:{category:"Label"}},labelRequiredError:{control:"text",description:"Shown when required and no file selected.",table:{category:"Label"}},labelBrowseFiles:{control:"text",table:{category:"Label"}},labelDragAndDrop:{control:"text",table:{category:"Label"}},labelUploadedFilesHeading:{control:"text",table:{category:"Label"}},labelFileTooLarge:{control:"text",table:{category:"Label"}},labelUnsupportedFileType:{control:"text",table:{category:"Label"}},labelUploaded:{control:"text",table:{category:"Label"}},labelSupportedFormatsTemplate:{control:"text",table:{category:"Label"}},labelFileSingular:{control:"text",table:{category:"Label"}},labelFilePlural:{control:"text",table:{category:"Label"}},labelMaxFilesInfo:{control:"text",table:{category:"Label"}},labelMaxFilesExceeded:{control:"text",table:{category:"Label"}},labelUploadFailed:{control:"text",table:{category:"Label"}},ariaLabelBrowseFiles:{control:"text",table:{category:"Aria Labels"}},ariaLabelDropzone:{control:"text",table:{category:"Aria Labels"}},ariaLabelFileInput:{control:"text",table:{category:"Aria Labels"}},ariaLabelRemoveFile:{control:"text",table:{category:"Aria Labels"}},ariaLabelCancelUpload:{control:"text",table:{category:"Aria Labels"}},ariaLabelRetryUpload:{control:"text",table:{category:"Aria Labels"}},ariaLabelUploadingStatus:{control:"text",table:{category:"Aria Labels"}},ariaLabelUploadedStatus:{control:"text",table:{category:"Aria Labels"}},ariaLabelUploadFailedStatus:{control:"text",table:{category:"Aria Labels"}},ifxFileUploadAdd:{action:"ifxFileUploadAdd",table:{category:"Custom Events"},description:"Triggered when valid files are added (via browse or drop)."},ifxFileUploadRemove:{action:"ifxFileUploadRemove",table:{category:"Custom Events"},description:"Fired when a user removes a file from the list."},ifxFileUploadChange:{action:"ifxFileUploadChange",table:{category:"Custom Events"},description:"Fired whenever the file list changes (add, remove, retry)."},ifxFileUploadError:{action:"ifxFileUploadError",table:{category:"Custom Events"},description:"Fired when a file is rejected or an upload fails."},ifxFileUploadInvalid:{action:"ifxFileUploadInvalid",table:{category:"Custom Events"},description:"Fired for invalid files (e.g., wrong type or size)."},ifxFileUploadStart:{action:"ifxFileUploadStart",table:{category:"Custom Events"},description:"Fired when an upload starts for a file."},ifxFileUploadComplete:{action:"ifxFileUploadComplete",table:{category:"Custom Events"},description:"Fired when a single file upload finishes successfully."},ifxFileUploadAllComplete:{action:"ifxFileUploadAllComplete",table:{category:"Custom Events"},description:"Fired when all current uploads have completed."},ifxFileUploadAbort:{action:"ifxFileUploadAbort",table:{category:"Custom Events"},description:"Fired when a user cancels an in-progress upload."},ifxFileUploadDrop:{action:"ifxFileUploadDrop",table:{category:"Custom Events"},description:"Fired when files are dropped via drag-and-drop."},ifxFileUploadClick:{action:"ifxFileUploadClick",table:{category:"Custom Events"},description:"Fired when the upload button or dropzone is clicked."},ifxFileUploadMaxFilesExceeded:{action:"ifxFileUploadMaxFilesExceeded",table:{category:"Custom Events"},description:"Fired when the selected files exceed the maxFiles limit."},ifxFileUploadValidation:{action:"ifxFileUploadValidation",table:{category:"Custom Events"},description:"Fired after required validation is checked."},ifxFileUploadRetry:{action:"ifxFileUploadRetry",table:{category:"Custom Events"},description:"Fired when the retry button is clicked for a failed upload."}}},BaseTemplate=args=>{const el=document.createElement("ifx-file-upload");args.dragAndDrop&&el.setAttribute("drag-and-drop",""),el.setAttribute("max-file-size-m-b",args.maxFileSizeMB);const mappedTypes=(Array.isArray(args.allowedFileTypes)?args.allowedFileTypes:args.allowedFileTypes?.split(",")||[]).flatMap(type=>"jpg"===type?["jpg","jpeg"]:[type]),uniqueTypes=Array.from(new Set(mappedTypes));if(el.setAttribute("allowed-file-types",uniqueTypes.join(",")),args.additionalAllowedFileTypes){const value=Array.isArray(args.additionalAllowedFileTypes)?args.additionalAllowedFileTypes.join(","):args.additionalAllowedFileTypes;el.setAttribute("additional-allowed-file-types",value)}return void 0!==args.maxFiles&&null!==args.maxFiles&&el.setAttribute("max-files",String(args.maxFiles)),args.required?el.setAttribute("required",""):el.removeAttribute("required"),args.disabled?el.setAttribute("disabled",""):el.removeAttribute("disabled"),el.setAttribute("label",args.label),el.setAttribute("label-required-error",args.labelRequiredError),el.setAttribute("label-browse-files",args.labelBrowseFiles),el.setAttribute("label-drag-and-drop",args.labelDragAndDrop),el.setAttribute("label-uploaded-files-heading",args.labelUploadedFilesHeading),el.setAttribute("label-file-too-large",args.labelFileTooLarge),el.setAttribute("label-unsupported-file-type",args.labelUnsupportedFileType),el.setAttribute("label-uploaded",args.labelUploaded),el.setAttribute("label-supported-formats-template",args.labelSupportedFormatsTemplate),el.setAttribute("label-file-singular",args.labelFileSingular),el.setAttribute("label-file-plural",args.labelFilePlural),el.setAttribute("label-max-files-info",args.labelMaxFilesInfo),el.setAttribute("label-max-files-exceeded",args.labelMaxFilesExceeded),el.setAttribute("label-upload-failed",args.labelUploadFailed),el.setAttribute("aria-label-browse-files",args.ariaLabelBrowseFiles),el.setAttribute("aria-label-dropzone",args.ariaLabelDropzone),el.setAttribute("aria-label-file-input",args.ariaLabelFileInput),el.setAttribute("aria-label-remove-file",args.ariaLabelRemoveFile),el.setAttribute("aria-label-cancel-upload",args.ariaLabelCancelUpload),el.setAttribute("aria-label-retry-upload",args.ariaLabelRetryUpload),el.setAttribute("aria-label-uploading-status",args.ariaLabelUploadingStatus),el.setAttribute("aria-label-uploaded-status",args.ariaLabelUploadedStatus),el.setAttribute("aria-label-upload-failed-status",args.ariaLabelUploadFailedStatus),el.addEventListener("ifxFileUploadAdd",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxFileUploadAdd")),el.addEventListener("ifxFileUploadRemove",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxFileUploadRemove")),el.addEventListener("ifxFileUploadChange",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxFileUploadChange")),el.addEventListener("ifxFileUploadError",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxFileUploadError")),el.addEventListener("ifxFileUploadInvalid",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxFileUploadInvalid")),el.addEventListener("ifxFileUploadStart",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxFileUploadStart")),el.addEventListener("ifxFileUploadComplete",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxFileUploadComplete")),el.addEventListener("ifxFileUploadAbort",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxFileUploadAbort")),el.addEventListener("ifxFileUploadDrop",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxFileUploadDrop")),el.addEventListener("ifxFileUploadClick",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxFileUploadClick")),el.addEventListener("ifxFileUploadMaxFilesExceeded",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxFileUploadMaxFilesExceeded")),el.addEventListener("ifxFileUploadValidation",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxFileUploadValidation")),el.addEventListener("ifxFileUploadRetry",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxFileUploadRetry")),el},Default=BaseTemplate.bind({});Default.args={dragAndDrop:!1,label:"Label",required:!1,labelRequiredError:"You must upload at least one file.",disabled:!1,maxFileSizeMB:7,allowedFileTypes:["jpg","png","pdf"],additionalAllowedFileTypes:"application/zip,text/csv",labelBrowseFiles:"Browse files",labelDragAndDrop:"Drag & Drop or browse files to upload",labelUploadedFilesHeading:"Uploaded files",labelFileTooLarge:"Upload failed. Max file size: {{size}}MB.",labelUnsupportedFileType:"Unsupported file type.",labelUploaded:"Successfully uploaded",labelSupportedFormatsTemplate:"Supported file formats: {{types}}. Max file size: {{size}}MB.",labelFileSingular:"file",labelFilePlural:"files",labelMaxFilesInfo:"You can upload up to {{count}} {{files}}.",labelMaxFilesExceeded:"You have exceeded the maximum of {{count}} {{files}}.",labelUploadFailed:"Upload failed. Please try again.",ariaLabelBrowseFiles:"Browse files",ariaLabelDropzone:"Upload area. Click to browse or drag and drop files.",ariaLabelFileInput:"Upload file",ariaLabelRemoveFile:"Remove file",ariaLabelCancelUpload:"Cancel upload",ariaLabelRetryUpload:"Retry upload",ariaLabelUploadingStatus:"Upload in progress",ariaLabelUploadedStatus:"Upload completed",ariaLabelUploadFailedStatus:"Upload failed"};const UploadAreaDragDrop=BaseTemplate.bind({});UploadAreaDragDrop.args={...Default.args,dragAndDrop:!0};const UploadStatesDemo=BaseTemplate.bind({});UploadStatesDemo.args={...Default.args,dragAndDrop:!0},UploadStatesDemo.parameters={docs:{description:{story:"Visual preview of all file states (success, upload in progress, rejected)."}}},UploadStatesDemo.decorators=[storyFn=>{const el=storyFn();return setTimeout(()=>el?.injectDemoState?.(),0),el}],UploadStatesDemo.argTypes={...hideAllControlsExcept(["dragAndDrop"]),...disableCustomEventControls};const UploadRequiredError=BaseTemplate.bind({});UploadRequiredError.args={...Default.args,required:!0},UploadRequiredError.parameters={docs:{description:{story:"Demonstrates the error state when the upload is required but no files have been added."}}},UploadRequiredError.decorators=[storyFn=>{const el=storyFn();return setTimeout(()=>el?.triggerDemoValidation?.(),100),el}],UploadRequiredError.argTypes={...hideAllControlsExcept(["dragAndDrop"]),...disableCustomEventControls};const __namedExportsOrder=["Default","UploadAreaDragDrop","UploadStatesDemo","UploadRequiredError"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => {\n  const el = document.createElement('ifx-file-upload');\n  if (args.dragAndDrop) el.setAttribute('drag-and-drop', '');\n  el.setAttribute('max-file-size-m-b', args.maxFileSizeMB);\n  const rawTypes = Array.isArray(args.allowedFileTypes) ? args.allowedFileTypes : args.allowedFileTypes?.split(',') || [];\n  const mappedTypes = rawTypes.flatMap(type => type === 'jpg' ? ['jpg', 'jpeg'] : [type]);\n  const uniqueTypes = Array.from(new Set(mappedTypes));\n  el.setAttribute('allowed-file-types', uniqueTypes.join(','));\n  if (args.additionalAllowedFileTypes) {\n    const value = Array.isArray(args.additionalAllowedFileTypes) ? args.additionalAllowedFileTypes.join(',') : args.additionalAllowedFileTypes;\n    el.setAttribute('additional-allowed-file-types', value);\n  }\n  if (args.maxFiles !== undefined && args.maxFiles !== null) {\n    el.setAttribute('max-files', String(args.maxFiles));\n  }\n  args.required ? el.setAttribute('required', '') : el.removeAttribute('required');\n  args.disabled ? el.setAttribute('disabled', '') : el.removeAttribute('disabled');\n  el.setAttribute('label', args.label);\n  el.setAttribute('label-required-error', args.labelRequiredError);\n  el.setAttribute('label-browse-files', args.labelBrowseFiles);\n  el.setAttribute('label-drag-and-drop', args.labelDragAndDrop);\n  el.setAttribute('label-uploaded-files-heading', args.labelUploadedFilesHeading);\n  el.setAttribute('label-file-too-large', args.labelFileTooLarge);\n  el.setAttribute('label-unsupported-file-type', args.labelUnsupportedFileType);\n  el.setAttribute('label-uploaded', args.labelUploaded);\n  el.setAttribute('label-supported-formats-template', args.labelSupportedFormatsTemplate);\n  el.setAttribute('label-file-singular', args.labelFileSingular);\n  el.setAttribute('label-file-plural', args.labelFilePlural);\n  el.setAttribute('label-max-files-info', args.labelMaxFilesInfo);\n  el.setAttribute('label-max-files-exceeded', args.labelMaxFilesExceeded);\n  el.setAttribute('label-upload-failed', args.labelUploadFailed);\n  el.setAttribute('aria-label-browse-files', args.ariaLabelBrowseFiles);\n  el.setAttribute('aria-label-dropzone', args.ariaLabelDropzone);\n  el.setAttribute('aria-label-file-input', args.ariaLabelFileInput);\n  el.setAttribute('aria-label-remove-file', args.ariaLabelRemoveFile);\n  el.setAttribute('aria-label-cancel-upload', args.ariaLabelCancelUpload);\n  el.setAttribute('aria-label-retry-upload', args.ariaLabelRetryUpload);\n  el.setAttribute('aria-label-uploading-status', args.ariaLabelUploadingStatus);\n  el.setAttribute('aria-label-uploaded-status', args.ariaLabelUploadedStatus);\n  el.setAttribute('aria-label-upload-failed-status', args.ariaLabelUploadFailedStatus);\n  el.addEventListener('ifxFileUploadAdd', action('ifxFileUploadAdd'));\n  el.addEventListener('ifxFileUploadRemove', action('ifxFileUploadRemove'));\n  el.addEventListener('ifxFileUploadChange', action('ifxFileUploadChange'));\n  el.addEventListener('ifxFileUploadError', action('ifxFileUploadError'));\n  el.addEventListener('ifxFileUploadInvalid', action('ifxFileUploadInvalid'));\n  el.addEventListener('ifxFileUploadStart', action('ifxFileUploadStart'));\n  el.addEventListener('ifxFileUploadComplete', action('ifxFileUploadComplete'));\n  el.addEventListener('ifxFileUploadAbort', action('ifxFileUploadAbort'));\n  el.addEventListener('ifxFileUploadDrop', action('ifxFileUploadDrop'));\n  el.addEventListener('ifxFileUploadClick', action('ifxFileUploadClick'));\n  el.addEventListener('ifxFileUploadMaxFilesExceeded', action('ifxFileUploadMaxFilesExceeded'));\n  el.addEventListener('ifxFileUploadValidation', action('ifxFileUploadValidation'));\n  el.addEventListener('ifxFileUploadRetry', action('ifxFileUploadRetry'));\n  return el;\n}",...Default.parameters?.docs?.source}}},UploadAreaDragDrop.parameters={...UploadAreaDragDrop.parameters,docs:{...UploadAreaDragDrop.parameters?.docs,source:{originalSource:"args => {\n  const el = document.createElement('ifx-file-upload');\n  if (args.dragAndDrop) el.setAttribute('drag-and-drop', '');\n  el.setAttribute('max-file-size-m-b', args.maxFileSizeMB);\n  const rawTypes = Array.isArray(args.allowedFileTypes) ? args.allowedFileTypes : args.allowedFileTypes?.split(',') || [];\n  const mappedTypes = rawTypes.flatMap(type => type === 'jpg' ? ['jpg', 'jpeg'] : [type]);\n  const uniqueTypes = Array.from(new Set(mappedTypes));\n  el.setAttribute('allowed-file-types', uniqueTypes.join(','));\n  if (args.additionalAllowedFileTypes) {\n    const value = Array.isArray(args.additionalAllowedFileTypes) ? args.additionalAllowedFileTypes.join(',') : args.additionalAllowedFileTypes;\n    el.setAttribute('additional-allowed-file-types', value);\n  }\n  if (args.maxFiles !== undefined && args.maxFiles !== null) {\n    el.setAttribute('max-files', String(args.maxFiles));\n  }\n  args.required ? el.setAttribute('required', '') : el.removeAttribute('required');\n  args.disabled ? el.setAttribute('disabled', '') : el.removeAttribute('disabled');\n  el.setAttribute('label', args.label);\n  el.setAttribute('label-required-error', args.labelRequiredError);\n  el.setAttribute('label-browse-files', args.labelBrowseFiles);\n  el.setAttribute('label-drag-and-drop', args.labelDragAndDrop);\n  el.setAttribute('label-uploaded-files-heading', args.labelUploadedFilesHeading);\n  el.setAttribute('label-file-too-large', args.labelFileTooLarge);\n  el.setAttribute('label-unsupported-file-type', args.labelUnsupportedFileType);\n  el.setAttribute('label-uploaded', args.labelUploaded);\n  el.setAttribute('label-supported-formats-template', args.labelSupportedFormatsTemplate);\n  el.setAttribute('label-file-singular', args.labelFileSingular);\n  el.setAttribute('label-file-plural', args.labelFilePlural);\n  el.setAttribute('label-max-files-info', args.labelMaxFilesInfo);\n  el.setAttribute('label-max-files-exceeded', args.labelMaxFilesExceeded);\n  el.setAttribute('label-upload-failed', args.labelUploadFailed);\n  el.setAttribute('aria-label-browse-files', args.ariaLabelBrowseFiles);\n  el.setAttribute('aria-label-dropzone', args.ariaLabelDropzone);\n  el.setAttribute('aria-label-file-input', args.ariaLabelFileInput);\n  el.setAttribute('aria-label-remove-file', args.ariaLabelRemoveFile);\n  el.setAttribute('aria-label-cancel-upload', args.ariaLabelCancelUpload);\n  el.setAttribute('aria-label-retry-upload', args.ariaLabelRetryUpload);\n  el.setAttribute('aria-label-uploading-status', args.ariaLabelUploadingStatus);\n  el.setAttribute('aria-label-uploaded-status', args.ariaLabelUploadedStatus);\n  el.setAttribute('aria-label-upload-failed-status', args.ariaLabelUploadFailedStatus);\n  el.addEventListener('ifxFileUploadAdd', action('ifxFileUploadAdd'));\n  el.addEventListener('ifxFileUploadRemove', action('ifxFileUploadRemove'));\n  el.addEventListener('ifxFileUploadChange', action('ifxFileUploadChange'));\n  el.addEventListener('ifxFileUploadError', action('ifxFileUploadError'));\n  el.addEventListener('ifxFileUploadInvalid', action('ifxFileUploadInvalid'));\n  el.addEventListener('ifxFileUploadStart', action('ifxFileUploadStart'));\n  el.addEventListener('ifxFileUploadComplete', action('ifxFileUploadComplete'));\n  el.addEventListener('ifxFileUploadAbort', action('ifxFileUploadAbort'));\n  el.addEventListener('ifxFileUploadDrop', action('ifxFileUploadDrop'));\n  el.addEventListener('ifxFileUploadClick', action('ifxFileUploadClick'));\n  el.addEventListener('ifxFileUploadMaxFilesExceeded', action('ifxFileUploadMaxFilesExceeded'));\n  el.addEventListener('ifxFileUploadValidation', action('ifxFileUploadValidation'));\n  el.addEventListener('ifxFileUploadRetry', action('ifxFileUploadRetry'));\n  return el;\n}",...UploadAreaDragDrop.parameters?.docs?.source}}},UploadStatesDemo.parameters={...UploadStatesDemo.parameters,docs:{...UploadStatesDemo.parameters?.docs,source:{originalSource:"args => {\n  const el = document.createElement('ifx-file-upload');\n  if (args.dragAndDrop) el.setAttribute('drag-and-drop', '');\n  el.setAttribute('max-file-size-m-b', args.maxFileSizeMB);\n  const rawTypes = Array.isArray(args.allowedFileTypes) ? args.allowedFileTypes : args.allowedFileTypes?.split(',') || [];\n  const mappedTypes = rawTypes.flatMap(type => type === 'jpg' ? ['jpg', 'jpeg'] : [type]);\n  const uniqueTypes = Array.from(new Set(mappedTypes));\n  el.setAttribute('allowed-file-types', uniqueTypes.join(','));\n  if (args.additionalAllowedFileTypes) {\n    const value = Array.isArray(args.additionalAllowedFileTypes) ? args.additionalAllowedFileTypes.join(',') : args.additionalAllowedFileTypes;\n    el.setAttribute('additional-allowed-file-types', value);\n  }\n  if (args.maxFiles !== undefined && args.maxFiles !== null) {\n    el.setAttribute('max-files', String(args.maxFiles));\n  }\n  args.required ? el.setAttribute('required', '') : el.removeAttribute('required');\n  args.disabled ? el.setAttribute('disabled', '') : el.removeAttribute('disabled');\n  el.setAttribute('label', args.label);\n  el.setAttribute('label-required-error', args.labelRequiredError);\n  el.setAttribute('label-browse-files', args.labelBrowseFiles);\n  el.setAttribute('label-drag-and-drop', args.labelDragAndDrop);\n  el.setAttribute('label-uploaded-files-heading', args.labelUploadedFilesHeading);\n  el.setAttribute('label-file-too-large', args.labelFileTooLarge);\n  el.setAttribute('label-unsupported-file-type', args.labelUnsupportedFileType);\n  el.setAttribute('label-uploaded', args.labelUploaded);\n  el.setAttribute('label-supported-formats-template', args.labelSupportedFormatsTemplate);\n  el.setAttribute('label-file-singular', args.labelFileSingular);\n  el.setAttribute('label-file-plural', args.labelFilePlural);\n  el.setAttribute('label-max-files-info', args.labelMaxFilesInfo);\n  el.setAttribute('label-max-files-exceeded', args.labelMaxFilesExceeded);\n  el.setAttribute('label-upload-failed', args.labelUploadFailed);\n  el.setAttribute('aria-label-browse-files', args.ariaLabelBrowseFiles);\n  el.setAttribute('aria-label-dropzone', args.ariaLabelDropzone);\n  el.setAttribute('aria-label-file-input', args.ariaLabelFileInput);\n  el.setAttribute('aria-label-remove-file', args.ariaLabelRemoveFile);\n  el.setAttribute('aria-label-cancel-upload', args.ariaLabelCancelUpload);\n  el.setAttribute('aria-label-retry-upload', args.ariaLabelRetryUpload);\n  el.setAttribute('aria-label-uploading-status', args.ariaLabelUploadingStatus);\n  el.setAttribute('aria-label-uploaded-status', args.ariaLabelUploadedStatus);\n  el.setAttribute('aria-label-upload-failed-status', args.ariaLabelUploadFailedStatus);\n  el.addEventListener('ifxFileUploadAdd', action('ifxFileUploadAdd'));\n  el.addEventListener('ifxFileUploadRemove', action('ifxFileUploadRemove'));\n  el.addEventListener('ifxFileUploadChange', action('ifxFileUploadChange'));\n  el.addEventListener('ifxFileUploadError', action('ifxFileUploadError'));\n  el.addEventListener('ifxFileUploadInvalid', action('ifxFileUploadInvalid'));\n  el.addEventListener('ifxFileUploadStart', action('ifxFileUploadStart'));\n  el.addEventListener('ifxFileUploadComplete', action('ifxFileUploadComplete'));\n  el.addEventListener('ifxFileUploadAbort', action('ifxFileUploadAbort'));\n  el.addEventListener('ifxFileUploadDrop', action('ifxFileUploadDrop'));\n  el.addEventListener('ifxFileUploadClick', action('ifxFileUploadClick'));\n  el.addEventListener('ifxFileUploadMaxFilesExceeded', action('ifxFileUploadMaxFilesExceeded'));\n  el.addEventListener('ifxFileUploadValidation', action('ifxFileUploadValidation'));\n  el.addEventListener('ifxFileUploadRetry', action('ifxFileUploadRetry'));\n  return el;\n}",...UploadStatesDemo.parameters?.docs?.source}}},UploadRequiredError.parameters={...UploadRequiredError.parameters,docs:{...UploadRequiredError.parameters?.docs,source:{originalSource:"args => {\n  const el = document.createElement('ifx-file-upload');\n  if (args.dragAndDrop) el.setAttribute('drag-and-drop', '');\n  el.setAttribute('max-file-size-m-b', args.maxFileSizeMB);\n  const rawTypes = Array.isArray(args.allowedFileTypes) ? args.allowedFileTypes : args.allowedFileTypes?.split(',') || [];\n  const mappedTypes = rawTypes.flatMap(type => type === 'jpg' ? ['jpg', 'jpeg'] : [type]);\n  const uniqueTypes = Array.from(new Set(mappedTypes));\n  el.setAttribute('allowed-file-types', uniqueTypes.join(','));\n  if (args.additionalAllowedFileTypes) {\n    const value = Array.isArray(args.additionalAllowedFileTypes) ? args.additionalAllowedFileTypes.join(',') : args.additionalAllowedFileTypes;\n    el.setAttribute('additional-allowed-file-types', value);\n  }\n  if (args.maxFiles !== undefined && args.maxFiles !== null) {\n    el.setAttribute('max-files', String(args.maxFiles));\n  }\n  args.required ? el.setAttribute('required', '') : el.removeAttribute('required');\n  args.disabled ? el.setAttribute('disabled', '') : el.removeAttribute('disabled');\n  el.setAttribute('label', args.label);\n  el.setAttribute('label-required-error', args.labelRequiredError);\n  el.setAttribute('label-browse-files', args.labelBrowseFiles);\n  el.setAttribute('label-drag-and-drop', args.labelDragAndDrop);\n  el.setAttribute('label-uploaded-files-heading', args.labelUploadedFilesHeading);\n  el.setAttribute('label-file-too-large', args.labelFileTooLarge);\n  el.setAttribute('label-unsupported-file-type', args.labelUnsupportedFileType);\n  el.setAttribute('label-uploaded', args.labelUploaded);\n  el.setAttribute('label-supported-formats-template', args.labelSupportedFormatsTemplate);\n  el.setAttribute('label-file-singular', args.labelFileSingular);\n  el.setAttribute('label-file-plural', args.labelFilePlural);\n  el.setAttribute('label-max-files-info', args.labelMaxFilesInfo);\n  el.setAttribute('label-max-files-exceeded', args.labelMaxFilesExceeded);\n  el.setAttribute('label-upload-failed', args.labelUploadFailed);\n  el.setAttribute('aria-label-browse-files', args.ariaLabelBrowseFiles);\n  el.setAttribute('aria-label-dropzone', args.ariaLabelDropzone);\n  el.setAttribute('aria-label-file-input', args.ariaLabelFileInput);\n  el.setAttribute('aria-label-remove-file', args.ariaLabelRemoveFile);\n  el.setAttribute('aria-label-cancel-upload', args.ariaLabelCancelUpload);\n  el.setAttribute('aria-label-retry-upload', args.ariaLabelRetryUpload);\n  el.setAttribute('aria-label-uploading-status', args.ariaLabelUploadingStatus);\n  el.setAttribute('aria-label-uploaded-status', args.ariaLabelUploadedStatus);\n  el.setAttribute('aria-label-upload-failed-status', args.ariaLabelUploadFailedStatus);\n  el.addEventListener('ifxFileUploadAdd', action('ifxFileUploadAdd'));\n  el.addEventListener('ifxFileUploadRemove', action('ifxFileUploadRemove'));\n  el.addEventListener('ifxFileUploadChange', action('ifxFileUploadChange'));\n  el.addEventListener('ifxFileUploadError', action('ifxFileUploadError'));\n  el.addEventListener('ifxFileUploadInvalid', action('ifxFileUploadInvalid'));\n  el.addEventListener('ifxFileUploadStart', action('ifxFileUploadStart'));\n  el.addEventListener('ifxFileUploadComplete', action('ifxFileUploadComplete'));\n  el.addEventListener('ifxFileUploadAbort', action('ifxFileUploadAbort'));\n  el.addEventListener('ifxFileUploadDrop', action('ifxFileUploadDrop'));\n  el.addEventListener('ifxFileUploadClick', action('ifxFileUploadClick'));\n  el.addEventListener('ifxFileUploadMaxFilesExceeded', action('ifxFileUploadMaxFilesExceeded'));\n  el.addEventListener('ifxFileUploadValidation', action('ifxFileUploadValidation'));\n  el.addEventListener('ifxFileUploadRetry', action('ifxFileUploadRetry'));\n  return el;\n}",...UploadRequiredError.parameters?.docs?.source}}}}}]);