"use strict";(self.webpackChunk_infineon_infineon_design_system_stencil=self.webpackChunk_infineon_infineon_design_system_stencil||[]).push([[2792,5893],{"../../node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{XI:()=>action});var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_=__webpack_require__("storybook/internal/preview-errors"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),v4=__webpack_require__("../../node_modules/uuid/dist/esm-browser/v4.js"),__defProp=Object.defineProperty,ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a},generateId=()=>"object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.A)():Date.now().toString(36)+Math.random().toString(36).substring(2);function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find((render=>"playing"===render.phase||"rendering"===render.phase));if(storyRenderer){let deprecated=!globalThis?.FEATURES?.disallowImplicitActionsInRenderV8,error=new external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_.ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id=generateId(),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler.implicit=options.implicit,handler}var preview_exports={};((target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})})(preview_exports,{argsEnhancers:()=>argsEnhancers,loaders:()=>loaders});var isInInitialArgs=(name,initialArgs)=>typeof initialArgs[name]>"u"&&!(name in initialArgs),argsEnhancers=[context=>{let{initialArgs,argTypes,parameters:{actions:actions2}}=context;return actions2?.disable||!argTypes?{}:Object.entries(argTypes).filter((([name,argType])=>!!argType.action)).reduce(((acc,[name,argType])=>(isInInitialArgs(name,initialArgs)&&(acc[name]=action("string"==typeof argType.action?argType.action:name)),acc)),{})},context=>{let{initialArgs,argTypes,id,parameters:{actions:actions2}}=context;if(!actions2||actions2.disable||!actions2.argTypesRegex||!argTypes)return{};let argTypesRegex=new RegExp(actions2.argTypesRegex);return Object.entries(argTypes).filter((([name])=>!!argTypesRegex.test(name))).reduce(((acc,[name,argType])=>(isInInitialArgs(name,initialArgs)&&(acc[name]=action(name,{implicit:!0,id})),acc)),{})}],subscribed=!1,loaders=[context=>{let{parameters:{actions:actions2}}=context;if(!actions2?.disable&&!subscribed&&"__STORYBOOK_TEST_ON_MOCK_CALL__"in external_STORYBOOK_MODULE_GLOBAL_.global&&"function"==typeof external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_TEST_ON_MOCK_CALL__){(0,external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_TEST_ON_MOCK_CALL__)(((mock,args)=>{let name=mock.getMockName();"spy"!==name&&(!/^next\/.*::/.test(name)||["next/router::useRouter()","next/navigation::useRouter()","next/navigation::redirect","next/cache::","next/headers::cookies().set","next/headers::cookies().delete","next/headers::headers().set","next/headers::headers().delete"].some((prefix=>name.startsWith(prefix))))&&action(name)(args)})),subscribed=!0}}]},"./src/components/segmented-control/segmented-control.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs"),_infineon_infineon_icons__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/@infineon/infineon-icons/dist/icons.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Segmented Control",tags:["autodocs"],args:{amountOfSegments:5,labelOfSegment:"Label",caption:"Caption text to describe the controls",label:"Group Label",size:"regular",icon:"star-16",selected:"false",value:"Value"},argTypes:{amountOfSegments:{name:"Amount of Segments",control:{type:"number",min:2},description:"Control the number of *<ifx-segment>* in component.",table:{category:"story controls",type:{summary:null}}},labelOfSegment:{name:"Label of Segment",description:"Set the label of *<ifx-segmented-control>*.",table:{category:"story controls"}},caption:{description:"Set the caption text of segmented control group.",table:{category:"ifx-segmented-control props"}},label:{name:"label",description:"Set the label of control group.",table:{category:"ifx-segmented-control props"}},size:{description:"Switch between the size of Segmented Control.",control:"radio",options:["regular","small"],table:{category:"ifx-segmented-control props",defaultValue:{summary:"regular"},type:{summary:"regular | small"}}},icon:{description:"Set icon of a segment.",options:Object.values(_infineon_infineon_icons__WEBPACK_IMPORTED_MODULE_1__.P).map((i=>i.name)),control:{type:"select"},table:{category:"ifx-segment props"}},selected:{description:"Selects the segment when set true.\n\nSee the 2nd *<ifx-segment>* for effects",control:"boolean",table:{category:"ifx-segment props",defaultValue:{summary:!1},type:{summary:"boolean"}}},value:{description:"Set the value of *<ifx-segment>*. Required.",table:{category:"ifx-segment props",type:{summary:"string"}},type:{required:!0}},ifxChange:{description:"Custom event emitted when the segment is changed.",table:{category:"custom events",type:{summary:"Framework integration",detail:'\nReact: onIfxChange={handleChange}\nVue: @ifxChange="handleChange"\nAngular: (ifxChange)="handleChange()"\nVanillaJs: .addEventListener("ifxChange", (event) => {/*handle change*/});'}}}}},Default=(args=>{const wrapper=document.createElement("div");wrapper.innerHTML=`\n<ifx-segmented-control\ncaption = '${args.caption}'\nlabel = '${args.label}'\nsize = '${args.size}'>\n    ${Array.from({length:args.amountOfSegments},((_,segmentId)=>{const segment=document.createElement("ifx-segment");return segment.innerText=args.labelOfSegment,segment.setAttribute("value",`${args.value}${segmentId+1}`),segment.setAttribute("icon",`${args.icon}`),!0===args.selected&&1===segmentId&&segment.setAttribute("selected","true"),segment.outerHTML})).join("\n    ")}\n</ifx-segmented-control>  \n`;const segmentedControl=wrapper.querySelector("ifx-segmented-control");return segmentedControl.addEventListener("ifxChange",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxChange")),segmentedControl}).bind({}),__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => {\n  const wrapper = document.createElement('div');\n  wrapper.innerHTML = `\n<ifx-segmented-control\ncaption = '${args.caption}'\nlabel = '${args.label}'\nsize = '${args.size}'>\n    ${(() => {\n    return Array.from({\n      length: args.amountOfSegments\n    }, (_, segmentId) => {\n      const segment = document.createElement('ifx-segment');\n      segment.innerText = args.labelOfSegment;\n      segment.setAttribute('value', `${args.value}${segmentId + 1}`);\n      segment.setAttribute('icon', `${args.icon}`);\n      if (args.selected === true && segmentId === 1) segment.setAttribute('selected', 'true');\n      return segment.outerHTML;\n    }).join(`\\n    `);\n  })()}\n</ifx-segmented-control>  \n`;\n  const segmentedControl = wrapper.querySelector('ifx-segmented-control');\n  segmentedControl.addEventListener('ifxChange', action('ifxChange'));\n  return segmentedControl;\n}",...Default.parameters?.docs?.source}}}}}]);