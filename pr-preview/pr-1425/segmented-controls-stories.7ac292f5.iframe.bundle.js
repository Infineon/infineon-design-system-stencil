"use strict";(self.webpackChunk_infineon_infineon_design_system_stencil=self.webpackChunk_infineon_infineon_design_system_stencil||[]).push([[8400],{"../../node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{XI:()=>action});var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_=__webpack_require__("storybook/internal/preview-errors"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),v4=__webpack_require__("../../node_modules/uuid/dist/esm-browser/v4.js"),ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a},generateId=()=>"object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.A)():Date.now().toString(36)+Math.random().toString(36).substring(2);function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find((render=>"playing"===render.phase||"rendering"===render.phase));if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_.ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id=generateId(),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler.implicit=options.implicit,handler}},"./src/components/segmented-controls/segmented-controls.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs"),_infineon_infineon_icons__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/@infineon/infineon-icons/dist/icons.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Segmented Controls",tags:["autodocs"],args:{amountOfSegments:5,labelOfSegment:"Label",caption:"Caption text to describe the controls",groupLabel:"Group Label",icon:"star-16",selectedValue:"Value1",size:"regular",value:"Value"},argTypes:{amountOfSegments:{name:"Amount of Segments",control:"number",description:"Control the number of *<ifx-segmented-control>* in component.",table:{category:"story controls",type:{summary:null}}},labelOfSegment:{name:"Label of Segment",description:"Set the label of *<ifx-segmented-control>*.",table:{category:"story controls",type:{summary:"<ifx-segmented-control> `label` </ifx-segmented-control>"}}},icon:{description:"Set icon of a segment.",options:Object.values(_infineon_infineon_icons__WEBPACK_IMPORTED_MODULE_1__.P).map((i=>i.name)),control:{type:"select"},table:{category:"ifx-segmented-control props"}},value:{description:"Set the value of *<ifx-segmented-control>*. Required.",table:{category:"ifx-segmented-control props",type:{summary:"string"}}},caption:{description:"Set the caption text of segmented control group.",table:{category:"ifx-segmented-control-group props"}},groupLabel:{name:"group-label",description:"Set the label of control group.",table:{category:"ifx-segmented-control-group props"}},selectedValue:{name:"selected-value",description:"Set the active segment by assigning the corresponding segment value to this attribute.",table:{category:"ifx-segmented-control-group props"}},size:{description:"Switch the size of Segmented Controls.",control:"radio",options:["regular","small"],table:{category:"ifx-segmented-control-group props",defaultValue:{summary:"regular"},type:{summary:"regular | small"}}},ifxChange:{description:"A custom event *ifxChange* is emitted whenever the *<ifx-segmented-control>* is clicked/selected.\n\n    event.detail: \n    {\n        previousValue: string,\n        selectedValue: string\n    }\n            ",table:{category:"custom events",type:{summary:"Framework integration",detail:'\nReact: onIfxChipChange={handleChange}\nVue: @ifxChipChange="handleChange"\nAngular: (ifxChipChange)="handleChange()"\nVanillaJs: .addEventListener("ifxChipChange", (event) => {/*handle change*/});'}}}}},Default=(args=>{const wrapper=document.createElement("div");wrapper.innerHTML=`\n    <ifx-segmented-control-group\n    caption = '${args.caption}'\n    group-label = '${args.groupLabel}'\n    selected-value = '${args.selectedValue}'\n    size = '${args.size}'>\n        ${Array.from({length:args.amountOfSegments},((_,segmentId)=>{const segment=document.createElement("ifx-segmented-control");return segment.innerText=args.labelOfSegment,segment.setAttribute("value",`${args.value}${segmentId+1}`),segment.setAttribute("icon",`${args.icon}`),segment.outerHTML})).join("\n        ")}\n    </ifx-segmented-control-group>\n    <script>\n        const segmentedControlGroup = document.querySelector('ifx-segmented-control-group');\n        segmentedControlGroup.addEventListener('ifxChange', (e) => {\n            segmentedControlGroup.selectedValue = e.detail.selectedValue;\n        });\n    <\/script>     \n`;const segmentedControlGroup=wrapper.querySelector("ifx-segmented-control-group");return segmentedControlGroup.addEventListener("ifxChange",(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.XI)("ifxChange")),segmentedControlGroup.addEventListener("ifxChange",(e=>{segmentedControlGroup.selectedValue=e.detail.selectedValue})),wrapper}).bind({}),__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => {\n  const wrapper = document.createElement('div');\n  wrapper.innerHTML = `\n    <ifx-segmented-control-group\n    caption = '${args.caption}'\n    group-label = '${args.groupLabel}'\n    selected-value = '${args.selectedValue}'\n    size = '${args.size}'>\n        ${(() => {\n    return Array.from({\n      length: args.amountOfSegments\n    }, (_, segmentId) => {\n      const segment = document.createElement('ifx-segmented-control');\n      segment.innerText = args.labelOfSegment;\n      segment.setAttribute('value', `${args.value}${segmentId + 1}`);\n      segment.setAttribute('icon', `${args.icon}`);\n      return segment.outerHTML;\n    }).join(`\\n        `);\n  })()}\n    </ifx-segmented-control-group>\n    <script>\n        const segmentedControlGroup = document.querySelector('ifx-segmented-control-group');\n        segmentedControlGroup.addEventListener('ifxChange', (e) => {\n            segmentedControlGroup.selectedValue = e.detail.selectedValue;\n        });\n    <\/script>     \n`;\n  const segmentedControlGroup = wrapper.querySelector('ifx-segmented-control-group');\n  segmentedControlGroup.addEventListener('ifxChange', action('ifxChange'));\n  segmentedControlGroup.addEventListener('ifxChange', e => {\n    segmentedControlGroup.selectedValue = e.detail.selectedValue;\n  });\n  return wrapper;\n}",...Default.parameters?.docs?.source}}}}}]);