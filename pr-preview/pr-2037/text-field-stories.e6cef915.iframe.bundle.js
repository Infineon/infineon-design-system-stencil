"use strict";(self.webpackChunk_infineon_infineon_design_system_stencil=self.webpackChunk_infineon_infineon_design_system_stencil||[]).push([[8021],{"./src/components/text-field/text-field.stories.ts":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.Default=void 0;var _addonActions=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.js"),_infineonIcons=__webpack_require__("../../node_modules/@infineon/infineon-icons/dist/icons.js");exports.default={title:"Components/Text Field",args:{label:"Label",error:!1,disabled:!1,size:"m",icon:"",success:!1,placeholder:"Placeholder",readOnly:!1,caption:"Caption",required:!0,optional:!1,name:"text-field",showDeleteIcon:!1,maxlength:"",value:"",autocomplete:"on",type:"text",internalId:"text-field"},argTypes:{label:{name:"Label of Text Field",description:"The text label displayed above the *<ifx-text-field>*.",table:{category:"story controls"}},error:{description:"Indicates an error state for the text field.",table:{category:"ifx-text-field props",defaultValue:{summary:!1}}},disabled:{description:"Disables the text field.",table:{category:"ifx-text-field props",defaultValue:{summary:!1}}},size:{description:"Size options: s (36px) and m (40px) - default: m",options:["s","m"],control:"radio",table:{category:"ifx-text-field props",defaultValue:{summary:"m"}}},icon:{description:"Specifies an icon to display within the text field.",options:Object.keys(_infineonIcons.icons),control:"select",table:{category:"ifx-text-field props",defaultValue:{summary:""}}},success:{description:"Indicates a successful state for the text field.",table:{category:"ifx-text-field props",defaultValue:{summary:!1}}},placeholder:{description:"Displays a placeholder text inside the text field when it is empty.",table:{category:"ifx-text-field props"}},readOnly:{name:"read-only",description:"Text cannot be edited when set to true.\n \n*Note: It is different from disabled prop, control is focusable in readOnly mode unlike disabled.*",table:{category:"ifx-text-field props",defaultValue:{summary:"false"}}},caption:{description:"Text displayed below the text field to provide additional information.",table:{category:"ifx-text-field props"}},required:{description:"Marks the text field as required for form submission. Displays an asterisk next to the label when set to **true**.",table:{category:"ifx-text-field props",defaultValue:{summary:!0}}},optional:{description:"Indicates that the field is optional.",table:{category:"ifx-text-field props",defaultValue:{summary:!1}}},name:{description:"Name of the element, that is used as reference when a form is submitted.",table:{category:"ifx-text-field props"}},showDeleteIcon:{description:"Displays a delete icon inside the text field when set to **true**, allowing user to clear the input content.",table:{category:"ifx-text-field props",defaultValue:{summary:!1}}},maxlength:{description:"Specifies the maximum number of characters that can be entered into the text field.",control:"number",table:{category:"ifx-text-field props"}},value:{description:"The value of the text field. It is used for the form submission.",control:"text",table:{category:"ifx-text-field props",type:{summary:"string"}}},internalId:{description:"Sets the ID of the internal input and the value of htmlFor for the label element",control:"text",table:{category:"ifx-text-field props",defaultValue:{summary:"text-field"},type:{summary:"string"}}},autocomplete:{description:'Sets the autocomplete attribute. "on" by default.',control:"text",table:{category:"ifx-text-field props",type:{summary:"string"}}},type:{description:'Sets the type attribute. "Text" by default.',options:["text","password"],control:"radio",table:{category:"ifx-text-field props",type:{summary:"string"},defaultValue:{summary:"text"}}},ifxInput:{action:"ifxInput",description:"Custom event emitted on input change.",table:{category:"custom events",type:{summary:"Framework integration",detail:'React: onIfxInput={handleInput}\nVue:@ifxInput="handleInput"\nAngular:(ifxInput)="handleInput()"\nVanillaJs:.addEventListener("ifxInput", (event) => {//handle input});'}}}}};exports.Default=(({error,disabled,success,size,placeholder,readOnly,label,caption,icon,required,optional,name,maxlength,showDeleteIcon,value,autocomplete,type,internalId})=>{const element=document.createElement("ifx-text-field");element.setAttribute("error",error),element.setAttribute("disabled",disabled),element.setAttribute("size",size),element.setAttribute("icon",icon),element.setAttribute("success",success),element.setAttribute("placeholder",placeholder),element.setAttribute("read-only",readOnly),element.setAttribute("caption",caption),element.setAttribute("required",required),element.setAttribute("optional",optional),element.setAttribute("name",name),element.setAttribute("show-delete-icon",showDeleteIcon),element.setAttribute("value",value),element.setAttribute("autocomplete",autocomplete),element.setAttribute("type",type),element.setAttribute("internal-id",internalId),maxlength&&element.setAttribute("maxlength",maxlength),element.addEventListener("ifxInput",(0,_addonActions.action)("ifxInput"));const slotContent=document.createTextNode(label);return element.appendChild(slotContent),element}).bind({});module.exports.__namedExportsOrder=["Default"]}}]);